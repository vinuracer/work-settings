# ----- Generic ------- #

# Set the bash type
set-option -g default-shell /bin/zsh

# prefix-setting: reset prefix to Control+b
# set -g prefix C-b
# unbind C-b

# Term type
set -g default-terminal "screen-256color"
set -g status on
setw -g xterm-keys on

# Automatically set window title
set-window-option -g automatic-rename on
set-option -g set-titles on

# Reattach userspaces
# set -g default-command "reattach-to-user-namespace -l zsh"

#1 based window numbering because 0 is all the way to the right
set -g base-index 1
setw -g base-index 1
set-window-option -g pane-base-index 1
setw -g pane-base-index 1

# Lower escape timing from 500ms to 50ms for quicker response to scroll-buffer access.
# Basically allows for faster key repetition. No pause!
set -s escape-time 0

# Enable mouse mode
set -g mouse on
set-window-option -g mouse on
set -g mouse-select-pane on
set -g mouse-resize-pane on
set -g mouse-select-window on

# to enable mouse scroll, see https://github.com/tmux/tmux/issues/145#issuecomment-150736967
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e'"

# Allow xterm titles in terminal window, terminal scrolling with scrollbar, and setting overrides of C-Up, C-Down, C-Left, C-Right
# set -g terminal-overrides "xterm*:XT:smcup@:rmcup@:kUP5=\eOA:kDN5=\eOB:kLFT5=\eOD:kRIT5=\eOC"

# Scroll History
set -g history-limit 300000

# https://www.reddit.com/r/tmux/comments/3paqoi/tmux_21_has_been_released/
bind-key -T root PPage if-shell -F "#{alternate_on}" "send-keys PPage" "copy-mode -e; send-keys PPage"
# bind-key -t vi-copy PPage page-up

# UTF is great, let us use that
set -g utf8
set-window-option -g utf8 on

# decrease command delay (increases vim responsiveness)
set -sg escape-time 1

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*.
setw -g aggressive-resize on

# ------- appearance ------ #

# Set ability to capture on start and restore on exit window data when running an application
setw -g alternate-screen on

set-option -g status-position bottom

# color status bar
set -g status-fg colour231
set -g status-bg colour234

# highlight current window
set-window-option -g window-status-current-fg black
set-window-option -g window-status-current-bg green

# powerline config
# source .local/lib/python3.8/site-packages/powerline/bindings/tmux/powerline.conf

# Powerline style tmux status bar
set -g status-left-length 20
set -g status-left '#[fg=colour16,bg=colour254,bold] #S #[fg=colour254,bg=colour234,nobold]'
set -g status-right '#(eval tmux-airline `tmux display -p "#{client_width}"`)'
set -g status-right-length 150

set -g window-status-format "#[fg=colour244,bg=colour234]#I #[fg=colour240] #[default]#W "
set -g window-status-current-format "#[fg=colour234,bg=colour31]#[fg=colour117,bg=colour31] #I  #[fg=colour231,bold]#W #[fg=colour31,bg=colour234,nobold]"

set-window-option -g window-status-fg colour249
set-window-option -g window-status-activity-attr none
set-window-option -g window-status-bell-attr none
set-window-option -g window-status-activity-fg yellow
set-window-option -g window-status-bell-fg red

# set color of active pane
set -g pane-border-fg colour235
set -g pane-border-bg black
set -g pane-active-border-fg green
set -g pane-active-border-bg black

# Make the split windows go to same directory
set-option default-path "$PWD"
bind-key c new-window -c "#{pane_current_path}"
bind-key % split-window -h -c "#{pane_current_path}"
bind-key '"' split-window -v -c "#{pane_current_path}"

# --------- vi mode keys ------- #

# set the status kets as vi
set -g status-keys vi
set-window-option -g mode-keys vi

# vim mode copy-paste -Mac
# bind-key -T copy-mode-vi 'v' send-keys -X begin-selection
# bind-key -T copy-mode-vi 'y' send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
# bind-key -T copy-mode-vi 'r' send-keys -X rectangle-toggle
# bind P paste-buffer
# bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"

# vim mode copy-paste linux
bind -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi y send -X copy-selection-and-cancel
bind P paste-buffer
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel


# Also copy to system clipboard
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -sel clip -i'
# map copy mode to ctrl+alt+c
bind-key -n 'C-M-c' copy-mode

# tmux key mappings for home and end
bind -n End send-key C-e
bind -n Home send-key C-a

# Copy mode vi key mappings for home and end
# unbind-key -t vi-copy 'Home'
# bind-key -t vi-copy 'Home' start-of-line
# unbind-key -t vi-copy 'End'
# bind-key -t vi-copy 'End' end-of-l


# --------- navigation ----------- #

# Unified Ctrl keybinding for vim + tmux + fzf
# is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
#     | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

# bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
# bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
# bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
# bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
# bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

is_fzf="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?fzf$'"

bind -n C-h run "($is_vim && tmux send-keys C-h) || \
                 tmux select-pane -L"

bind -n C-j run "($is_vim && tmux send-keys C-j)  || \
                 ($is_fzf && tmux send-keys C-j) || \
                 tmux select-pane -D"

bind -n C-k run "($is_vim && tmux send-keys C-k) || \
                ($is_fzf && tmux send-keys C-k)  || \
                tmux select-pane -U"

bind -n C-l run "($is_vim && tmux send-keys C-l) || \
                 tmux select-pane -R"

bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Use Alt-vim keys without prefix key to switch panes
bind -n M-h select-pane -L
bind -n M-j select-pane -D
bind -n M-k select-pane -U
bind -n M-l select-pane -R

# Use Alt-arrow keys without prefix key to switch panes
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D
bind -n M-S-Left prev
bind -n M-S-Right next

bind -n M-Up    if "[ $(tmux display -p '#{pane_current_command}') = vim ]" "send-keys M-Up" "select-pane -U"
bind -n M-Down  if "[ $(tmux display -p '#{pane_current_command}') = vim ]" "send-keys M-Down" "select-pane -D"
bind -n M-Left  if "[ $(tmux display -p '#{pane_current_command}') = vim ]" "send-keys M-Left" "select-pane -L"
bind -n M-Right if "[ $(tmux display -p '#{pane_current_command}') = vim ]" "send-keys M-Right" "select-pane -R"

# Selecting next pane using "Tab"
# -r is to enable repeat of command without need for pressing prefix again
# Tab is repeatable, within repeat-time (ms) delay...
bind-key -r Tab select-pane -t :.+

# Use vim type keys for re-sizing panes
bind -r < resize-pane -L 1
bind -r > resize-pane -R 1
bind -r - resize-pane -D 1
bind -r + resize-pane -U 1

# Shift arrow to switch windows
bind -n S-Left  previous-window
bind -n S-Right next-window

# Shift arrow to switch windows - escape sequence
# bind -n <Esc>[1;2D  previous-window
# bind -n <Esc>[1;2C  next-window

# Raw binding sequence for iterm
bind -n select-pane -L
bind -n select-pane -R
bind -n select-pane -U
bind -n select-pane -D

bind -n C-0 select-window -t 0
bind -n C-1 select-window -t 1
bind -n C-2 select-window -t 2
bind -n C-3 select-window -t 3
bind -n C-4 select-window -t 4
bind -n C-5 select-window -t 5
bind -n C-6 select-window -t 6
bind -n C-7 select-window -t 7
bind -n C-8 select-window -t 8
bind -n C-9 select-window -t 9

# --------- plugins --------- #
set -g @plugin 'MikeDacre/tmux-zsh-vim-titles'

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'

set -g @plugin 'dracula/tmux'

#reload tmux conf with Prefix + r
bind r source-file ~/.tmux.conf \; display "Reloaded tmux.conf"

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run -b '~/.tmux/plugins/tpm/tpm'

# tmux-resurrect
run-shell ~/.local/share/tmux-resurrect/resurrect.tmux
