/* Copyright (c) 2020 Session Buddy - All Rights Reserved */
/* The contents of this file may not be modified, copied, and/or distributed, in whole or in part, without the express permission of the author, reachable at support@sessionbuddy.com */

(function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
            return installedModules[moduleId].exports;
        }
        var module = installedModules[moduleId] = {
            i: moduleId,
            l: false,
            exports: {}
        };
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        module.l = true;
        return module.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.i = function(value) {
        return value;
    };
    __webpack_require__.d = function(exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) {
            Object.defineProperty(exports, name, {
                configurable: false,
                enumerable: true,
                get: getter
            });
        }
    };
    __webpack_require__.n = function(module) {
        var getter = module && module.__esModule ? function getDefault() {
            return module['default'];
        } : function getModuleExports() {
            return module;
        };
        __webpack_require__.d(getter, 'a', getter);
        return getter;
    };
    __webpack_require__.o = function(object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = '';
    return __webpack_require__(__webpack_require__.s = 21);
})([ function(module, exports, __webpack_require__) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
        value: true
    });
    var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function(obj) {
        return typeof obj;
    } : function(obj) {
        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
    };
    var u = {
        findByPredicate: function findByPredicate(arr, predicate, receiver) {
            var i = u.findIndex(arr, predicate, receiver);
            if (i >= 0) return arr[i];
        },
        findIndex: function findIndex(arr, predicate, receiver) {
            if (arr) {
                var l = arr.length;
                for (var i = 0; i < l; i++) {
                    if (predicate.call(receiver, arr[i], i)) {
                        return i;
                    }
                }
            }
            return -1;
        },
        deepClone: function deepClone(v) {
            var r, i;
            if (u.isArray(v)) {
                r = new Array(v.length);
                for (i = 0; i < v.length; i++) {
                    r[i] = u.deepClone(v[i]);
                }
            } else if (u.isPlainObject(v)) {
                r = {};
                for (i in v) {
                    r[i] = u.deepClone(v[i]);
                }
            } else {
                return v;
            }
            return r;
        },
        type: function type(o) {
            var r = Object.prototype.toString.call(o);
            return r.slice(r.indexOf(' ') + 1, -1).toLowerCase();
        },
        isObject: function isObject(o) {
            return (typeof o === 'undefined' ? 'undefined' : _typeof(o)) === 'object' && !!o;
        },
        isPlainObject: function isPlainObject(v) {
            return u.isObject(v) && !v.nodeType && v !== v.window && (!v.constructor || v.constructor.prototype.hasOwnProperty('isPrototypeOf'));
        },
        isArray: function isArray(o) {
            return Object.prototype.toString.call(o) === '[object Array]';
        },
        isFunction: function isFunction(o) {
            return Object.prototype.toString.call(o) === '[object Function]';
        },
        isString: function isString(o) {
            return Object.prototype.toString.call(o) === '[object String]';
        },
        isUndefined: function isUndefined(o) {
            return o === void 0;
        },
        isNumber: function isNumber(o) {
            return Object.prototype.toString.call(o) === '[object Number]';
        },
        isNumeric: function isNumeric(o) {
            return !isNaN(parseFloat(o)) && isFinite(o);
        },
        pick: function pick(o, props, boolProps) {
            var i, p, r = {};
            if (props) {
                for (i = props.length; i--; ) {
                    p = props[i];
                    if (o[p] != null) {
                        r[p] = o[p];
                    }
                }
            }
            if (boolProps) {
                for (i = boolProps.length; i--; ) {
                    p = boolProps[i];
                    r[p] = !!o[p];
                }
            }
            return r;
        },
        find: function find(arr, prop, val) {
            for (var i = arr.length; i--; ) {
                if (arr[i][prop] === val) {
                    return arr[i];
                }
            }
        },
        contains: function contains(arr, val) {
            return arr.indexOf(val) > -1;
        },
        move: function move(arr, o, p) {
            if (u.isUndefined(p)) {
                p = -1;
            }
            arr = arr || [];
            if (u.isUndefined(o)) {
                return arr;
            }
            var i = arr.indexOf(o);
            if (i > -1) {
                if (i === p) {
                    return arr;
                }
                o = arr.splice(i, 1)[0];
                if (p < 0) {
                    p = Math.max(arr.length + 1 + p, 0);
                }
                arr.splice(p, 0, o);
            }
            return arr;
        },
        compare: function compare(arr1, arr2) {
            if (arr1.length !== arr2.length) return false;
            for (var i = 0; i < arr1.length; i++) {
                if (arr1[i] !== arr2[i]) return false;
            }
            return true;
        },
        regExEscape: function regExEscape(txt) {
            return txt.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
        },
        htmlEncode: function htmlEncode(txt) {
            var el = document.createElement('div');
            el.innerText = txt;
            return el.innerHTML.replace(/ /g, '&nbsp;');
        },
        jsonSafeParse: function jsonSafeParse(txt) {
            if (txt != null && txt !== '') return JSON.parse(txt);
        },
        toCSVField: function toCSVField(txt) {
            return '"' + txt.replace(/\"/g, '""') + '"';
        },
        pluralize: function pluralize(count, singular, plural) {
            if (count === 1) return count + ' ' + singular;
            return count + ' ' + plural;
        },
        stringInterpolate: function stringInterpolate(txt, o) {
            return txt.replace(/{([^{}]+)}/g, function(a, b) {
                var r = o[b];
                return u.isString(r) || u.isNumber(r) ? r : a;
            });
        },
        findMatches: function findMatches(txt, re) {
            var matches = void 0;
            txt.replace(re, function(string) {
                var _ref;
                if (!matches) matches = [];
                matches.push({
                    string: string,
                    offset: (_ref = (arguments.length <= 1 ? 0 : arguments.length - 1) - 2 + 1, arguments.length <= _ref ? undefined : arguments[_ref])
                });
            });
            return matches;
        },
        wrapMatches: function wrapMatches(txt, matches, className) {
            var r = '', cursor = 0;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;
            try {
                for (var _iterator = matches[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var match = _step.value;
                    r += u.htmlEncode(txt.substring(cursor, match.offset)) + '<span class="' + className + '">' + u.htmlEncode(match.string) + '</span>';
                    cursor = match.offset + match.string.length;
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
            r += u.htmlEncode(txt.substring(cursor));
            return r;
        }
    };
    exports.default = u;
}, function(module, exports, __webpack_require__) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
        value: true
    });
    var _util = __webpack_require__(0);
    var _util2 = _interopRequireDefault(_util);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    var BrowserAPI = {
        WINDOW_NONE: chrome.windows.WINDOW_ID_NONE,
        WINDOW_CURRENT: chrome.windows.WINDOW_ID_CURRENT,
        WINDOW_NEW: -100,
        setWindowFocus: function setWindowFocus(wins, focusedWid) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;
            try {
                for (var _iterator = wins[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var win = _step.value;
                    win.focused = win.id === focusedWid;
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
            return wins;
        },
        isAdminTab: function isAdminTab(tab) {
            return tab.url && (tab.url.startsWith('chrome:') || tab.url.startsWith('chrome-devtools:') || BrowserAPI.isBookmarkManagerTab(tab));
        },
        isNewTab: function isNewTab(tab) {
            return /^chrome\:\/\/newtab\/?$/.test(tab.url);
        },
        isBookmarkManagerTab: function isBookmarkManagerTab(tab) {
            return tab.url && (tab.url.startsWith('chrome-extension://eemcgdkfndhakfknompkggombfjjjeno') || tab.url.startsWith('chrome://bookmarks/'));
        },
        compareTabs: function compareTabs(tab1, tab2) {
            return tab1.url === tab2.url && (tab1.selected === tab2.selected || tab1.active === tab2.active) && tab1.pinned === tab2.pinned && tab1.incognito === tab2.incognito;
        },
        getWindow: function getWindow(wid, cb) {
            chrome.windows.get(wid, cb);
        },
        extensionId: function extensionId() {
            return chrome.i18n.getMessage('@@extension_id');
        },
        getWindowAndTabs: function getWindowAndTabs(w, cb) {
            chrome.windows.get(w, {
                populate: true
            }, cb);
        },
        getAllWindows: function getAllWindows(opts, cb) {
            if (_util2.default.isFunction(opts)) {
                cb = opts;
                opts = null;
            }
            chrome.windows.getAll(undefined, opts && opts.rotate ? function(wins) {
                rotateWins(wins, cb);
            } : cb);
        },
        getAllWindowsAndTabs: function getAllWindowsAndTabs(opts, cb) {
            if (_util2.default.isFunction(opts)) {
                cb = opts;
                opts = null;
            }
            chrome.windows.getAll({
                populate: true
            }, opts && opts.rotate ? function(wins) {
                rotateWins(wins, cb);
            } : cb);
        },
        getCurrentWindow: function getCurrentWindow(cb) {
            chrome.windows.getCurrent(cb);
        },
        getCurrentWindowAndTabs: function getCurrentWindowAndTabs(cb) {
            if (cb) {
                chrome.windows.getCurrent({
                    populate: true
                }, cb);
            }
        },
        focusWindow: function focusWindow(wid, cb) {
            chrome.windows.update(wid, {
                focused: true
            }, cb);
        },
        activateTab: function activateTab(t, cb) {
            chrome.tabs.update(_util2.default.isObject(t) ? t.id : t, {
                active: true
            }, cb);
        },
        activateFocusTab: function activateFocusTab(t, cb) {
            BrowserAPI.focusWindow(t.windowId, function() {
                BrowserAPI.activateTab(t.id, cb);
            });
        },
        findTab: function findTab(q, cb) {
            if (cb) {
                if (q.id != null) {
                    return chrome.tabs.get(q.id, function(t) {
                        cb(BrowserAPI.matchTab(t, q) ? t : null);
                    });
                }
                BrowserAPI.getCurrentWindowAndTabs(function(cwin) {
                    var j, tabs = cwin.tabs;
                    for (j = 0; j < tabs.length; j++) {
                        if (BrowserAPI.matchTab(tabs[j], q)) {
                            return cb(tabs[j]);
                        }
                    }
                    BrowserAPI.getAllWindowsAndTabs(function(wins) {
                        var i;
                        for (i = 0; i < wins.length; i++) {
                            if (wins[i].id !== cwin.id) {
                                tabs = wins[i].tabs;
                                for (j = 0; j < tabs.length; j++) {
                                    if (BrowserAPI.matchTab(tabs[j], q)) {
                                        return cb(tabs[j]);
                                    }
                                }
                            }
                        }
                        cb(null);
                    });
                });
            }
        },
        matchTab: function matchTab(t, q) {
            if (!t || !q || q.pinned != null && !!q.pinned !== !!t.pinned || q.active != null && !!q.active !== !!t.active || q.incognito != null && !!q.incognito !== !!t.incognito || q.id != null && q.id !== t.id || q.url != null && (t.url == null || q.url.replace(/\/$/, '') !== t.url.replace(/\/$/, ''))) {
                return false;
            }
            return true;
        },
        navigateTab: function navigateTab(opts, incognitoRejectCb) {
            if (BrowserAPI.isAdminTab(opts) && !BrowserAPI.isNewTab(opts)) {
                opts.incognito = false;
            }
            chrome.extension.isAllowedIncognitoAccess(function(allow) {
                if (!allow && !!opts.incognito) {
                    return incognitoRejectCb && incognitoRejectCb();
                }
                BrowserAPI.findTab(_util2.default.pick(opts, [ 'id', 'url' ], [ 'pinned', 'incognito' ]), function(t) {
                    if (t) {
                        return BrowserAPI.activateFocusTab(t);
                    }
                    BrowserAPI.getCurrentWindow(function(w) {
                        var newTabOpts = _util2.default.pick(opts, [ 'url' ], [ 'pinned', 'active' ]);
                        if (!!w.incognito === !!opts.incognito) {
                            w.focused = !!opts.focused;
                            return BrowserAPI.openTab(newTabOpts, w);
                        }
                        BrowserAPI.getAllWindows(function(wins) {
                            for (var i = 0; i < wins.length; i++) {
                                if (!!wins[i].incognito === !!opts.incognito) {
                                    wins[i].focused = !!opts.focused;
                                    return BrowserAPI.openTab(newTabOpts, wins[i]);
                                }
                            }
                            BrowserAPI.openTab(newTabOpts, {
                                id: BrowserAPI.WINDOW_NEW,
                                incognito: !!opts.incognito,
                                focused: !!opts.focused
                            });
                        });
                    });
                });
            });
        },
        openTab: function openTab(t, w, cb) {
            var requiresSpecialHandling;
            if (arguments.length < 2 || _util2.default.isFunction(w)) {
                cb = w;
                w = t.windowId == null ? BrowserAPI.WINDOW_CURRENT : t.windowId;
            }
            if (_util2.default.isNumber(w)) {
                if (w === BrowserAPI.WINDOW_NEW) {
                    return BrowserAPI.openTab(t, {
                        id: BrowserAPI.WINDOW_NEW,
                        incognito: !!t.incognito
                    }, cb);
                }
                if (w === BrowserAPI.WINDOW_CURRENT) {
                    return BrowserAPI.getCurrentWindow(function(w) {
                        if (chrome.extension.lastError) {
                            console.error('[SB.BrowserAPI.openTab] Unable to get current window');
                            console.error(chrome.extension.lastError.message);
                            return cb && cb();
                        }
                        BrowserAPI.openTab(t, w, cb);
                    });
                }
                return BrowserAPI.getWindow(w, function(w) {
                    if (chrome.extension.lastError) {
                        console.error('[SB.BrowserAPI.openTab] Unable to get window');
                        console.error(chrome.extension.lastError.message);
                        return cb && cb();
                    }
                    BrowserAPI.openTab(t, w, cb);
                });
            }
            if (!w) {
                console.error('[SB.BrowserAPI.openTab] window not specified');
                return cb && cb();
            }
            if (w.id === BrowserAPI.WINDOW_NEW) {
                var wopts = _util2.default.pick(w, [ 'state', 'type' ], [ 'incognito' ]);
                if (wopts.state === 'minimized') {
                    if (w.focused) {
                        wopts.state = 'normal';
                        wopts.focused = true;
                    }
                } else {
                    wopts.focused = !!w.focused;
                }
                if (wopts.state !== 'minimized' && wopts.state !== 'maximized' && wopts.state !== 'fullscreen') {
                    wopts.left = w.left;
                    wopts.top = w.top;
                    wopts.width = w.width;
                    wopts.height = w.height;
                }
                requiresSpecialHandling = wopts.incognito && t.url.startsWith('chrome-extension://');
                if (!requiresSpecialHandling && t.url != null) {
                    wopts.url = t.url;
                }
                return BrowserAPI.openWindow(wopts, function(w) {
                    if (chrome.extension.lastError) {
                        console.error('[SB.BrowserAPI.openTab] Unable to open window');
                        console.error(chrome.extension.lastError.message);
                        return cb && cb();
                    }
                    if (!!t.pinned || requiresSpecialHandling) {
                        var o = {};
                        if (!!t.pinned) {
                            o.pinned = true;
                        }
                        if (requiresSpecialHandling) {
                            o.url = t.url;
                        }
                        return chrome.tabs.update(w.tabs[0].id, o, cb);
                    }
                    cb && cb(w.tabs[0]);
                });
            }
            var newTabOpts = _util2.default.pick(t, [ 'index' ], [ 'active', 'pinned' ]);
            newTabOpts.windowId = w.id;
            requiresSpecialHandling = w.incognito && t.url.startsWith('chrome-extension://');
            if (!requiresSpecialHandling && t.url != null) {
                newTabOpts.url = t.url;
            }
            chrome.tabs.create(newTabOpts, function(t2) {
                if (chrome.extension.lastError) {
                    console.error('[SB.BrowserAPI.openTab] Unable to create tab');
                    console.error(chrome.extension.lastError.message);
                    return cb && cb();
                }
                if (!!w.focused) {
                    BrowserAPI.focusWindow(t2.windowId);
                }
                if (requiresSpecialHandling) {
                    return chrome.tabs.update(t2.id, {
                        url: t.url
                    }, cb);
                }
                cb && cb(t2);
            });
        },
        openWindow: function openWindow(o, cb) {
            chrome.windows.create(o, cb);
        },
        closeTab: function closeTab(id, cb) {
            chrome.tabs.remove(id, cb);
        },
        closeWindow: function closeWindow(id, cb) {
            chrome.windows.remove(id, cb);
        },
        getBackgroundPage: function getBackgroundPage() {
            return chrome.extension.getBackgroundPage();
        },
        getBackgroundAPI: function getBackgroundAPI() {
            var bg = BrowserAPI.getBackgroundPage();
            if (bg) return bg.getAPI && bg.getAPI();
        },
        getURL: function getURL(path) {
            return chrome.extension.getURL(path);
        },
        getViews: function getViews(opts) {
            return chrome.extension.getViews(opts);
        },
        getI18nMessage: function getI18nMessage(m, subs) {
            return chrome.i18n.getMessage(m, subs);
        },
        setBrowserIcon: function setBrowserIcon(inIconFilename19x19, inIconFilename38x38) {
            var p;
            if (inIconFilename38x38) {
                p = {
                    '19': '/images/logo/' + inIconFilename19x19,
                    '38': '/images/logo/' + inIconFilename38x38
                };
            } else {
                p = '/images/logo/' + inIconFilename19x19;
            }
            chrome.browserAction.setIcon({
                path: p
            });
        }
    };
    function rotateWins(wins, cb) {
        BrowserAPI.getCurrentWindow(function(cWin) {
            var cWinIdx = -1, cWinId = cWin.id;
            if (!wins.length || wins[0].id === cWinId) {
                return cb(wins);
            }
            var i, arr = [];
            for (i = 0; i < wins.length; i++) {
                if (cWinIdx === -1 && wins[i].id === cWinId) {
                    cWinIdx = i;
                }
                if (cWinIdx > -1) {
                    arr.push(wins[i]);
                }
            }
            for (i = 0; i < cWinIdx; i++) {
                arr.push(wins[i]);
            }
            cb(arr);
        });
    }
    exports.default = BrowserAPI;
}, function(module, exports, __webpack_require__) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
        value: true
    });
    var _util = __webpack_require__(0);
    var _util2 = _interopRequireDefault(_util);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    var du = {
        toggleClass: function toggleClass(el, className, add) {
            el.classList[add ? 'add' : 'remove'](className);
        },
        isEnabled: function isEnabled(el) {
            return el.getAttribute('disabled') === null;
        },
        disable: function disable(el) {
            if (!el) return;
            if (_util2.default.isArray(el)) {
                return el.forEach(function(el) {
                    return du.disable(el);
                });
            }
            el.setAttribute('disabled', 'disabled');
        },
        enable: function enable(el) {
            if (!el) return;
            if (_util2.default.isArray(el)) {
                return el.forEach(function(el) {
                    return du.enable(el);
                });
            }
            el.removeAttribute('disabled');
        },
        toggleEnable: function toggleEnable(el, enable) {
            if (enable) {
                du.enable(el);
            } else {
                du.disable(el);
            }
        },
        selectElementContents: function selectElementContents(el) {
            el.focus();
            var range = document.createRange();
            range.selectNodeContents(el);
            var sel = window.getSelection();
            sel.removeAllRanges();
            sel.addRange(range);
        },
        getDevicePixelRatio: function getDevicePixelRatio() {
            return window.devicePixelRatio || 1;
        },
        os: function() {
            var appver = navigator.appVersion;
            return appver.includes('Win') && 'Windows' || appver.includes('Mac') && 'MacOS' || appver.includes('X11') && 'UNIX' || appver.includes('Linux') && 'Linux' || '(unknown)';
        }(),
        makeQueryFunction: function makeQueryFunction(w) {
            w = w || window;
            return function findEl(id, startEl) {
                if (!id) return;
                if (!startEl) return w.document.getElementById(id);
                if (startEl.hasChildNodes()) {
                    var foundEl = void 0;
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;
                    try {
                        for (var _iterator = startEl.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var child = _step.value;
                            if (child.id === id) return child;
                            if (foundEl = findEl(id, child)) return foundEl;
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return) {
                                _iterator.return();
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                }
            };
        },
        createElement: function createElement(tag, id, styleOrClassName, html) {
            var el = document.createElement(tag);
            if (id) el.id = id;
            if (_util2.default.isString(styleOrClassName)) {
                if (styleOrClassName.includes(':')) {
                    el.setAttribute('style', styleOrClassName);
                } else if (styleOrClassName.trim()) {
                    el.className = styleOrClassName;
                }
            }
            if (_util2.default.isString(html) || _util2.default.isNumber(html)) {
                el.innerHTML = html;
            }
            return el;
        },
        isChildOf: function isChildOf(el, parent) {
            while (el) {
                if (el === parent) return true;
                el = el.parentNode;
            }
            return false;
        },
        isElementInDocument: function isElementInDocument(el, doc) {
            return du.isChildOf(el, doc || document);
        },
        isControlEl: function isControlEl(el) {
            switch (_util2.default.type(el)) {
              case 'htmlinputelement':
              case 'htmltextareaelement':
              case 'htmlselectelement':
                return true;
            }
            return false;
        },
        initializeControl: function initializeControl(el, val) {
            if (el.type === 'checkbox') {
                el.checked = val;
            } else if (el.type === 'radio') {
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;
                try {
                    for (var _iterator2 = document.getElementsByName(el.name)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var radio = _step2.value;
                        if (radio.value == val) {
                            radio.checked = true;
                            break;
                        }
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }
            } else {
                el.value = val;
            }
            el.dataset.init = val;
        },
        getControlValue: function getControlValue(el) {
            if (du.isControlEl(el)) {
                if (el.type === 'checkbox') {
                    return el.checked;
                } else if (el.type === 'radio') {
                    var _iteratorNormalCompletion3 = true;
                    var _didIteratorError3 = false;
                    var _iteratorError3 = undefined;
                    try {
                        for (var _iterator3 = el.ownerDocument.getElementsByName(el.name)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                            var radio = _step3.value;
                            if (radio.checked) return radio.value;
                        }
                    } catch (err) {
                        _didIteratorError3 = true;
                        _iteratorError3 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                _iterator3.return();
                            }
                        } finally {
                            if (_didIteratorError3) {
                                throw _iteratorError3;
                            }
                        }
                    }
                } else {
                    return el.value;
                }
            }
        },
        getElementMetrics: function getElementMetrics(el, intendedParent) {
            if (el) {
                if (!intendedParent) {
                    intendedParent = du.isElementInDocument(el) ? el.parentNode : document.body;
                }
                intendedParent.appendChild(el = el.cloneNode(true));
                var savePaddingTop = el.style.paddingTop, savePaddingBottom = el.style.paddingBottom, saveBorderTopWidth = el.style.borderTopWidth, saveBorderBottomWidth = el.style.borderBottomWidth;
                var totalHeight = el.getBoundingClientRect().height;
                el.style.paddingTop = '0';
                var paddingTop = totalHeight - el.getBoundingClientRect().height;
                el.style.borderTopWidth = '0';
                var borderTopWidth = totalHeight - el.getBoundingClientRect().height - paddingTop;
                el.style.paddingBottom = '0';
                var paddingBottom = totalHeight - el.getBoundingClientRect().height - paddingTop - borderTopWidth;
                el.style.borderBottomWidth = '0';
                var borderBottomWidth = totalHeight - el.getBoundingClientRect().height - paddingTop - borderTopWidth - paddingBottom;
                el.style.paddingTop = savePaddingTop;
                el.style.paddingBottom = savePaddingBottom;
                el.style.borderTopWidth = saveBorderTopWidth;
                el.style.borderBottomWidth = saveBorderBottomWidth;
                intendedParent.removeChild(el);
                return {
                    totalHeight: totalHeight,
                    height: totalHeight - paddingTop - paddingBottom - borderTopWidth - borderBottomWidth,
                    paddingTop: paddingTop,
                    paddingBottom: paddingBottom,
                    borderTopWidth: borderTopWidth,
                    borderBottomWidth: borderBottomWidth
                };
            }
        },
        animLoop: function animLoop(renderFunction, cb) {
            if (renderFunction) {
                var _loop = function _loop(now) {
                    if (now - lastFrame <= 0 || renderFunction(now - lastFrame)) {
                        window.requestAnimationFrame(_loop);
                        lastFrame = now;
                    } else {
                        cb && cb();
                    }
                };
                var lastFrame = +new Date();
                _loop(lastFrame);
            } else {
                cb && cb();
            }
        },
        getElementRemovalAnimationFunction: function getElementRemovalAnimationFunction(elArrays, speed, opacityAnim, isLinear, finalCSSClasses, cb) {
            if (elArrays && elArrays.length) {
                speed = speed || 250;
                opacityAnim = opacityAnim || 'pop';
                if (document.webkitHidden) {
                    isLinear = false;
                    opacityAnim = 'none';
                }
                var el = void 0, metrics = void 0, elementInfos = [], finalCSSClassesIdx = 0;
                for (var i = 0; i < elArrays.length; i++) {
                    for (var j = 0; j < elArrays[i].length; j++) {
                        if ((el = elArrays[i][j]) && du.isElementInDocument(el)) {
                            metrics = du.getElementMetrics(el);
                            if (metrics.totalHeight > 0) {
                                elementInfos.push({
                                    element: el,
                                    height: el.style.height,
                                    paddingTop: el.style.paddingTop,
                                    paddingBottom: el.style.paddingBottom,
                                    borderTopWidth: el.style.borderTopWidth,
                                    borderBottomWidth: el.style.borderBottomWidth,
                                    overflowY: el.style.getPropertyValue('overflow-y'),
                                    opacity: el.style.opacity,
                                    metrics: metrics,
                                    speed: speed / metrics.totalHeight,
                                    totalElementHeight: metrics.totalHeight,
                                    stopAnimation: false
                                });
                                if (finalCSSClasses && finalCSSClasses.length) {
                                    elementInfos[elementInfos.length - 1]['finalCssClass'] = finalCSSClasses[finalCSSClassesIdx];
                                    if (finalCSSClassesIdx + 1 < finalCSSClasses.length) {
                                        finalCSSClassesIdx++;
                                    }
                                }
                                el.style.setProperty('overflow-y', 'hidden');
                                el.style.borderTopWidth = metrics.borderTopWidth + 'px';
                                el.style.borderBottomWidth = metrics.borderBottomWidth + 'px';
                                el.style.paddingTop = metrics.paddingTop + 'px';
                                el.style.paddingBottom = metrics.paddingBottom + 'px';
                                el.style.height = metrics.height + 'px';
                                if (opacityAnim == 'pop') {
                                    el.classList.add('transitionedInvisibility');
                                }
                            } else {
                                el.parentNode.removeChild(el);
                            }
                        }
                    }
                }
                if (elementInfos.length) {
                    var stopAnimation_all = true, overallSpeed = 0;
                    if (isLinear) {
                        for (var i = 0; i < elementInfos.length; i++) {
                            overallSpeed += elementInfos[i].metrics.totalHeight;
                        }
                        overallSpeed = speed / overallSpeed;
                    }
                    return function(deltaT) {
                        var adjustment = void 0;
                        if (isLinear) {
                            adjustment = deltaT / overallSpeed;
                        } else {
                            stopAnimation_all = true;
                        }
                        var elementInfo = void 0, style = void 0, adjustmentSurplus = 0;
                        for (var i = 0; i < elementInfos.length; i++) {
                            elementInfo = elementInfos[i];
                            if (!elementInfo.stopAnimation) {
                                if (!isLinear) {
                                    adjustment = deltaT / elementInfo.speed;
                                }
                                adjustment = parseFloat(adjustment.toFixed(10)) + adjustmentSurplus;
                                elementInfo.totalElementHeight -= adjustment;
                                style = elementInfo.element.style;
                                if ((elementInfo.stopAnimation = elementInfo.totalElementHeight <= 0) || document.webkitHidden) {
                                    if (elementInfo.finalCssClass) {
                                        style.height = elementInfo.height;
                                        style.paddingTop = elementInfo.paddingTop;
                                        style.paddingBottom = elementInfo.paddingBottom;
                                        style.borderTopWidth = elementInfo.borderTopWidth;
                                        style.borderBottomWidth = elementInfo.borderBottomWidth;
                                        style.setProperty('overflow-y', elementInfo.overflowY);
                                        style.opacity = elementInfo.opacity;
                                        elementInfo.element.classList.add(elementInfo.finalCssClass);
                                    } else {
                                        elementInfo.element.parentNode.removeChild(elementInfo.element);
                                    }
                                } else {
                                    if (opacityAnim == 'fade') {
                                        style.opacity = (elementInfo.opacity === '' ? 1 : elementInfo.opacity) * elementInfo.totalElementHeight / elementInfo.metrics.totalHeight;
                                    }
                                    if (adjustment > 0 && parseFloat(style.borderBottomWidth) > 0) {
                                        if (adjustment >= parseFloat(style.borderBottomWidth)) {
                                            adjustment -= parseFloat(style.borderBottomWidth);
                                            style.borderBottomWidth = '0';
                                        } else {
                                            style.borderBottomWidth = parseFloat(style.borderBottomWidth) - adjustment + 'px';
                                            adjustment = 0;
                                        }
                                    }
                                    if (adjustment > 0 && parseFloat(style.paddingBottom) > 0) {
                                        if (adjustment >= parseFloat(style.paddingBottom)) {
                                            adjustment -= parseFloat(style.paddingBottom);
                                            style.paddingBottom = '0';
                                        } else {
                                            style.paddingBottom = parseFloat(style.paddingBottom) - adjustment + 'px';
                                            adjustment = 0;
                                        }
                                    }
                                    if (adjustment > 0 && parseFloat(style.height) > 0) {
                                        if (adjustment >= parseFloat(style.height)) {
                                            adjustment -= parseFloat(style.height);
                                            style.height = '0';
                                        } else {
                                            style.height = parseFloat(style.height) - adjustment + 'px';
                                            adjustment = 0;
                                        }
                                    }
                                    if (adjustment > 0 && parseFloat(style.paddingTop) > 0) {
                                        if (adjustment >= parseFloat(style.paddingTop)) {
                                            adjustment -= parseFloat(style.paddingTop);
                                            style.paddingTop = '0';
                                        } else {
                                            style.paddingTop = parseFloat(style.paddingTop) - adjustment + 'px';
                                            adjustment = 0;
                                        }
                                    }
                                    if (adjustment > 0 && parseFloat(style.borderTopWidth) > 0) {
                                        if (adjustment >= parseFloat(style.borderTopWidth)) {
                                            adjustment -= parseFloat(style.borderTopWidth);
                                            style.borderTopWidth = '0';
                                        } else {
                                            style.borderTopWidth = parseFloat(style.borderTopWidth) - adjustment + 'px';
                                            adjustment = 0;
                                        }
                                    }
                                    adjustmentSurplus = adjustment;
                                }
                                if (isLinear) break;
                            }
                            if (!isLinear) {
                                stopAnimation_all = stopAnimation_all && elementInfo.stopAnimation;
                            }
                        }
                        if (document.webkitHidden || isLinear && i === elementInfos.length || !isLinear && stopAnimation_all) {
                            cb && cb();
                            return false;
                        }
                    };
                } else {
                    cb && cb();
                }
            } else {
                cb && cb();
            }
        },
        getElementInsertionAnimationFunction: function getElementInsertionAnimationFunction(elArrays, parent, speed, insertBeforeNodes, opacityAnim, isLinear, cb) {
            if (elArrays && elArrays.length && parent) {
                speed = speed || 150;
                opacityAnim = opacityAnim || 'pop';
                if (document.webkitHidden) {
                    isLinear = false;
                    opacityAnim = 'none';
                }
                var el = void 0, metrics = void 0, isDOMElement = void 0, elementInfos = [], insertBeforeIndex = 0;
                for (var i = 0; i < elArrays.length; i++) {
                    for (var j = 0; j < elArrays[i].length; j++) {
                        if (el = elArrays[i][j]) {
                            metrics = du.getElementMetrics(el, parent);
                            isDOMElement = du.isElementInDocument(el);
                            if (metrics.totalHeight > 0) {
                                elementInfos.push({
                                    element: el,
                                    height: el.style.height,
                                    paddingTop: el.style.paddingTop,
                                    paddingBottom: el.style.paddingBottom,
                                    borderTopWidth: el.style.borderTopWidth,
                                    borderBottomWidth: el.style.borderBottomWidth,
                                    overflowY: el.style.getPropertyValue('overflow-y'),
                                    opacity: el.style.opacity,
                                    metrics: metrics,
                                    speed: speed / metrics.totalHeight,
                                    isDOMElement: isDOMElement,
                                    totalElementHeight: 0,
                                    stopAnimation: false
                                });
                                el.style.setProperty('overflow-y', 'hidden');
                                el.style.height = '0';
                                el.style.paddingTop = '0';
                                el.style.paddingBottom = '0';
                                el.style.borderTopWidth = '0';
                                el.style.borderBottomWidth = '0';
                                if (opacityAnim == 'fade' || opacityAnim == 'pop') {
                                    el.style.opacity = '0';
                                }
                            }
                            if (!isDOMElement) {
                                if (insertBeforeNodes && insertBeforeNodes.length) {
                                    parent.insertBefore(el, insertBeforeNodes[insertBeforeIndex]);
                                    if (insertBeforeIndex + 1 < insertBeforeNodes.length) {
                                        insertBeforeIndex++;
                                    }
                                } else {
                                    parent.appendChild(el);
                                }
                            }
                        }
                    }
                }
                if (elementInfos.length) {
                    var stopAnimation_all = true, overallSpeed = 0;
                    if (isLinear) {
                        for (var i = 0; i < elementInfos.length; i++) {
                            overallSpeed += elementInfos[i].metrics.totalHeight;
                        }
                        overallSpeed = speed / overallSpeed;
                    }
                    return function(deltaT) {
                        var adjustment = void 0;
                        if (isLinear) {
                            adjustment = deltaT / overallSpeed;
                        } else {
                            stopAnimation_all = true;
                        }
                        var elementInfo = void 0, style = void 0, adjustmentSurplus = 0;
                        for (var i = 0; i < elementInfos.length; i++) {
                            elementInfo = elementInfos[i];
                            if (!elementInfo.stopAnimation) {
                                if (!isLinear) {
                                    adjustment = deltaT / elementInfo.speed;
                                }
                                adjustment = parseFloat(adjustment.toFixed(10)) + adjustmentSurplus;
                                elementInfo.totalElementHeight += adjustment;
                                style = elementInfo.element.style;
                                if ((elementInfo.stopAnimation = elementInfo.totalElementHeight > elementInfo.metrics.totalHeight) || document.webkitHidden) {
                                    style.height = elementInfo.height;
                                    style.paddingTop = elementInfo.paddingTop;
                                    style.paddingBottom = elementInfo.paddingBottom;
                                    style.borderTopWidth = elementInfo.borderTopWidth;
                                    style.borderBottomWidth = elementInfo.borderBottomWidth;
                                    style.setProperty('overflow-y', elementInfo.overflowY);
                                    style.opacity = elementInfo.opacity;
                                } else {
                                    if (opacityAnim == 'fade') {
                                        style.opacity = (elementInfo.opacity === '' ? 1 : elementInfo.opacity) * elementInfo.totalElementHeight / elementInfo.metrics.totalHeight;
                                    }
                                    if (adjustment > 0 && parseFloat(style.borderTopWidth) < elementInfo.metrics.borderTopWidth) {
                                        if (adjustment >= elementInfo.metrics.borderTopWidth - parseFloat(style.borderTopWidth)) {
                                            adjustment -= elementInfo.metrics.borderTopWidth - parseFloat(style.borderTopWidth);
                                            style.borderTopWidth = elementInfo.metrics.borderTopWidth + 'px';
                                        } else {
                                            style.borderTopWidth = parseFloat(style.borderTopWidth) + adjustment + 'px';
                                            adjustment = 0;
                                        }
                                    }
                                    if (adjustment > 0 && parseFloat(style.paddingTop) < elementInfo.metrics.paddingTop) {
                                        if (adjustment >= elementInfo.metrics.paddingTop - parseFloat(style.paddingTop)) {
                                            adjustment -= elementInfo.metrics.paddingTop - parseFloat(style.paddingTop);
                                            style.paddingTop = elementInfo.metrics.paddingTop + 'px';
                                        } else {
                                            style.paddingTop = parseFloat(style.paddingTop) + adjustment + 'px';
                                            adjustment = 0;
                                        }
                                    }
                                    if (adjustment > 0 && parseFloat(style.height) < elementInfo.metrics.height) {
                                        if (adjustment >= elementInfo.metrics.height - parseFloat(style.height)) {
                                            adjustment -= elementInfo.metrics.height - parseFloat(style.height);
                                            style.height = elementInfo.metrics.height + 'px';
                                        } else {
                                            style.height = parseFloat(style.height) + adjustment + 'px';
                                            adjustment = 0;
                                        }
                                    }
                                    if (adjustment > 0 && parseFloat(style.paddingBottom) < elementInfo.metrics.paddingBottom) {
                                        if (adjustment >= elementInfo.metrics.paddingBottom - parseFloat(style.paddingBottom)) {
                                            adjustment -= elementInfo.metrics.paddingBottom - parseFloat(style.paddingBottom);
                                            style.paddingBottom = elementInfo.metrics.paddingBottom + 'px';
                                        } else {
                                            style.paddingBottom = parseFloat(style.paddingBottom) + adjustment + 'px';
                                            adjustment = 0;
                                        }
                                    }
                                    if (adjustment > 0 && parseFloat(style.borderBottomWidth) < elementInfo.metrics.borderBottomWidth) {
                                        if (adjustment >= elementInfo.metrics.borderBottomWidth - parseFloat(style.borderBottomWidth)) {
                                            adjustment -= elementInfo.metrics.borderBottomWidth - parseFloat(style.borderBottomWidth);
                                            style.borderBottomWidth = elementInfo.metrics.borderBottomWidth + 'px';
                                        } else {
                                            style.borderBottomWidth = parseFloat(style.borderBottomWidth) + adjustment + 'px';
                                            adjustment = 0;
                                        }
                                    }
                                    adjustmentSurplus = adjustment;
                                }
                                if (isLinear) break;
                            }
                            if (!isLinear) {
                                stopAnimation_all = stopAnimation_all && elementInfo.stopAnimation;
                            }
                        }
                        if (document.webkitHidden || isLinear && i === elementInfos.length || !isLinear && stopAnimation_all) {
                            cb && cb();
                            return false;
                        }
                    };
                } else {
                    cb && cb();
                }
            } else {
                cb && cb();
            }
        }
    };
    exports.default = du;
}, function(module, exports, __webpack_require__) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
        value: true
    });
    var BUFFER_SIZE = 64;
    var CRYPTO = window.crypto || window.msCrypto;
    var BUFFER = new Uint8Array(BUFFER_SIZE);
    var BUFFER_IDX = BUFFER_SIZE;
    var SYM = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    var TOP = SYM.length + 1;
    var FACTOR = 0;
    while ((FACTOR + 1) * SYM.length < 257) {
        FACTOR++;
    }
    function xid() {
        return SYM[ridx()] + SYM[ridx()] + SYM[ridx()] + SYM[ridx()] + SYM[ridx()] + SYM[ridx()] + SYM[ridx()] + SYM[ridx()] + SYM[ridx()] + SYM[ridx()] + SYM[ridx()] + SYM[ridx()] + SYM[ridx()] + SYM[ridx()] + SYM[ridx()] + SYM[ridx()] + SYM[ridx()] + SYM[ridx()] + SYM[ridx()] + SYM[ridx()] + SYM[ridx()] + SYM[ridx()] + SYM[ridx()] + SYM[ridx()] + SYM[ridx()] + SYM[ridx()] + SYM[ridx()] + SYM[ridx()] + SYM[ridx()] + SYM[ridx()] + SYM[ridx()] + SYM[ridx()];
    }
    function ridx() {
        if (BUFFER_IDX >= BUFFER_SIZE) {
            CRYPTO.getRandomValues(BUFFER);
            BUFFER_IDX = 0;
        }
        var idx = BUFFER[BUFFER_IDX++];
        for (var i = 1; i < TOP; i++) {
            if (idx < i * FACTOR) {
                return i - 1;
            }
        }
        return ridx();
    }
    exports.default = xid;
}, function(module, exports, __webpack_require__) {
    'use strict';
    (function(global, module) {
        var __WEBPACK_AMD_DEFINE_RESULT__;
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function(obj) {
            return typeof obj;
        } : function(obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        (function(undefined) {
            var moment, VERSION = '2.8.3', globalScope = typeof global !== 'undefined' ? global : this, oldGlobalMoment, round = Math.round, hasOwnProperty = Object.prototype.hasOwnProperty, i, YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, locales = {}, momentProperties = [], hasModule = typeof module !== 'undefined' && module.exports, aspNetJsonRegex = /^\/?Date\((\-?\d+)/i, aspNetTimeSpanJsonRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/, isoDurationRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/, formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g, parseTokenOneOrTwoDigits = /\d\d?/, parseTokenOneToThreeDigits = /\d{1,3}/, parseTokenOneToFourDigits = /\d{1,4}/, parseTokenOneToSixDigits = /[+\-]?\d{1,6}/, parseTokenDigits = /\d+/, parseTokenWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, parseTokenTimezone = /Z|[\+\-]\d\d:?\d\d/gi, parseTokenT = /T/i, parseTokenTimestampMs = /[\+\-]?\d+(\.\d{1,3})?/, parseTokenOrdinal = /\d{1,2}/, parseTokenOneDigit = /\d/, parseTokenTwoDigits = /\d\d/, parseTokenThreeDigits = /\d{3}/, parseTokenFourDigits = /\d{4}/, parseTokenSixDigits = /[+-]?\d{6}/, parseTokenSignedNumber = /[+-]?\d+/, isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/, isoFormat = 'YYYY-MM-DDTHH:mm:ssZ', isoDates = [ [ 'YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/ ], [ 'YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/ ], [ 'GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/ ], [ 'GGGG-[W]WW', /\d{4}-W\d{2}/ ], [ 'YYYY-DDD', /\d{4}-\d{3}/ ] ], isoTimes = [ [ 'HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/ ], [ 'HH:mm:ss', /(T| )\d\d:\d\d:\d\d/ ], [ 'HH:mm', /(T| )\d\d:\d\d/ ], [ 'HH', /(T| )\d\d/ ] ], parseTimezoneChunker = /([\+\-]|\d\d)/gi, proxyGettersAndSetters = 'Date|Hours|Minutes|Seconds|Milliseconds'.split('|'), unitMillisecondFactors = {
                Milliseconds: 1,
                Seconds: 1e3,
                Minutes: 6e4,
                Hours: 36e5,
                Days: 864e5,
                Months: 2592e6,
                Years: 31536e6
            }, unitAliases = {
                ms: 'millisecond',
                s: 'second',
                m: 'minute',
                h: 'hour',
                d: 'day',
                D: 'date',
                w: 'week',
                W: 'isoWeek',
                M: 'month',
                Q: 'quarter',
                y: 'year',
                DDD: 'dayOfYear',
                e: 'weekday',
                E: 'isoWeekday',
                gg: 'weekYear',
                GG: 'isoWeekYear'
            }, camelFunctions = {
                dayofyear: 'dayOfYear',
                isoweekday: 'isoWeekday',
                isoweek: 'isoWeek',
                weekyear: 'weekYear',
                isoweekyear: 'isoWeekYear'
            }, formatFunctions = {}, relativeTimeThresholds = {
                s: 45,
                m: 45,
                h: 22,
                d: 26,
                M: 11
            }, ordinalizeTokens = 'DDD w W M D d'.split(' '), paddedTokens = 'M D H h m s w W'.split(' '), formatTokenFunctions = {
                M: function M() {
                    return this.month() + 1;
                },
                MMM: function MMM(format) {
                    return this.localeData().monthsShort(this, format);
                },
                MMMM: function MMMM(format) {
                    return this.localeData().months(this, format);
                },
                D: function D() {
                    return this.date();
                },
                DDD: function DDD() {
                    return this.dayOfYear();
                },
                d: function d() {
                    return this.day();
                },
                dd: function dd(format) {
                    return this.localeData().weekdaysMin(this, format);
                },
                ddd: function ddd(format) {
                    return this.localeData().weekdaysShort(this, format);
                },
                dddd: function dddd(format) {
                    return this.localeData().weekdays(this, format);
                },
                w: function w() {
                    return this.week();
                },
                W: function W() {
                    return this.isoWeek();
                },
                YY: function YY() {
                    return leftZeroFill(this.year() % 100, 2);
                },
                YYYY: function YYYY() {
                    return leftZeroFill(this.year(), 4);
                },
                YYYYY: function YYYYY() {
                    return leftZeroFill(this.year(), 5);
                },
                YYYYYY: function YYYYYY() {
                    var y = this.year(), sign = y >= 0 ? '+' : '-';
                    return sign + leftZeroFill(Math.abs(y), 6);
                },
                gg: function gg() {
                    return leftZeroFill(this.weekYear() % 100, 2);
                },
                gggg: function gggg() {
                    return leftZeroFill(this.weekYear(), 4);
                },
                ggggg: function ggggg() {
                    return leftZeroFill(this.weekYear(), 5);
                },
                GG: function GG() {
                    return leftZeroFill(this.isoWeekYear() % 100, 2);
                },
                GGGG: function GGGG() {
                    return leftZeroFill(this.isoWeekYear(), 4);
                },
                GGGGG: function GGGGG() {
                    return leftZeroFill(this.isoWeekYear(), 5);
                },
                e: function e() {
                    return this.weekday();
                },
                E: function E() {
                    return this.isoWeekday();
                },
                a: function a() {
                    return this.localeData().meridiem(this.hours(), this.minutes(), true);
                },
                A: function A() {
                    return this.localeData().meridiem(this.hours(), this.minutes(), false);
                },
                H: function H() {
                    return this.hours();
                },
                h: function h() {
                    return this.hours() % 12 || 12;
                },
                m: function m() {
                    return this.minutes();
                },
                s: function s() {
                    return this.seconds();
                },
                S: function S() {
                    return toInt(this.milliseconds() / 100);
                },
                SS: function SS() {
                    return leftZeroFill(toInt(this.milliseconds() / 10), 2);
                },
                SSS: function SSS() {
                    return leftZeroFill(this.milliseconds(), 3);
                },
                SSSS: function SSSS() {
                    return leftZeroFill(this.milliseconds(), 3);
                },
                Z: function Z() {
                    var a = -this.zone(), b = '+';
                    if (a < 0) {
                        a = -a;
                        b = '-';
                    }
                    return b + leftZeroFill(toInt(a / 60), 2) + ':' + leftZeroFill(toInt(a) % 60, 2);
                },
                ZZ: function ZZ() {
                    var a = -this.zone(), b = '+';
                    if (a < 0) {
                        a = -a;
                        b = '-';
                    }
                    return b + leftZeroFill(toInt(a / 60), 2) + leftZeroFill(toInt(a) % 60, 2);
                },
                z: function z() {
                    return this.zoneAbbr();
                },
                zz: function zz() {
                    return this.zoneName();
                },
                X: function X() {
                    return this.unix();
                },
                Q: function Q() {
                    return this.quarter();
                }
            }, deprecations = {}, lists = [ 'months', 'monthsShort', 'weekdays', 'weekdaysShort', 'weekdaysMin' ];
            function dfl(a, b, c) {
                switch (arguments.length) {
                  case 2:
                    return a != null ? a : b;

                  case 3:
                    return a != null ? a : b != null ? b : c;

                  default:
                    throw new Error('Implement me');
                }
            }
            function hasOwnProp(a, b) {
                return hasOwnProperty.call(a, b);
            }
            function defaultParsingFlags() {
                return {
                    empty: false,
                    unusedTokens: [],
                    unusedInput: [],
                    overflow: -2,
                    charsLeftOver: 0,
                    nullInput: false,
                    invalidMonth: null,
                    invalidFormat: false,
                    userInvalidated: false,
                    iso: false
                };
            }
            function printMsg(msg) {
                if (moment.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
                    console.warn('Deprecation warning: ' + msg);
                }
            }
            function deprecate(msg, fn) {
                var firstTime = true;
                return extend(function() {
                    if (firstTime) {
                        printMsg(msg);
                        firstTime = false;
                    }
                    return fn.apply(this, arguments);
                }, fn);
            }
            function deprecateSimple(name, msg) {
                if (!deprecations[name]) {
                    printMsg(msg);
                    deprecations[name] = true;
                }
            }
            function padToken(func, count) {
                return function(a) {
                    return leftZeroFill(func.call(this, a), count);
                };
            }
            function ordinalizeToken(func, period) {
                return function(a) {
                    return this.localeData().ordinal(func.call(this, a), period);
                };
            }
            while (ordinalizeTokens.length) {
                i = ordinalizeTokens.pop();
                formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i], i);
            }
            while (paddedTokens.length) {
                i = paddedTokens.pop();
                formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);
            }
            formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);
            function Locale() {}
            function Moment(config, skipOverflow) {
                if (skipOverflow !== false) {
                    checkOverflow(config);
                }
                copyConfig(this, config);
                this._d = new Date(+config._d);
            }
            function Duration(duration) {
                var normalizedInput = normalizeObjectUnits(duration), years = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months = normalizedInput.month || 0, weeks = normalizedInput.week || 0, days = normalizedInput.day || 0, hours = normalizedInput.hour || 0, minutes = normalizedInput.minute || 0, seconds = normalizedInput.second || 0, milliseconds = normalizedInput.millisecond || 0;
                this._milliseconds = +milliseconds + seconds * 1e3 + minutes * 6e4 + hours * 36e5;
                this._days = +days + weeks * 7;
                this._months = +months + quarters * 3 + years * 12;
                this._data = {};
                this._locale = moment.localeData();
                this._bubble();
            }
            function extend(a, b) {
                for (var i in b) {
                    if (hasOwnProp(b, i)) {
                        a[i] = b[i];
                    }
                }
                if (hasOwnProp(b, 'toString')) {
                    a.toString = b.toString;
                }
                if (hasOwnProp(b, 'valueOf')) {
                    a.valueOf = b.valueOf;
                }
                return a;
            }
            function copyConfig(to, from) {
                var i, prop, val;
                if (typeof from._isAMomentObject !== 'undefined') {
                    to._isAMomentObject = from._isAMomentObject;
                }
                if (typeof from._i !== 'undefined') {
                    to._i = from._i;
                }
                if (typeof from._f !== 'undefined') {
                    to._f = from._f;
                }
                if (typeof from._l !== 'undefined') {
                    to._l = from._l;
                }
                if (typeof from._strict !== 'undefined') {
                    to._strict = from._strict;
                }
                if (typeof from._tzm !== 'undefined') {
                    to._tzm = from._tzm;
                }
                if (typeof from._isUTC !== 'undefined') {
                    to._isUTC = from._isUTC;
                }
                if (typeof from._offset !== 'undefined') {
                    to._offset = from._offset;
                }
                if (typeof from._pf !== 'undefined') {
                    to._pf = from._pf;
                }
                if (typeof from._locale !== 'undefined') {
                    to._locale = from._locale;
                }
                if (momentProperties.length > 0) {
                    for (i in momentProperties) {
                        prop = momentProperties[i];
                        val = from[prop];
                        if (typeof val !== 'undefined') {
                            to[prop] = val;
                        }
                    }
                }
                return to;
            }
            function absRound(number) {
                if (number < 0) {
                    return Math.ceil(number);
                } else {
                    return Math.floor(number);
                }
            }
            function leftZeroFill(number, targetLength, forceSign) {
                var output = '' + Math.abs(number), sign = number >= 0;
                while (output.length < targetLength) {
                    output = '0' + output;
                }
                return (sign ? forceSign ? '+' : '' : '-') + output;
            }
            function positiveMomentsDifference(base, other) {
                var res = {
                    milliseconds: 0,
                    months: 0
                };
                res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
                if (base.clone().add(res.months, 'M').isAfter(other)) {
                    --res.months;
                }
                res.milliseconds = +other - +base.clone().add(res.months, 'M');
                return res;
            }
            function momentsDifference(base, other) {
                var res;
                other = makeAs(other, base);
                if (base.isBefore(other)) {
                    res = positiveMomentsDifference(base, other);
                } else {
                    res = positiveMomentsDifference(other, base);
                    res.milliseconds = -res.milliseconds;
                    res.months = -res.months;
                }
                return res;
            }
            function createAdder(direction, name) {
                return function(val, period) {
                    var dur, tmp;
                    if (period !== null && !isNaN(+period)) {
                        deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
                        tmp = val;
                        val = period;
                        period = tmp;
                    }
                    val = typeof val === 'string' ? +val : val;
                    dur = moment.duration(val, period);
                    addOrSubtractDurationFromMoment(this, dur, direction);
                    return this;
                };
            }
            function addOrSubtractDurationFromMoment(mom, duration, isAdding, updateOffset) {
                var milliseconds = duration._milliseconds, days = duration._days, months = duration._months;
                updateOffset = updateOffset == null ? true : updateOffset;
                if (milliseconds) {
                    mom._d.setTime(+mom._d + milliseconds * isAdding);
                }
                if (days) {
                    rawSetter(mom, 'Date', rawGetter(mom, 'Date') + days * isAdding);
                }
                if (months) {
                    rawMonthSetter(mom, rawGetter(mom, 'Month') + months * isAdding);
                }
                if (updateOffset) {
                    moment.updateOffset(mom, days || months);
                }
            }
            function isArray(input) {
                return Object.prototype.toString.call(input) === '[object Array]';
            }
            function isDate(input) {
                return Object.prototype.toString.call(input) === '[object Date]' || input instanceof Date;
            }
            function compareArrays(array1, array2, dontConvert) {
                var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
                for (i = 0; i < len; i++) {
                    if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
                        diffs++;
                    }
                }
                return diffs + lengthDiff;
            }
            function normalizeUnits(units) {
                if (units) {
                    var lowered = units.toLowerCase().replace(/(.)s$/, '$1');
                    units = unitAliases[units] || camelFunctions[lowered] || lowered;
                }
                return units;
            }
            function normalizeObjectUnits(inputObject) {
                var normalizedInput = {}, normalizedProp, prop;
                for (prop in inputObject) {
                    if (hasOwnProp(inputObject, prop)) {
                        normalizedProp = normalizeUnits(prop);
                        if (normalizedProp) {
                            normalizedInput[normalizedProp] = inputObject[prop];
                        }
                    }
                }
                return normalizedInput;
            }
            function makeList(field) {
                var count, setter;
                if (field.indexOf('week') === 0) {
                    count = 7;
                    setter = 'day';
                } else if (field.indexOf('month') === 0) {
                    count = 12;
                    setter = 'month';
                } else {
                    return;
                }
                moment[field] = function(format, index) {
                    var i, getter, method = moment._locale[field], results = [];
                    if (typeof format === 'number') {
                        index = format;
                        format = undefined;
                    }
                    getter = function getter(i) {
                        var m = moment().utc().set(setter, i);
                        return method.call(moment._locale, m, format || '');
                    };
                    if (index != null) {
                        return getter(index);
                    } else {
                        for (i = 0; i < count; i++) {
                            results.push(getter(i));
                        }
                        return results;
                    }
                };
            }
            function toInt(argumentForCoercion) {
                var coercedNumber = +argumentForCoercion, value = 0;
                if (coercedNumber !== 0 && isFinite(coercedNumber)) {
                    if (coercedNumber >= 0) {
                        value = Math.floor(coercedNumber);
                    } else {
                        value = Math.ceil(coercedNumber);
                    }
                }
                return value;
            }
            function _daysInMonth(year, month) {
                return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
            }
            function _weeksInYear(year, dow, doy) {
                return weekOfYear(moment([ year, 11, 31 + dow - doy ]), dow, doy).week;
            }
            function daysInYear(year) {
                return _isLeapYear(year) ? 366 : 365;
            }
            function _isLeapYear(year) {
                return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
            }
            function checkOverflow(m) {
                var overflow;
                if (m._a && m._pf.overflow === -2) {
                    overflow = m._a[MONTH] < 0 || m._a[MONTH] > 11 ? MONTH : m._a[DATE] < 1 || m._a[DATE] > _daysInMonth(m._a[YEAR], m._a[MONTH]) ? DATE : m._a[HOUR] < 0 || m._a[HOUR] > 23 ? HOUR : m._a[MINUTE] < 0 || m._a[MINUTE] > 59 ? MINUTE : m._a[SECOND] < 0 || m._a[SECOND] > 59 ? SECOND : m._a[MILLISECOND] < 0 || m._a[MILLISECOND] > 999 ? MILLISECOND : -1;
                    if (m._pf._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                        overflow = DATE;
                    }
                    m._pf.overflow = overflow;
                }
            }
            function _isValid(m) {
                if (m._isValid == null) {
                    m._isValid = !isNaN(m._d.getTime()) && m._pf.overflow < 0 && !m._pf.empty && !m._pf.invalidMonth && !m._pf.nullInput && !m._pf.invalidFormat && !m._pf.userInvalidated;
                    if (m._strict) {
                        m._isValid = m._isValid && m._pf.charsLeftOver === 0 && m._pf.unusedTokens.length === 0;
                    }
                }
                return m._isValid;
            }
            function normalizeLocale(key) {
                return key ? key.toLowerCase().replace('_', '-') : key;
            }
            function chooseLocale(names) {
                var i = 0, j, next, locale, split;
                while (i < names.length) {
                    split = normalizeLocale(names[i]).split('-');
                    j = split.length;
                    next = normalizeLocale(names[i + 1]);
                    next = next ? next.split('-') : null;
                    while (j > 0) {
                        locale = loadLocale(split.slice(0, j).join('-'));
                        if (locale) {
                            return locale;
                        }
                        if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                            break;
                        }
                        j--;
                    }
                    i++;
                }
                return null;
            }
            function loadLocale(name) {
                var oldLocale = null;
                if (!locales[name] && hasModule) {
                    try {
                        oldLocale = moment.locale();
                        !function webpackMissingModule() {
                            var e = new Error('Cannot find module "./locale"');
                            e.code = 'MODULE_NOT_FOUND';
                            throw e;
                        }();
                        moment.locale(oldLocale);
                    } catch (e) {}
                }
                return locales[name];
            }
            function makeAs(input, model) {
                return model._isUTC ? moment(input).zone(model._offset || 0) : moment(input).local();
            }
            extend(Locale.prototype, {
                set: function set(config) {
                    var prop, i;
                    for (i in config) {
                        prop = config[i];
                        if (typeof prop === 'function') {
                            this[i] = prop;
                        } else {
                            this['_' + i] = prop;
                        }
                    }
                },
                _months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
                months: function months(m) {
                    return this._months[m.month()];
                },
                _monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
                monthsShort: function monthsShort(m) {
                    return this._monthsShort[m.month()];
                },
                monthsParse: function monthsParse(monthName) {
                    var i, mom, regex;
                    if (!this._monthsParse) {
                        this._monthsParse = [];
                    }
                    for (i = 0; i < 12; i++) {
                        if (!this._monthsParse[i]) {
                            mom = moment.utc([ 2e3, i ]);
                            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
                        }
                        if (this._monthsParse[i].test(monthName)) {
                            return i;
                        }
                    }
                },
                _weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
                weekdays: function weekdays(m) {
                    return this._weekdays[m.day()];
                },
                _weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
                weekdaysShort: function weekdaysShort(m) {
                    return this._weekdaysShort[m.day()];
                },
                _weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
                weekdaysMin: function weekdaysMin(m) {
                    return this._weekdaysMin[m.day()];
                },
                weekdaysParse: function weekdaysParse(weekdayName) {
                    var i, mom, regex;
                    if (!this._weekdaysParse) {
                        this._weekdaysParse = [];
                    }
                    for (i = 0; i < 7; i++) {
                        if (!this._weekdaysParse[i]) {
                            mom = moment([ 2e3, 1 ]).day(i);
                            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
                        }
                        if (this._weekdaysParse[i].test(weekdayName)) {
                            return i;
                        }
                    }
                },
                _longDateFormat: {
                    LT: 'h:mm A',
                    L: 'MM/DD/YYYY',
                    LL: 'MMMM D, YYYY',
                    LLL: 'MMMM D, YYYY LT',
                    LLLL: 'dddd, MMMM D, YYYY LT'
                },
                longDateFormat: function longDateFormat(key) {
                    var output = this._longDateFormat[key];
                    if (!output && this._longDateFormat[key.toUpperCase()]) {
                        output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function(val) {
                            return val.slice(1);
                        });
                        this._longDateFormat[key] = output;
                    }
                    return output;
                },
                isPM: function isPM(input) {
                    return (input + '').toLowerCase().charAt(0) === 'p';
                },
                _meridiemParse: /[ap]\.?m?\.?/i,
                meridiem: function meridiem(hours, minutes, isLower) {
                    if (hours > 11) {
                        return isLower ? 'pm' : 'PM';
                    } else {
                        return isLower ? 'am' : 'AM';
                    }
                },
                _calendar: {
                    sameDay: '[Today at] LT',
                    nextDay: '[Tomorrow at] LT',
                    nextWeek: 'dddd [at] LT',
                    lastDay: '[Yesterday at] LT',
                    lastWeek: '[Last] dddd [at] LT',
                    sameElse: 'L'
                },
                calendar: function calendar(key, mom) {
                    var output = this._calendar[key];
                    return typeof output === 'function' ? output.apply(mom) : output;
                },
                _relativeTime: {
                    future: 'in %s',
                    past: '%s ago',
                    s: 'a few seconds',
                    m: 'a minute',
                    mm: '%d minutes',
                    h: 'an hour',
                    hh: '%d hours',
                    d: 'a day',
                    dd: '%d days',
                    M: 'a month',
                    MM: '%d months',
                    y: 'a year',
                    yy: '%d years'
                },
                relativeTime: function relativeTime(number, withoutSuffix, string, isFuture) {
                    var output = this._relativeTime[string];
                    return typeof output === 'function' ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
                },
                pastFuture: function pastFuture(diff, output) {
                    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
                    return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
                },
                ordinal: function ordinal(number) {
                    return this._ordinal.replace('%d', number);
                },
                _ordinal: '%d',
                preparse: function preparse(string) {
                    return string;
                },
                postformat: function postformat(string) {
                    return string;
                },
                week: function week(mom) {
                    return weekOfYear(mom, this._week.dow, this._week.doy).week;
                },
                _week: {
                    dow: 0,
                    doy: 6
                },
                _invalidDate: 'Invalid date',
                invalidDate: function invalidDate() {
                    return this._invalidDate;
                }
            });
            function removeFormattingTokens(input) {
                if (input.match(/\[[\s\S]/)) {
                    return input.replace(/^\[|\]$/g, '');
                }
                return input.replace(/\\/g, '');
            }
            function makeFormatFunction(format) {
                var array = format.match(formattingTokens), i, length;
                for (i = 0, length = array.length; i < length; i++) {
                    if (formatTokenFunctions[array[i]]) {
                        array[i] = formatTokenFunctions[array[i]];
                    } else {
                        array[i] = removeFormattingTokens(array[i]);
                    }
                }
                return function(mom) {
                    var output = '';
                    for (i = 0; i < length; i++) {
                        output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
                    }
                    return output;
                };
            }
            function formatMoment(m, format) {
                if (!m.isValid()) {
                    return m.localeData().invalidDate();
                }
                format = expandFormat(format, m.localeData());
                if (!formatFunctions[format]) {
                    formatFunctions[format] = makeFormatFunction(format);
                }
                return formatFunctions[format](m);
            }
            function expandFormat(format, locale) {
                var i = 5;
                function replaceLongDateFormatTokens(input) {
                    return locale.longDateFormat(input) || input;
                }
                localFormattingTokens.lastIndex = 0;
                while (i >= 0 && localFormattingTokens.test(format)) {
                    format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
                    localFormattingTokens.lastIndex = 0;
                    i -= 1;
                }
                return format;
            }
            function getParseRegexForToken(token, config) {
                var a, strict = config._strict;
                switch (token) {
                  case 'Q':
                    return parseTokenOneDigit;

                  case 'DDDD':
                    return parseTokenThreeDigits;

                  case 'YYYY':
                  case 'GGGG':
                  case 'gggg':
                    return strict ? parseTokenFourDigits : parseTokenOneToFourDigits;

                  case 'Y':
                  case 'G':
                  case 'g':
                    return parseTokenSignedNumber;

                  case 'YYYYYY':
                  case 'YYYYY':
                  case 'GGGGG':
                  case 'ggggg':
                    return strict ? parseTokenSixDigits : parseTokenOneToSixDigits;

                  case 'S':
                    if (strict) {
                        return parseTokenOneDigit;
                    }

                  case 'SS':
                    if (strict) {
                        return parseTokenTwoDigits;
                    }

                  case 'SSS':
                    if (strict) {
                        return parseTokenThreeDigits;
                    }

                  case 'DDD':
                    return parseTokenOneToThreeDigits;

                  case 'MMM':
                  case 'MMMM':
                  case 'dd':
                  case 'ddd':
                  case 'dddd':
                    return parseTokenWord;

                  case 'a':
                  case 'A':
                    return config._locale._meridiemParse;

                  case 'X':
                    return parseTokenTimestampMs;

                  case 'Z':
                  case 'ZZ':
                    return parseTokenTimezone;

                  case 'T':
                    return parseTokenT;

                  case 'SSSS':
                    return parseTokenDigits;

                  case 'MM':
                  case 'DD':
                  case 'YY':
                  case 'GG':
                  case 'gg':
                  case 'HH':
                  case 'hh':
                  case 'mm':
                  case 'ss':
                  case 'ww':
                  case 'WW':
                    return strict ? parseTokenTwoDigits : parseTokenOneOrTwoDigits;

                  case 'M':
                  case 'D':
                  case 'd':
                  case 'H':
                  case 'h':
                  case 'm':
                  case 's':
                  case 'w':
                  case 'W':
                  case 'e':
                  case 'E':
                    return parseTokenOneOrTwoDigits;

                  case 'Do':
                    return parseTokenOrdinal;

                  default:
                    a = new RegExp(regexpEscape(unescapeFormat(token.replace('\\', '')), 'i'));
                    return a;
                }
            }
            function timezoneMinutesFromString(string) {
                string = string || '';
                var possibleTzMatches = string.match(parseTokenTimezone) || [], tzChunk = possibleTzMatches[possibleTzMatches.length - 1] || [], parts = (tzChunk + '').match(parseTimezoneChunker) || [ '-', 0, 0 ], minutes = +(parts[1] * 60) + toInt(parts[2]);
                return parts[0] === '+' ? -minutes : minutes;
            }
            function addTimeToArrayFromToken(token, input, config) {
                var a, datePartArray = config._a;
                switch (token) {
                  case 'Q':
                    if (input != null) {
                        datePartArray[MONTH] = (toInt(input) - 1) * 3;
                    }
                    break;

                  case 'M':
                  case 'MM':
                    if (input != null) {
                        datePartArray[MONTH] = toInt(input) - 1;
                    }
                    break;

                  case 'MMM':
                  case 'MMMM':
                    a = config._locale.monthsParse(input);
                    if (a != null) {
                        datePartArray[MONTH] = a;
                    } else {
                        config._pf.invalidMonth = input;
                    }
                    break;

                  case 'D':
                  case 'DD':
                    if (input != null) {
                        datePartArray[DATE] = toInt(input);
                    }
                    break;

                  case 'Do':
                    if (input != null) {
                        datePartArray[DATE] = toInt(parseInt(input, 10));
                    }
                    break;

                  case 'DDD':
                  case 'DDDD':
                    if (input != null) {
                        config._dayOfYear = toInt(input);
                    }
                    break;

                  case 'YY':
                    datePartArray[YEAR] = moment.parseTwoDigitYear(input);
                    break;

                  case 'YYYY':
                  case 'YYYYY':
                  case 'YYYYYY':
                    datePartArray[YEAR] = toInt(input);
                    break;

                  case 'a':
                  case 'A':
                    config._isPm = config._locale.isPM(input);
                    break;

                  case 'H':
                  case 'HH':
                  case 'h':
                  case 'hh':
                    datePartArray[HOUR] = toInt(input);
                    break;

                  case 'm':
                  case 'mm':
                    datePartArray[MINUTE] = toInt(input);
                    break;

                  case 's':
                  case 'ss':
                    datePartArray[SECOND] = toInt(input);
                    break;

                  case 'S':
                  case 'SS':
                  case 'SSS':
                  case 'SSSS':
                    datePartArray[MILLISECOND] = toInt(('0.' + input) * 1e3);
                    break;

                  case 'X':
                    config._d = new Date(parseFloat(input) * 1e3);
                    break;

                  case 'Z':
                  case 'ZZ':
                    config._useUTC = true;
                    config._tzm = timezoneMinutesFromString(input);
                    break;

                  case 'dd':
                  case 'ddd':
                  case 'dddd':
                    a = config._locale.weekdaysParse(input);
                    if (a != null) {
                        config._w = config._w || {};
                        config._w['d'] = a;
                    } else {
                        config._pf.invalidWeekday = input;
                    }
                    break;

                  case 'w':
                  case 'ww':
                  case 'W':
                  case 'WW':
                  case 'd':
                  case 'e':
                  case 'E':
                    token = token.substr(0, 1);

                  case 'gggg':
                  case 'GGGG':
                  case 'GGGGG':
                    token = token.substr(0, 2);
                    if (input) {
                        config._w = config._w || {};
                        config._w[token] = toInt(input);
                    }
                    break;

                  case 'gg':
                  case 'GG':
                    config._w = config._w || {};
                    config._w[token] = moment.parseTwoDigitYear(input);
                }
            }
            function dayOfYearFromWeekInfo(config) {
                var w, weekYear, week, weekday, dow, doy, temp;
                w = config._w;
                if (w.GG != null || w.W != null || w.E != null) {
                    dow = 1;
                    doy = 4;
                    weekYear = dfl(w.GG, config._a[YEAR], weekOfYear(moment(), 1, 4).year);
                    week = dfl(w.W, 1);
                    weekday = dfl(w.E, 1);
                } else {
                    dow = config._locale._week.dow;
                    doy = config._locale._week.doy;
                    weekYear = dfl(w.gg, config._a[YEAR], weekOfYear(moment(), dow, doy).year);
                    week = dfl(w.w, 1);
                    if (w.d != null) {
                        weekday = w.d;
                        if (weekday < dow) {
                            ++week;
                        }
                    } else if (w.e != null) {
                        weekday = w.e + dow;
                    } else {
                        weekday = dow;
                    }
                }
                temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);
                config._a[YEAR] = temp.year;
                config._dayOfYear = temp.dayOfYear;
            }
            function dateFromConfig(config) {
                var i, date, input = [], currentDate, yearToUse;
                if (config._d) {
                    return;
                }
                currentDate = currentDateArray(config);
                if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
                    dayOfYearFromWeekInfo(config);
                }
                if (config._dayOfYear) {
                    yearToUse = dfl(config._a[YEAR], currentDate[YEAR]);
                    if (config._dayOfYear > daysInYear(yearToUse)) {
                        config._pf._overflowDayOfYear = true;
                    }
                    date = makeUTCDate(yearToUse, 0, config._dayOfYear);
                    config._a[MONTH] = date.getUTCMonth();
                    config._a[DATE] = date.getUTCDate();
                }
                for (i = 0; i < 3 && config._a[i] == null; ++i) {
                    config._a[i] = input[i] = currentDate[i];
                }
                for (;i < 7; i++) {
                    config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
                }
                config._d = (config._useUTC ? makeUTCDate : makeDate).apply(null, input);
                if (config._tzm != null) {
                    config._d.setUTCMinutes(config._d.getUTCMinutes() + config._tzm);
                }
            }
            function dateFromObject(config) {
                var normalizedInput;
                if (config._d) {
                    return;
                }
                normalizedInput = normalizeObjectUnits(config._i);
                config._a = [ normalizedInput.year, normalizedInput.month, normalizedInput.day, normalizedInput.hour, normalizedInput.minute, normalizedInput.second, normalizedInput.millisecond ];
                dateFromConfig(config);
            }
            function currentDateArray(config) {
                var now = new Date();
                if (config._useUTC) {
                    return [ now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate() ];
                } else {
                    return [ now.getFullYear(), now.getMonth(), now.getDate() ];
                }
            }
            function makeDateFromStringAndFormat(config) {
                if (config._f === moment.ISO_8601) {
                    parseISO(config);
                    return;
                }
                config._a = [];
                config._pf.empty = true;
                var string = '' + config._i, i, parsedInput, tokens, token, skipped, stringLength = string.length, totalParsedInputLength = 0;
                tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
                for (i = 0; i < tokens.length; i++) {
                    token = tokens[i];
                    parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
                    if (parsedInput) {
                        skipped = string.substr(0, string.indexOf(parsedInput));
                        if (skipped.length > 0) {
                            config._pf.unusedInput.push(skipped);
                        }
                        string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                        totalParsedInputLength += parsedInput.length;
                    }
                    if (formatTokenFunctions[token]) {
                        if (parsedInput) {
                            config._pf.empty = false;
                        } else {
                            config._pf.unusedTokens.push(token);
                        }
                        addTimeToArrayFromToken(token, parsedInput, config);
                    } else if (config._strict && !parsedInput) {
                        config._pf.unusedTokens.push(token);
                    }
                }
                config._pf.charsLeftOver = stringLength - totalParsedInputLength;
                if (string.length > 0) {
                    config._pf.unusedInput.push(string);
                }
                if (config._isPm && config._a[HOUR] < 12) {
                    config._a[HOUR] += 12;
                }
                if (config._isPm === false && config._a[HOUR] === 12) {
                    config._a[HOUR] = 0;
                }
                dateFromConfig(config);
                checkOverflow(config);
            }
            function unescapeFormat(s) {
                return s.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p2, p3, p4) {
                    return p1 || p2 || p3 || p4;
                });
            }
            function regexpEscape(s) {
                return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
            }
            function makeDateFromStringAndArray(config) {
                var tempConfig, bestMoment, scoreToBeat, i, currentScore;
                if (config._f.length === 0) {
                    config._pf.invalidFormat = true;
                    config._d = new Date(NaN);
                    return;
                }
                for (i = 0; i < config._f.length; i++) {
                    currentScore = 0;
                    tempConfig = copyConfig({}, config);
                    if (config._useUTC != null) {
                        tempConfig._useUTC = config._useUTC;
                    }
                    tempConfig._pf = defaultParsingFlags();
                    tempConfig._f = config._f[i];
                    makeDateFromStringAndFormat(tempConfig);
                    if (!_isValid(tempConfig)) {
                        continue;
                    }
                    currentScore += tempConfig._pf.charsLeftOver;
                    currentScore += tempConfig._pf.unusedTokens.length * 10;
                    tempConfig._pf.score = currentScore;
                    if (scoreToBeat == null || currentScore < scoreToBeat) {
                        scoreToBeat = currentScore;
                        bestMoment = tempConfig;
                    }
                }
                extend(config, bestMoment || tempConfig);
            }
            function parseISO(config) {
                var i, l, string = config._i, match = isoRegex.exec(string);
                if (match) {
                    config._pf.iso = true;
                    for (i = 0, l = isoDates.length; i < l; i++) {
                        if (isoDates[i][1].exec(string)) {
                            config._f = isoDates[i][0] + (match[6] || ' ');
                            break;
                        }
                    }
                    for (i = 0, l = isoTimes.length; i < l; i++) {
                        if (isoTimes[i][1].exec(string)) {
                            config._f += isoTimes[i][0];
                            break;
                        }
                    }
                    if (string.match(parseTokenTimezone)) {
                        config._f += 'Z';
                    }
                    makeDateFromStringAndFormat(config);
                } else {
                    config._isValid = false;
                }
            }
            function makeDateFromString(config) {
                parseISO(config);
                if (config._isValid === false) {
                    delete config._isValid;
                    moment.createFromInputFallback(config);
                }
            }
            function map(arr, fn) {
                var res = [], i;
                for (i = 0; i < arr.length; ++i) {
                    res.push(fn(arr[i], i));
                }
                return res;
            }
            function makeDateFromInput(config) {
                var input = config._i, matched;
                if (input === undefined) {
                    config._d = new Date();
                } else if (isDate(input)) {
                    config._d = new Date(+input);
                } else if ((matched = aspNetJsonRegex.exec(input)) !== null) {
                    config._d = new Date(+matched[1]);
                } else if (typeof input === 'string') {
                    makeDateFromString(config);
                } else if (isArray(input)) {
                    config._a = map(input.slice(0), function(obj) {
                        return parseInt(obj, 10);
                    });
                    dateFromConfig(config);
                } else if ((typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object') {
                    dateFromObject(config);
                } else if (typeof input === 'number') {
                    config._d = new Date(input);
                } else {
                    moment.createFromInputFallback(config);
                }
            }
            function makeDate(y, m, d, h, M, s, ms) {
                var date = new Date(y, m, d, h, M, s, ms);
                if (y < 1970) {
                    date.setFullYear(y);
                }
                return date;
            }
            function makeUTCDate(y) {
                var date = new Date(Date.UTC.apply(null, arguments));
                if (y < 1970) {
                    date.setUTCFullYear(y);
                }
                return date;
            }
            function parseWeekday(input, locale) {
                if (typeof input === 'string') {
                    if (!isNaN(input)) {
                        input = parseInt(input, 10);
                    } else {
                        input = locale.weekdaysParse(input);
                        if (typeof input !== 'number') {
                            return null;
                        }
                    }
                }
                return input;
            }
            function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
                return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
            }
            function relativeTime(posNegDuration, withoutSuffix, locale) {
                var duration = moment.duration(posNegDuration).abs(), seconds = round(duration.as('s')), minutes = round(duration.as('m')), hours = round(duration.as('h')), days = round(duration.as('d')), months = round(duration.as('M')), years = round(duration.as('y')), args = seconds < relativeTimeThresholds.s && [ 's', seconds ] || minutes === 1 && [ 'm' ] || minutes < relativeTimeThresholds.m && [ 'mm', minutes ] || hours === 1 && [ 'h' ] || hours < relativeTimeThresholds.h && [ 'hh', hours ] || days === 1 && [ 'd' ] || days < relativeTimeThresholds.d && [ 'dd', days ] || months === 1 && [ 'M' ] || months < relativeTimeThresholds.M && [ 'MM', months ] || years === 1 && [ 'y' ] || [ 'yy', years ];
                args[2] = withoutSuffix;
                args[3] = +posNegDuration > 0;
                args[4] = locale;
                return substituteTimeAgo.apply({}, args);
            }
            function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
                var end = firstDayOfWeekOfYear - firstDayOfWeek, daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(), adjustedMoment;
                if (daysToDayOfWeek > end) {
                    daysToDayOfWeek -= 7;
                }
                if (daysToDayOfWeek < end - 7) {
                    daysToDayOfWeek += 7;
                }
                adjustedMoment = moment(mom).add(daysToDayOfWeek, 'd');
                return {
                    week: Math.ceil(adjustedMoment.dayOfYear() / 7),
                    year: adjustedMoment.year()
                };
            }
            function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
                var d = makeUTCDate(year, 0, 1).getUTCDay(), daysToAdd, dayOfYear;
                d = d === 0 ? 7 : d;
                weekday = weekday != null ? weekday : firstDayOfWeek;
                daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0) - (d < firstDayOfWeek ? 7 : 0);
                dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1;
                return {
                    year: dayOfYear > 0 ? year : year - 1,
                    dayOfYear: dayOfYear > 0 ? dayOfYear : daysInYear(year - 1) + dayOfYear
                };
            }
            function makeMoment(config) {
                var input = config._i, format = config._f;
                config._locale = config._locale || moment.localeData(config._l);
                if (input === null || format === undefined && input === '') {
                    return moment.invalid({
                        nullInput: true
                    });
                }
                if (typeof input === 'string') {
                    config._i = input = config._locale.preparse(input);
                }
                if (moment.isMoment(input)) {
                    return new Moment(input, true);
                } else if (format) {
                    if (isArray(format)) {
                        makeDateFromStringAndArray(config);
                    } else {
                        makeDateFromStringAndFormat(config);
                    }
                } else {
                    makeDateFromInput(config);
                }
                return new Moment(config);
            }
            moment = function moment(input, format, locale, strict) {
                var c;
                if (typeof locale === 'boolean') {
                    strict = locale;
                    locale = undefined;
                }
                c = {};
                c._isAMomentObject = true;
                c._i = input;
                c._f = format;
                c._l = locale;
                c._strict = strict;
                c._isUTC = false;
                c._pf = defaultParsingFlags();
                return makeMoment(c);
            };
            moment.suppressDeprecationWarnings = false;
            moment.createFromInputFallback = deprecate('moment construction falls back to js Date. This is ' + 'discouraged and will be removed in upcoming major ' + 'release. Please refer to ' + 'https://github.com/moment/moment/issues/1407 for more info.', function(config) {
                config._d = new Date(config._i);
            });
            function pickBy(fn, moments) {
                var res, i;
                if (moments.length === 1 && isArray(moments[0])) {
                    moments = moments[0];
                }
                if (!moments.length) {
                    return moment();
                }
                res = moments[0];
                for (i = 1; i < moments.length; ++i) {
                    if (moments[i][fn](res)) {
                        res = moments[i];
                    }
                }
                return res;
            }
            moment.min = function() {
                var args = [].slice.call(arguments, 0);
                return pickBy('isBefore', args);
            };
            moment.max = function() {
                var args = [].slice.call(arguments, 0);
                return pickBy('isAfter', args);
            };
            moment.utc = function(input, format, locale, strict) {
                var c;
                if (typeof locale === 'boolean') {
                    strict = locale;
                    locale = undefined;
                }
                c = {};
                c._isAMomentObject = true;
                c._useUTC = true;
                c._isUTC = true;
                c._l = locale;
                c._i = input;
                c._f = format;
                c._strict = strict;
                c._pf = defaultParsingFlags();
                return makeMoment(c).utc();
            };
            moment.unix = function(input) {
                return moment(input * 1e3);
            };
            moment.duration = function(input, key) {
                var duration = input, match = null, sign, ret, parseIso, diffRes;
                if (moment.isDuration(input)) {
                    duration = {
                        ms: input._milliseconds,
                        d: input._days,
                        M: input._months
                    };
                } else if (typeof input === 'number') {
                    duration = {};
                    if (key) {
                        duration[key] = input;
                    } else {
                        duration.milliseconds = input;
                    }
                } else if (!!(match = aspNetTimeSpanJsonRegex.exec(input))) {
                    sign = match[1] === '-' ? -1 : 1;
                    duration = {
                        y: 0,
                        d: toInt(match[DATE]) * sign,
                        h: toInt(match[HOUR]) * sign,
                        m: toInt(match[MINUTE]) * sign,
                        s: toInt(match[SECOND]) * sign,
                        ms: toInt(match[MILLISECOND]) * sign
                    };
                } else if (!!(match = isoDurationRegex.exec(input))) {
                    sign = match[1] === '-' ? -1 : 1;
                    parseIso = function parseIso(inp) {
                        var res = inp && parseFloat(inp.replace(',', '.'));
                        return (isNaN(res) ? 0 : res) * sign;
                    };
                    duration = {
                        y: parseIso(match[2]),
                        M: parseIso(match[3]),
                        d: parseIso(match[4]),
                        h: parseIso(match[5]),
                        m: parseIso(match[6]),
                        s: parseIso(match[7]),
                        w: parseIso(match[8])
                    };
                } else if ((typeof duration === 'undefined' ? 'undefined' : _typeof(duration)) === 'object' && ('from' in duration || 'to' in duration)) {
                    diffRes = momentsDifference(moment(duration.from), moment(duration.to));
                    duration = {};
                    duration.ms = diffRes.milliseconds;
                    duration.M = diffRes.months;
                }
                ret = new Duration(duration);
                if (moment.isDuration(input) && hasOwnProp(input, '_locale')) {
                    ret._locale = input._locale;
                }
                return ret;
            };
            moment.version = VERSION;
            moment.defaultFormat = isoFormat;
            moment.ISO_8601 = function() {};
            moment.momentProperties = momentProperties;
            moment.updateOffset = function() {};
            moment.relativeTimeThreshold = function(threshold, limit) {
                if (relativeTimeThresholds[threshold] === undefined) {
                    return false;
                }
                if (limit === undefined) {
                    return relativeTimeThresholds[threshold];
                }
                relativeTimeThresholds[threshold] = limit;
                return true;
            };
            moment.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', function(key, value) {
                return moment.locale(key, value);
            });
            moment.locale = function(key, values) {
                var data;
                if (key) {
                    if (typeof values !== 'undefined') {
                        data = moment.defineLocale(key, values);
                    } else {
                        data = moment.localeData(key);
                    }
                    if (data) {
                        moment.duration._locale = moment._locale = data;
                    }
                }
                return moment._locale._abbr;
            };
            moment.defineLocale = function(name, values) {
                if (values !== null) {
                    values.abbr = name;
                    if (!locales[name]) {
                        locales[name] = new Locale();
                    }
                    locales[name].set(values);
                    moment.locale(name);
                    return locales[name];
                } else {
                    delete locales[name];
                    return null;
                }
            };
            moment.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', function(key) {
                return moment.localeData(key);
            });
            moment.localeData = function(key) {
                var locale;
                if (key && key._locale && key._locale._abbr) {
                    key = key._locale._abbr;
                }
                if (!key) {
                    return moment._locale;
                }
                if (!isArray(key)) {
                    locale = loadLocale(key);
                    if (locale) {
                        return locale;
                    }
                    key = [ key ];
                }
                return chooseLocale(key);
            };
            moment.isMoment = function(obj) {
                return obj instanceof Moment || obj != null && hasOwnProp(obj, '_isAMomentObject');
            };
            moment.isDuration = function(obj) {
                return obj instanceof Duration;
            };
            for (i = lists.length - 1; i >= 0; --i) {
                makeList(lists[i]);
            }
            moment.normalizeUnits = function(units) {
                return normalizeUnits(units);
            };
            moment.invalid = function(flags) {
                var m = moment.utc(NaN);
                if (flags != null) {
                    extend(m._pf, flags);
                } else {
                    m._pf.userInvalidated = true;
                }
                return m;
            };
            moment.parseZone = function() {
                return moment.apply(null, arguments).parseZone();
            };
            moment.parseTwoDigitYear = function(input) {
                return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
            };
            extend(moment.fn = Moment.prototype, {
                clone: function clone() {
                    return moment(this);
                },
                valueOf: function valueOf() {
                    return +this._d + (this._offset || 0) * 6e4;
                },
                unix: function unix() {
                    return Math.floor(+this / 1e3);
                },
                toString: function toString() {
                    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
                },
                toDate: function toDate() {
                    return this._offset ? new Date(+this) : this._d;
                },
                toISOString: function toISOString() {
                    var m = moment(this).utc();
                    if (0 < m.year() && m.year() <= 9999) {
                        return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
                    } else {
                        return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
                    }
                },
                toArray: function toArray() {
                    var m = this;
                    return [ m.year(), m.month(), m.date(), m.hours(), m.minutes(), m.seconds(), m.milliseconds() ];
                },
                isValid: function isValid() {
                    return _isValid(this);
                },
                isDSTShifted: function isDSTShifted() {
                    if (this._a) {
                        return this.isValid() && compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray()) > 0;
                    }
                    return false;
                },
                parsingFlags: function parsingFlags() {
                    return extend({}, this._pf);
                },
                invalidAt: function invalidAt() {
                    return this._pf.overflow;
                },
                utc: function utc(keepLocalTime) {
                    return this.zone(0, keepLocalTime);
                },
                local: function local(keepLocalTime) {
                    if (this._isUTC) {
                        this.zone(0, keepLocalTime);
                        this._isUTC = false;
                        if (keepLocalTime) {
                            this.add(this._dateTzOffset(), 'm');
                        }
                    }
                    return this;
                },
                format: function format(inputString) {
                    var output = formatMoment(this, inputString || moment.defaultFormat);
                    return this.localeData().postformat(output);
                },
                add: createAdder(1, 'add'),
                subtract: createAdder(-1, 'subtract'),
                diff: function diff(input, units, asFloat) {
                    var that = makeAs(input, this), zoneDiff = (this.zone() - that.zone()) * 6e4, diff, output, daysAdjust;
                    units = normalizeUnits(units);
                    if (units === 'year' || units === 'month') {
                        diff = (this.daysInMonth() + that.daysInMonth()) * 432e5;
                        output = (this.year() - that.year()) * 12 + (this.month() - that.month());
                        daysAdjust = this - moment(this).startOf('month') - (that - moment(that).startOf('month'));
                        daysAdjust -= (this.zone() - moment(this).startOf('month').zone() - (that.zone() - moment(that).startOf('month').zone())) * 6e4;
                        output += daysAdjust / diff;
                        if (units === 'year') {
                            output = output / 12;
                        }
                    } else {
                        diff = this - that;
                        output = units === 'second' ? diff / 1e3 : units === 'minute' ? diff / 6e4 : units === 'hour' ? diff / 36e5 : units === 'day' ? (diff - zoneDiff) / 864e5 : units === 'week' ? (diff - zoneDiff) / 6048e5 : diff;
                    }
                    return asFloat ? output : absRound(output);
                },
                from: function from(time, withoutSuffix) {
                    return moment.duration({
                        to: this,
                        from: time
                    }).locale(this.locale()).humanize(!withoutSuffix);
                },
                fromNow: function fromNow(withoutSuffix) {
                    return this.from(moment(), withoutSuffix);
                },
                calendar: function calendar(time) {
                    var now = time || moment(), sod = makeAs(now, this).startOf('day'), diff = this.diff(sod, 'days', true), format = diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
                    return this.format(this.localeData().calendar(format, this));
                },
                isLeapYear: function isLeapYear() {
                    return _isLeapYear(this.year());
                },
                isDST: function isDST() {
                    return this.zone() < this.clone().month(0).zone() || this.zone() < this.clone().month(5).zone();
                },
                day: function day(input) {
                    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
                    if (input != null) {
                        input = parseWeekday(input, this.localeData());
                        return this.add(input - day, 'd');
                    } else {
                        return day;
                    }
                },
                month: makeAccessor('Month', true),
                startOf: function startOf(units) {
                    units = normalizeUnits(units);
                    switch (units) {
                      case 'year':
                        this.month(0);

                      case 'quarter':
                      case 'month':
                        this.date(1);

                      case 'week':
                      case 'isoWeek':
                      case 'day':
                        this.hours(0);

                      case 'hour':
                        this.minutes(0);

                      case 'minute':
                        this.seconds(0);

                      case 'second':
                        this.milliseconds(0);
                    }
                    if (units === 'week') {
                        this.weekday(0);
                    } else if (units === 'isoWeek') {
                        this.isoWeekday(1);
                    }
                    if (units === 'quarter') {
                        this.month(Math.floor(this.month() / 3) * 3);
                    }
                    return this;
                },
                endOf: function endOf(units) {
                    units = normalizeUnits(units);
                    return this.startOf(units).add(1, units === 'isoWeek' ? 'week' : units).subtract(1, 'ms');
                },
                isAfter: function isAfter(input, units) {
                    units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
                    if (units === 'millisecond') {
                        input = moment.isMoment(input) ? input : moment(input);
                        return +this > +input;
                    } else {
                        return +this.clone().startOf(units) > +moment(input).startOf(units);
                    }
                },
                isBefore: function isBefore(input, units) {
                    units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
                    if (units === 'millisecond') {
                        input = moment.isMoment(input) ? input : moment(input);
                        return +this < +input;
                    } else {
                        return +this.clone().startOf(units) < +moment(input).startOf(units);
                    }
                },
                isSame: function isSame(input, units) {
                    units = normalizeUnits(units || 'millisecond');
                    if (units === 'millisecond') {
                        input = moment.isMoment(input) ? input : moment(input);
                        return +this === +input;
                    } else {
                        return +this.clone().startOf(units) === +makeAs(input, this).startOf(units);
                    }
                },
                min: deprecate('moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548', function(other) {
                    other = moment.apply(null, arguments);
                    return other < this ? this : other;
                }),
                max: deprecate('moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548', function(other) {
                    other = moment.apply(null, arguments);
                    return other > this ? this : other;
                }),
                zone: function zone(input, keepLocalTime) {
                    var offset = this._offset || 0, localAdjust;
                    if (input != null) {
                        if (typeof input === 'string') {
                            input = timezoneMinutesFromString(input);
                        }
                        if (Math.abs(input) < 16) {
                            input = input * 60;
                        }
                        if (!this._isUTC && keepLocalTime) {
                            localAdjust = this._dateTzOffset();
                        }
                        this._offset = input;
                        this._isUTC = true;
                        if (localAdjust != null) {
                            this.subtract(localAdjust, 'm');
                        }
                        if (offset !== input) {
                            if (!keepLocalTime || this._changeInProgress) {
                                addOrSubtractDurationFromMoment(this, moment.duration(offset - input, 'm'), 1, false);
                            } else if (!this._changeInProgress) {
                                this._changeInProgress = true;
                                moment.updateOffset(this, true);
                                this._changeInProgress = null;
                            }
                        }
                    } else {
                        return this._isUTC ? offset : this._dateTzOffset();
                    }
                    return this;
                },
                zoneAbbr: function zoneAbbr() {
                    return this._isUTC ? 'UTC' : '';
                },
                zoneName: function zoneName() {
                    return this._isUTC ? 'Coordinated Universal Time' : '';
                },
                parseZone: function parseZone() {
                    if (this._tzm) {
                        this.zone(this._tzm);
                    } else if (typeof this._i === 'string') {
                        this.zone(this._i);
                    }
                    return this;
                },
                hasAlignedHourOffset: function hasAlignedHourOffset(input) {
                    if (!input) {
                        input = 0;
                    } else {
                        input = moment(input).zone();
                    }
                    return (this.zone() - input) % 60 === 0;
                },
                daysInMonth: function daysInMonth() {
                    return _daysInMonth(this.year(), this.month());
                },
                dayOfYear: function dayOfYear(input) {
                    var dayOfYear = round((moment(this).startOf('day') - moment(this).startOf('year')) / 864e5) + 1;
                    return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
                },
                quarter: function quarter(input) {
                    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
                },
                weekYear: function weekYear(input) {
                    var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
                    return input == null ? year : this.add(input - year, 'y');
                },
                isoWeekYear: function isoWeekYear(input) {
                    var year = weekOfYear(this, 1, 4).year;
                    return input == null ? year : this.add(input - year, 'y');
                },
                week: function week(input) {
                    var week = this.localeData().week(this);
                    return input == null ? week : this.add((input - week) * 7, 'd');
                },
                isoWeek: function isoWeek(input) {
                    var week = weekOfYear(this, 1, 4).week;
                    return input == null ? week : this.add((input - week) * 7, 'd');
                },
                weekday: function weekday(input) {
                    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
                    return input == null ? weekday : this.add(input - weekday, 'd');
                },
                isoWeekday: function isoWeekday(input) {
                    return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
                },
                isoWeeksInYear: function isoWeeksInYear() {
                    return _weeksInYear(this.year(), 1, 4);
                },
                weeksInYear: function weeksInYear() {
                    var weekInfo = this.localeData()._week;
                    return _weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
                },
                get: function get(units) {
                    units = normalizeUnits(units);
                    return this[units]();
                },
                set: function set(units, value) {
                    units = normalizeUnits(units);
                    if (typeof this[units] === 'function') {
                        this[units](value);
                    }
                    return this;
                },
                locale: function locale(key) {
                    var newLocaleData;
                    if (key === undefined) {
                        return this._locale._abbr;
                    } else {
                        newLocaleData = moment.localeData(key);
                        if (newLocaleData != null) {
                            this._locale = newLocaleData;
                        }
                        return this;
                    }
                },
                lang: deprecate('moment().lang() is deprecated. Use moment().localeData() instead.', function(key) {
                    if (key === undefined) {
                        return this.localeData();
                    } else {
                        return this.locale(key);
                    }
                }),
                localeData: function localeData() {
                    return this._locale;
                },
                _dateTzOffset: function _dateTzOffset() {
                    return Math.round(this._d.getTimezoneOffset() / 15) * 15;
                }
            });
            function rawMonthSetter(mom, value) {
                var dayOfMonth;
                if (typeof value === 'string') {
                    value = mom.localeData().monthsParse(value);
                    if (typeof value !== 'number') {
                        return mom;
                    }
                }
                dayOfMonth = Math.min(mom.date(), _daysInMonth(mom.year(), value));
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
                return mom;
            }
            function rawGetter(mom, unit) {
                return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
            }
            function rawSetter(mom, unit, value) {
                if (unit === 'Month') {
                    return rawMonthSetter(mom, value);
                } else {
                    return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
                }
            }
            function makeAccessor(unit, keepTime) {
                return function(value) {
                    if (value != null) {
                        rawSetter(this, unit, value);
                        moment.updateOffset(this, keepTime);
                        return this;
                    } else {
                        return rawGetter(this, unit);
                    }
                };
            }
            moment.fn.millisecond = moment.fn.milliseconds = makeAccessor('Milliseconds', false);
            moment.fn.second = moment.fn.seconds = makeAccessor('Seconds', false);
            moment.fn.minute = moment.fn.minutes = makeAccessor('Minutes', false);
            moment.fn.hour = moment.fn.hours = makeAccessor('Hours', true);
            moment.fn.date = makeAccessor('Date', true);
            moment.fn.dates = deprecate('dates accessor is deprecated. Use date instead.', makeAccessor('Date', true));
            moment.fn.year = makeAccessor('FullYear', true);
            moment.fn.years = deprecate('years accessor is deprecated. Use year instead.', makeAccessor('FullYear', true));
            moment.fn.days = moment.fn.day;
            moment.fn.months = moment.fn.month;
            moment.fn.weeks = moment.fn.week;
            moment.fn.isoWeeks = moment.fn.isoWeek;
            moment.fn.quarters = moment.fn.quarter;
            moment.fn.toJSON = moment.fn.toISOString;
            function daysToYears(days) {
                return days * 400 / 146097;
            }
            function yearsToDays(years) {
                return years * 146097 / 400;
            }
            extend(moment.duration.fn = Duration.prototype, {
                _bubble: function _bubble() {
                    var milliseconds = this._milliseconds, days = this._days, months = this._months, data = this._data, seconds, minutes, hours, years = 0;
                    data.milliseconds = milliseconds % 1e3;
                    seconds = absRound(milliseconds / 1e3);
                    data.seconds = seconds % 60;
                    minutes = absRound(seconds / 60);
                    data.minutes = minutes % 60;
                    hours = absRound(minutes / 60);
                    data.hours = hours % 24;
                    days += absRound(hours / 24);
                    years = absRound(daysToYears(days));
                    days -= absRound(yearsToDays(years));
                    months += absRound(days / 30);
                    days %= 30;
                    years += absRound(months / 12);
                    months %= 12;
                    data.days = days;
                    data.months = months;
                    data.years = years;
                },
                abs: function abs() {
                    this._milliseconds = Math.abs(this._milliseconds);
                    this._days = Math.abs(this._days);
                    this._months = Math.abs(this._months);
                    this._data.milliseconds = Math.abs(this._data.milliseconds);
                    this._data.seconds = Math.abs(this._data.seconds);
                    this._data.minutes = Math.abs(this._data.minutes);
                    this._data.hours = Math.abs(this._data.hours);
                    this._data.months = Math.abs(this._data.months);
                    this._data.years = Math.abs(this._data.years);
                    return this;
                },
                weeks: function weeks() {
                    return absRound(this.days() / 7);
                },
                valueOf: function valueOf() {
                    return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
                },
                humanize: function humanize(withSuffix) {
                    var output = relativeTime(this, !withSuffix, this.localeData());
                    if (withSuffix) {
                        output = this.localeData().pastFuture(+this, output);
                    }
                    return this.localeData().postformat(output);
                },
                add: function add(input, val) {
                    var dur = moment.duration(input, val);
                    this._milliseconds += dur._milliseconds;
                    this._days += dur._days;
                    this._months += dur._months;
                    this._bubble();
                    return this;
                },
                subtract: function subtract(input, val) {
                    var dur = moment.duration(input, val);
                    this._milliseconds -= dur._milliseconds;
                    this._days -= dur._days;
                    this._months -= dur._months;
                    this._bubble();
                    return this;
                },
                get: function get(units) {
                    units = normalizeUnits(units);
                    return this[units.toLowerCase() + 's']();
                },
                as: function as(units) {
                    var days, months;
                    units = normalizeUnits(units);
                    if (units === 'month' || units === 'year') {
                        days = this._days + this._milliseconds / 864e5;
                        months = this._months + daysToYears(days) * 12;
                        return units === 'month' ? months : months / 12;
                    } else {
                        days = this._days + yearsToDays(this._months / 12);
                        switch (units) {
                          case 'week':
                            return days / 7 + this._milliseconds / 6048e5;

                          case 'day':
                            return days + this._milliseconds / 864e5;

                          case 'hour':
                            return days * 24 + this._milliseconds / 36e5;

                          case 'minute':
                            return days * 24 * 60 + this._milliseconds / 6e4;

                          case 'second':
                            return days * 24 * 60 * 60 + this._milliseconds / 1e3;

                          case 'millisecond':
                            return Math.floor(days * 24 * 60 * 60 * 1e3) + this._milliseconds;

                          default:
                            throw new Error('Unknown unit ' + units);
                        }
                    }
                },
                lang: moment.fn.lang,
                locale: moment.fn.locale,
                toIsoString: deprecate('toIsoString() is deprecated. Please use toISOString() instead ' + '(notice the capitals)', function() {
                    return this.toISOString();
                }),
                toISOString: function toISOString() {
                    var years = Math.abs(this.years()), months = Math.abs(this.months()), days = Math.abs(this.days()), hours = Math.abs(this.hours()), minutes = Math.abs(this.minutes()), seconds = Math.abs(this.seconds() + this.milliseconds() / 1e3);
                    if (!this.asSeconds()) {
                        return 'P0D';
                    }
                    return (this.asSeconds() < 0 ? '-' : '') + 'P' + (years ? years + 'Y' : '') + (months ? months + 'M' : '') + (days ? days + 'D' : '') + (hours || minutes || seconds ? 'T' : '') + (hours ? hours + 'H' : '') + (minutes ? minutes + 'M' : '') + (seconds ? seconds + 'S' : '');
                },
                localeData: function localeData() {
                    return this._locale;
                }
            });
            moment.duration.fn.toString = moment.duration.fn.toISOString;
            function makeDurationGetter(name) {
                moment.duration.fn[name] = function() {
                    return this._data[name];
                };
            }
            for (i in unitMillisecondFactors) {
                if (hasOwnProp(unitMillisecondFactors, i)) {
                    makeDurationGetter(i.toLowerCase());
                }
            }
            moment.duration.fn.asMilliseconds = function() {
                return this.as('ms');
            };
            moment.duration.fn.asSeconds = function() {
                return this.as('s');
            };
            moment.duration.fn.asMinutes = function() {
                return this.as('m');
            };
            moment.duration.fn.asHours = function() {
                return this.as('h');
            };
            moment.duration.fn.asDays = function() {
                return this.as('d');
            };
            moment.duration.fn.asWeeks = function() {
                return this.as('weeks');
            };
            moment.duration.fn.asMonths = function() {
                return this.as('M');
            };
            moment.duration.fn.asYears = function() {
                return this.as('y');
            };
            moment.locale('en', {
                ordinal: function ordinal(number) {
                    var b = number % 10, output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
                    return number + output;
                }
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('af', {
                    months: 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),
                    monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
                    weekdays: 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),
                    weekdaysShort: 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
                    weekdaysMin: 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
                    meridiem: function meridiem(hours, minutes, isLower) {
                        if (hours < 12) {
                            return isLower ? 'vm' : 'VM';
                        } else {
                            return isLower ? 'nm' : 'NM';
                        }
                    },
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY LT',
                        LLLL: 'dddd, D MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[Vandag om] LT',
                        nextDay: '[Môre om] LT',
                        nextWeek: 'dddd [om] LT',
                        lastDay: '[Gister om] LT',
                        lastWeek: '[Laas] dddd [om] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'oor %s',
                        past: '%s gelede',
                        s: '\'n paar sekondes',
                        m: '\'n minuut',
                        mm: '%d minute',
                        h: '\'n uur',
                        hh: '%d ure',
                        d: '\'n dag',
                        dd: '%d dae',
                        M: '\'n maand',
                        MM: '%d maande',
                        y: '\'n jaar',
                        yy: '%d jaar'
                    },
                    ordinal: function ordinal(number) {
                        return number + (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de');
                    },
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('ar-ma', {
                    months: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
                    monthsShort: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
                    weekdays: 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
                    weekdaysShort: 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
                    weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY LT',
                        LLLL: 'dddd D MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[اليوم على الساعة] LT',
                        nextDay: '[غدا على الساعة] LT',
                        nextWeek: 'dddd [على الساعة] LT',
                        lastDay: '[أمس على الساعة] LT',
                        lastWeek: 'dddd [على الساعة] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'في %s',
                        past: 'منذ %s',
                        s: 'ثوان',
                        m: 'دقيقة',
                        mm: '%d دقائق',
                        h: 'ساعة',
                        hh: '%d ساعات',
                        d: 'يوم',
                        dd: '%d أيام',
                        M: 'شهر',
                        MM: '%d أشهر',
                        y: 'سنة',
                        yy: '%d سنوات'
                    },
                    week: {
                        dow: 6,
                        doy: 12
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                var symbolMap = {
                    '1': '١',
                    '2': '٢',
                    '3': '٣',
                    '4': '٤',
                    '5': '٥',
                    '6': '٦',
                    '7': '٧',
                    '8': '٨',
                    '9': '٩',
                    '0': '٠'
                }, numberMap = {
                    '١': '1',
                    '٢': '2',
                    '٣': '3',
                    '٤': '4',
                    '٥': '5',
                    '٦': '6',
                    '٧': '7',
                    '٨': '8',
                    '٩': '9',
                    '٠': '0'
                };
                return moment.defineLocale('ar-sa', {
                    months: 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
                    monthsShort: 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
                    weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
                    weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
                    weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY LT',
                        LLLL: 'dddd D MMMM YYYY LT'
                    },
                    meridiem: function meridiem(hour, minute, isLower) {
                        if (hour < 12) {
                            return 'ص';
                        } else {
                            return 'م';
                        }
                    },
                    calendar: {
                        sameDay: '[اليوم على الساعة] LT',
                        nextDay: '[غدا على الساعة] LT',
                        nextWeek: 'dddd [على الساعة] LT',
                        lastDay: '[أمس على الساعة] LT',
                        lastWeek: 'dddd [على الساعة] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'في %s',
                        past: 'منذ %s',
                        s: 'ثوان',
                        m: 'دقيقة',
                        mm: '%d دقائق',
                        h: 'ساعة',
                        hh: '%d ساعات',
                        d: 'يوم',
                        dd: '%d أيام',
                        M: 'شهر',
                        MM: '%d أشهر',
                        y: 'سنة',
                        yy: '%d سنوات'
                    },
                    preparse: function preparse(string) {
                        return string.replace(/[۰-۹]/g, function(match) {
                            return numberMap[match];
                        }).replace(/،/g, ',');
                    },
                    postformat: function postformat(string) {
                        return string.replace(/\d/g, function(match) {
                            return symbolMap[match];
                        }).replace(/,/g, '،');
                    },
                    week: {
                        dow: 6,
                        doy: 12
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                var symbolMap = {
                    '1': '١',
                    '2': '٢',
                    '3': '٣',
                    '4': '٤',
                    '5': '٥',
                    '6': '٦',
                    '7': '٧',
                    '8': '٨',
                    '9': '٩',
                    '0': '٠'
                }, numberMap = {
                    '١': '1',
                    '٢': '2',
                    '٣': '3',
                    '٤': '4',
                    '٥': '5',
                    '٦': '6',
                    '٧': '7',
                    '٨': '8',
                    '٩': '9',
                    '٠': '0'
                }, pluralForm = function pluralForm(n) {
                    return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
                }, plurals = {
                    s: [ 'أقل من ثانية', 'ثانية واحدة', [ 'ثانيتان', 'ثانيتين' ], '%d ثوان', '%d ثانية', '%d ثانية' ],
                    m: [ 'أقل من دقيقة', 'دقيقة واحدة', [ 'دقيقتان', 'دقيقتين' ], '%d دقائق', '%d دقيقة', '%d دقيقة' ],
                    h: [ 'أقل من ساعة', 'ساعة واحدة', [ 'ساعتان', 'ساعتين' ], '%d ساعات', '%d ساعة', '%d ساعة' ],
                    d: [ 'أقل من يوم', 'يوم واحد', [ 'يومان', 'يومين' ], '%d أيام', '%d يومًا', '%d يوم' ],
                    M: [ 'أقل من شهر', 'شهر واحد', [ 'شهران', 'شهرين' ], '%d أشهر', '%d شهرا', '%d شهر' ],
                    y: [ 'أقل من عام', 'عام واحد', [ 'عامان', 'عامين' ], '%d أعوام', '%d عامًا', '%d عام' ]
                }, pluralize = function pluralize(u) {
                    return function(number, withoutSuffix, string, isFuture) {
                        var f = pluralForm(number), str = plurals[u][pluralForm(number)];
                        if (f === 2) {
                            str = str[withoutSuffix ? 0 : 1];
                        }
                        return str.replace(/%d/i, number);
                    };
                }, months = [ 'كانون الثاني يناير', 'شباط فبراير', 'آذار مارس', 'نيسان أبريل', 'أيار مايو', 'حزيران يونيو', 'تموز يوليو', 'آب أغسطس', 'أيلول سبتمبر', 'تشرين الأول أكتوبر', 'تشرين الثاني نوفمبر', 'كانون الأول ديسمبر' ];
                return moment.defineLocale('ar', {
                    months: months,
                    monthsShort: months,
                    weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
                    weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
                    weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY LT',
                        LLLL: 'dddd D MMMM YYYY LT'
                    },
                    meridiem: function meridiem(hour, minute, isLower) {
                        if (hour < 12) {
                            return 'ص';
                        } else {
                            return 'م';
                        }
                    },
                    calendar: {
                        sameDay: '[اليوم عند الساعة] LT',
                        nextDay: '[غدًا عند الساعة] LT',
                        nextWeek: 'dddd [عند الساعة] LT',
                        lastDay: '[أمس عند الساعة] LT',
                        lastWeek: 'dddd [عند الساعة] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'بعد %s',
                        past: 'منذ %s',
                        s: pluralize('s'),
                        m: pluralize('m'),
                        mm: pluralize('m'),
                        h: pluralize('h'),
                        hh: pluralize('h'),
                        d: pluralize('d'),
                        dd: pluralize('d'),
                        M: pluralize('M'),
                        MM: pluralize('M'),
                        y: pluralize('y'),
                        yy: pluralize('y')
                    },
                    preparse: function preparse(string) {
                        return string.replace(/[۰-۹]/g, function(match) {
                            return numberMap[match];
                        }).replace(/،/g, ',');
                    },
                    postformat: function postformat(string) {
                        return string.replace(/\d/g, function(match) {
                            return symbolMap[match];
                        }).replace(/,/g, '،');
                    },
                    week: {
                        dow: 6,
                        doy: 12
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                var suffixes = {
                    1: '-inci',
                    5: '-inci',
                    8: '-inci',
                    70: '-inci',
                    80: '-inci',
                    2: '-nci',
                    7: '-nci',
                    20: '-nci',
                    50: '-nci',
                    3: '-üncü',
                    4: '-üncü',
                    100: '-üncü',
                    6: '-ncı',
                    9: '-uncu',
                    10: '-uncu',
                    30: '-uncu',
                    60: '-ıncı',
                    90: '-ıncı'
                };
                return moment.defineLocale('az', {
                    months: 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),
                    monthsShort: 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
                    weekdays: 'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split('_'),
                    weekdaysShort: 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
                    weekdaysMin: 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD.MM.YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY LT',
                        LLLL: 'dddd, D MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[bugün saat] LT',
                        nextDay: '[sabah saat] LT',
                        nextWeek: '[gələn həftə] dddd [saat] LT',
                        lastDay: '[dünən] LT',
                        lastWeek: '[keçən həftə] dddd [saat] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: '%s sonra',
                        past: '%s əvvəl',
                        s: 'birneçə saniyyə',
                        m: 'bir dəqiqə',
                        mm: '%d dəqiqə',
                        h: 'bir saat',
                        hh: '%d saat',
                        d: 'bir gün',
                        dd: '%d gün',
                        M: 'bir ay',
                        MM: '%d ay',
                        y: 'bir il',
                        yy: '%d il'
                    },
                    meridiem: function meridiem(hour, minute, isLower) {
                        if (hour < 4) {
                            return 'gecə';
                        } else if (hour < 12) {
                            return 'səhər';
                        } else if (hour < 17) {
                            return 'gündüz';
                        } else {
                            return 'axşam';
                        }
                    },
                    ordinal: function ordinal(number) {
                        if (number === 0) {
                            return number + '-ıncı';
                        }
                        var a = number % 10, b = number % 100 - a, c = number >= 100 ? 100 : null;
                        return number + (suffixes[a] || suffixes[b] || suffixes[c]);
                    },
                    week: {
                        dow: 1,
                        doy: 7
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                function plural(word, num) {
                    var forms = word.split('_');
                    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];
                }
                function relativeTimeWithPlural(number, withoutSuffix, key) {
                    var format = {
                        mm: withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
                        hh: withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
                        dd: 'дзень_дні_дзён',
                        MM: 'месяц_месяцы_месяцаў',
                        yy: 'год_гады_гадоў'
                    };
                    if (key === 'm') {
                        return withoutSuffix ? 'хвіліна' : 'хвіліну';
                    } else if (key === 'h') {
                        return withoutSuffix ? 'гадзіна' : 'гадзіну';
                    } else {
                        return number + ' ' + plural(format[key], +number);
                    }
                }
                function monthsCaseReplace(m, format) {
                    var months = {
                        nominative: 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_'),
                        accusative: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_')
                    }, nounCase = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(format) ? 'accusative' : 'nominative';
                    return months[nounCase][m.month()];
                }
                function weekdaysCaseReplace(m, format) {
                    var weekdays = {
                        nominative: 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),
                        accusative: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_')
                    }, nounCase = /\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/.test(format) ? 'accusative' : 'nominative';
                    return weekdays[nounCase][m.day()];
                }
                return moment.defineLocale('be', {
                    months: monthsCaseReplace,
                    monthsShort: 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
                    weekdays: weekdaysCaseReplace,
                    weekdaysShort: 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
                    weekdaysMin: 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD.MM.YYYY',
                        LL: 'D MMMM YYYY г.',
                        LLL: 'D MMMM YYYY г., LT',
                        LLLL: 'dddd, D MMMM YYYY г., LT'
                    },
                    calendar: {
                        sameDay: '[Сёння ў] LT',
                        nextDay: '[Заўтра ў] LT',
                        lastDay: '[Учора ў] LT',
                        nextWeek: function nextWeek() {
                            return '[У] dddd [ў] LT';
                        },
                        lastWeek: function lastWeek() {
                            switch (this.day()) {
                              case 0:
                              case 3:
                              case 5:
                              case 6:
                                return '[У мінулую] dddd [ў] LT';

                              case 1:
                              case 2:
                              case 4:
                                return '[У мінулы] dddd [ў] LT';
                            }
                        },
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'праз %s',
                        past: '%s таму',
                        s: 'некалькі секунд',
                        m: relativeTimeWithPlural,
                        mm: relativeTimeWithPlural,
                        h: relativeTimeWithPlural,
                        hh: relativeTimeWithPlural,
                        d: 'дзень',
                        dd: relativeTimeWithPlural,
                        M: 'месяц',
                        MM: relativeTimeWithPlural,
                        y: 'год',
                        yy: relativeTimeWithPlural
                    },
                    meridiem: function meridiem(hour, minute, isLower) {
                        if (hour < 4) {
                            return 'ночы';
                        } else if (hour < 12) {
                            return 'раніцы';
                        } else if (hour < 17) {
                            return 'дня';
                        } else {
                            return 'вечара';
                        }
                    },
                    ordinal: function ordinal(number, period) {
                        switch (period) {
                          case 'M':
                          case 'd':
                          case 'DDD':
                          case 'w':
                          case 'W':
                            return (number % 10 === 2 || number % 10 === 3) && number % 100 !== 12 && number % 100 !== 13 ? number + '-і' : number + '-ы';

                          case 'D':
                            return number + '-га';

                          default:
                            return number;
                        }
                    },
                    week: {
                        dow: 1,
                        doy: 7
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('bg', {
                    months: 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),
                    monthsShort: 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
                    weekdays: 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),
                    weekdaysShort: 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
                    weekdaysMin: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
                    longDateFormat: {
                        LT: 'H:mm',
                        L: 'D.MM.YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY LT',
                        LLLL: 'dddd, D MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[Днес в] LT',
                        nextDay: '[Утре в] LT',
                        nextWeek: 'dddd [в] LT',
                        lastDay: '[Вчера в] LT',
                        lastWeek: function lastWeek() {
                            switch (this.day()) {
                              case 0:
                              case 3:
                              case 6:
                                return '[В изминалата] dddd [в] LT';

                              case 1:
                              case 2:
                              case 4:
                              case 5:
                                return '[В изминалия] dddd [в] LT';
                            }
                        },
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'след %s',
                        past: 'преди %s',
                        s: 'няколко секунди',
                        m: 'минута',
                        mm: '%d минути',
                        h: 'час',
                        hh: '%d часа',
                        d: 'ден',
                        dd: '%d дни',
                        M: 'месец',
                        MM: '%d месеца',
                        y: 'година',
                        yy: '%d години'
                    },
                    ordinal: function ordinal(number) {
                        var lastDigit = number % 10, last2Digits = number % 100;
                        if (number === 0) {
                            return number + '-ев';
                        } else if (last2Digits === 0) {
                            return number + '-ен';
                        } else if (last2Digits > 10 && last2Digits < 20) {
                            return number + '-ти';
                        } else if (lastDigit === 1) {
                            return number + '-ви';
                        } else if (lastDigit === 2) {
                            return number + '-ри';
                        } else if (lastDigit === 7 || lastDigit === 8) {
                            return number + '-ми';
                        } else {
                            return number + '-ти';
                        }
                    },
                    week: {
                        dow: 1,
                        doy: 7
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                var symbolMap = {
                    '1': '১',
                    '2': '২',
                    '3': '৩',
                    '4': '৪',
                    '5': '৫',
                    '6': '৬',
                    '7': '৭',
                    '8': '৮',
                    '9': '৯',
                    '0': '০'
                }, numberMap = {
                    '১': '1',
                    '২': '2',
                    '৩': '3',
                    '৪': '4',
                    '৫': '5',
                    '৬': '6',
                    '৭': '7',
                    '৮': '8',
                    '৯': '9',
                    '০': '0'
                };
                return moment.defineLocale('bn', {
                    months: 'জানুয়ারী_ফেবুয়ারী_মার্চ_এপ্রিল_মে_জুন_জুলাই_অগাস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),
                    monthsShort: 'জানু_ফেব_মার্চ_এপর_মে_জুন_জুল_অগ_সেপ্ট_অক্টো_নভ_ডিসেম্'.split('_'),
                    weekdays: 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পত্তিবার_শুক্রুবার_শনিবার'.split('_'),
                    weekdaysShort: 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পত্তি_শুক্রু_শনি'.split('_'),
                    weekdaysMin: 'রব_সম_মঙ্গ_বু_ব্রিহ_শু_শনি'.split('_'),
                    longDateFormat: {
                        LT: 'A h:mm সময়',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY, LT',
                        LLLL: 'dddd, D MMMM YYYY, LT'
                    },
                    calendar: {
                        sameDay: '[আজ] LT',
                        nextDay: '[আগামীকাল] LT',
                        nextWeek: 'dddd, LT',
                        lastDay: '[গতকাল] LT',
                        lastWeek: '[গত] dddd, LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: '%s পরে',
                        past: '%s আগে',
                        s: 'কএক সেকেন্ড',
                        m: 'এক মিনিট',
                        mm: '%d মিনিট',
                        h: 'এক ঘন্টা',
                        hh: '%d ঘন্টা',
                        d: 'এক দিন',
                        dd: '%d দিন',
                        M: 'এক মাস',
                        MM: '%d মাস',
                        y: 'এক বছর',
                        yy: '%d বছর'
                    },
                    preparse: function preparse(string) {
                        return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function(match) {
                            return numberMap[match];
                        });
                    },
                    postformat: function postformat(string) {
                        return string.replace(/\d/g, function(match) {
                            return symbolMap[match];
                        });
                    },
                    meridiem: function meridiem(hour, minute, isLower) {
                        if (hour < 4) {
                            return 'রাত';
                        } else if (hour < 10) {
                            return 'শকাল';
                        } else if (hour < 17) {
                            return 'দুপুর';
                        } else if (hour < 20) {
                            return 'বিকেল';
                        } else {
                            return 'রাত';
                        }
                    },
                    week: {
                        dow: 0,
                        doy: 6
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                var symbolMap = {
                    '1': '༡',
                    '2': '༢',
                    '3': '༣',
                    '4': '༤',
                    '5': '༥',
                    '6': '༦',
                    '7': '༧',
                    '8': '༨',
                    '9': '༩',
                    '0': '༠'
                }, numberMap = {
                    '༡': '1',
                    '༢': '2',
                    '༣': '3',
                    '༤': '4',
                    '༥': '5',
                    '༦': '6',
                    '༧': '7',
                    '༨': '8',
                    '༩': '9',
                    '༠': '0'
                };
                return moment.defineLocale('bo', {
                    months: 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
                    monthsShort: 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
                    weekdays: 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),
                    weekdaysShort: 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
                    weekdaysMin: 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
                    longDateFormat: {
                        LT: 'A h:mm',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY, LT',
                        LLLL: 'dddd, D MMMM YYYY, LT'
                    },
                    calendar: {
                        sameDay: '[དི་རིང] LT',
                        nextDay: '[སང་ཉིན] LT',
                        nextWeek: '[བདུན་ཕྲག་རྗེས་མ], LT',
                        lastDay: '[ཁ་སང] LT',
                        lastWeek: '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: '%s ལ་',
                        past: '%s སྔན་ལ',
                        s: 'ལམ་སང',
                        m: 'སྐར་མ་གཅིག',
                        mm: '%d སྐར་མ',
                        h: 'ཆུ་ཚོད་གཅིག',
                        hh: '%d ཆུ་ཚོད',
                        d: 'ཉིན་གཅིག',
                        dd: '%d ཉིན་',
                        M: 'ཟླ་བ་གཅིག',
                        MM: '%d ཟླ་བ',
                        y: 'ལོ་གཅིག',
                        yy: '%d ལོ'
                    },
                    preparse: function preparse(string) {
                        return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function(match) {
                            return numberMap[match];
                        });
                    },
                    postformat: function postformat(string) {
                        return string.replace(/\d/g, function(match) {
                            return symbolMap[match];
                        });
                    },
                    meridiem: function meridiem(hour, minute, isLower) {
                        if (hour < 4) {
                            return 'མཚན་མོ';
                        } else if (hour < 10) {
                            return 'ཞོགས་ཀས';
                        } else if (hour < 17) {
                            return 'ཉིན་གུང';
                        } else if (hour < 20) {
                            return 'དགོང་དག';
                        } else {
                            return 'མཚན་མོ';
                        }
                    },
                    week: {
                        dow: 0,
                        doy: 6
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                function relativeTimeWithMutation(number, withoutSuffix, key) {
                    var format = {
                        mm: 'munutenn',
                        MM: 'miz',
                        dd: 'devezh'
                    };
                    return number + ' ' + mutation(format[key], number);
                }
                function specialMutationForYears(number) {
                    switch (lastNumber(number)) {
                      case 1:
                      case 3:
                      case 4:
                      case 5:
                      case 9:
                        return number + ' bloaz';

                      default:
                        return number + ' vloaz';
                    }
                }
                function lastNumber(number) {
                    if (number > 9) {
                        return lastNumber(number % 10);
                    }
                    return number;
                }
                function mutation(text, number) {
                    if (number === 2) {
                        return softMutation(text);
                    }
                    return text;
                }
                function softMutation(text) {
                    var mutationTable = {
                        m: 'v',
                        b: 'v',
                        d: 'z'
                    };
                    if (mutationTable[text.charAt(0)] === undefined) {
                        return text;
                    }
                    return mutationTable[text.charAt(0)] + text.substring(1);
                }
                return moment.defineLocale('br', {
                    months: 'Genver_C\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),
                    monthsShort: 'Gen_C\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
                    weekdays: 'Sul_Lun_Meurzh_Merc\'her_Yaou_Gwener_Sadorn'.split('_'),
                    weekdaysShort: 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
                    weekdaysMin: 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
                    longDateFormat: {
                        LT: 'h[e]mm A',
                        L: 'DD/MM/YYYY',
                        LL: 'D [a viz] MMMM YYYY',
                        LLL: 'D [a viz] MMMM YYYY LT',
                        LLLL: 'dddd, D [a viz] MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[Hiziv da] LT',
                        nextDay: '[Warc\'hoazh da] LT',
                        nextWeek: 'dddd [da] LT',
                        lastDay: '[Dec\'h da] LT',
                        lastWeek: 'dddd [paset da] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'a-benn %s',
                        past: '%s \'zo',
                        s: 'un nebeud segondennoù',
                        m: 'ur vunutenn',
                        mm: relativeTimeWithMutation,
                        h: 'un eur',
                        hh: '%d eur',
                        d: 'un devezh',
                        dd: relativeTimeWithMutation,
                        M: 'ur miz',
                        MM: relativeTimeWithMutation,
                        y: 'ur bloaz',
                        yy: specialMutationForYears
                    },
                    ordinal: function ordinal(number) {
                        var output = number === 1 ? 'añ' : 'vet';
                        return number + output;
                    },
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                function translate(number, withoutSuffix, key) {
                    var result = number + ' ';
                    switch (key) {
                      case 'm':
                        return withoutSuffix ? 'jedna minuta' : 'jedne minute';

                      case 'mm':
                        if (number === 1) {
                            result += 'minuta';
                        } else if (number === 2 || number === 3 || number === 4) {
                            result += 'minute';
                        } else {
                            result += 'minuta';
                        }
                        return result;

                      case 'h':
                        return withoutSuffix ? 'jedan sat' : 'jednog sata';

                      case 'hh':
                        if (number === 1) {
                            result += 'sat';
                        } else if (number === 2 || number === 3 || number === 4) {
                            result += 'sata';
                        } else {
                            result += 'sati';
                        }
                        return result;

                      case 'dd':
                        if (number === 1) {
                            result += 'dan';
                        } else {
                            result += 'dana';
                        }
                        return result;

                      case 'MM':
                        if (number === 1) {
                            result += 'mjesec';
                        } else if (number === 2 || number === 3 || number === 4) {
                            result += 'mjeseca';
                        } else {
                            result += 'mjeseci';
                        }
                        return result;

                      case 'yy':
                        if (number === 1) {
                            result += 'godina';
                        } else if (number === 2 || number === 3 || number === 4) {
                            result += 'godine';
                        } else {
                            result += 'godina';
                        }
                        return result;
                    }
                }
                return moment.defineLocale('bs', {
                    months: 'januar_februar_mart_april_maj_juni_juli_avgust_septembar_oktobar_novembar_decembar'.split('_'),
                    monthsShort: 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
                    weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
                    weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
                    weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
                    longDateFormat: {
                        LT: 'H:mm',
                        L: 'DD. MM. YYYY',
                        LL: 'D. MMMM YYYY',
                        LLL: 'D. MMMM YYYY LT',
                        LLLL: 'dddd, D. MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[danas u] LT',
                        nextDay: '[sutra u] LT',
                        nextWeek: function nextWeek() {
                            switch (this.day()) {
                              case 0:
                                return '[u] [nedjelju] [u] LT';

                              case 3:
                                return '[u] [srijedu] [u] LT';

                              case 6:
                                return '[u] [subotu] [u] LT';

                              case 1:
                              case 2:
                              case 4:
                              case 5:
                                return '[u] dddd [u] LT';
                            }
                        },
                        lastDay: '[jučer u] LT',
                        lastWeek: function lastWeek() {
                            switch (this.day()) {
                              case 0:
                              case 3:
                                return '[prošlu] dddd [u] LT';

                              case 6:
                                return '[prošle] [subote] [u] LT';

                              case 1:
                              case 2:
                              case 4:
                              case 5:
                                return '[prošli] dddd [u] LT';
                            }
                        },
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'za %s',
                        past: 'prije %s',
                        s: 'par sekundi',
                        m: translate,
                        mm: translate,
                        h: translate,
                        hh: translate,
                        d: 'dan',
                        dd: translate,
                        M: 'mjesec',
                        MM: translate,
                        y: 'godinu',
                        yy: translate
                    },
                    ordinal: '%d.',
                    week: {
                        dow: 1,
                        doy: 7
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('ca', {
                    months: 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),
                    monthsShort: 'gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.'.split('_'),
                    weekdays: 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
                    weekdaysShort: 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
                    weekdaysMin: 'Dg_Dl_Dt_Dc_Dj_Dv_Ds'.split('_'),
                    longDateFormat: {
                        LT: 'H:mm',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY LT',
                        LLLL: 'dddd D MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: function sameDay() {
                            return '[avui a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
                        },
                        nextDay: function nextDay() {
                            return '[demà a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
                        },
                        nextWeek: function nextWeek() {
                            return 'dddd [a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
                        },
                        lastDay: function lastDay() {
                            return '[ahir a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
                        },
                        lastWeek: function lastWeek() {
                            return '[el] dddd [passat a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
                        },
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'en %s',
                        past: 'fa %s',
                        s: 'uns segons',
                        m: 'un minut',
                        mm: '%d minuts',
                        h: 'una hora',
                        hh: '%d hores',
                        d: 'un dia',
                        dd: '%d dies',
                        M: 'un mes',
                        MM: '%d mesos',
                        y: 'un any',
                        yy: '%d anys'
                    },
                    ordinal: '%dº',
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                var months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_'), monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');
                function plural(n) {
                    return n > 1 && n < 5 && ~~(n / 10) !== 1;
                }
                function translate(number, withoutSuffix, key, isFuture) {
                    var result = number + ' ';
                    switch (key) {
                      case 's':
                        return withoutSuffix || isFuture ? 'pár sekund' : 'pár sekundami';

                      case 'm':
                        return withoutSuffix ? 'minuta' : isFuture ? 'minutu' : 'minutou';

                      case 'mm':
                        if (withoutSuffix || isFuture) {
                            return result + (plural(number) ? 'minuty' : 'minut');
                        } else {
                            return result + 'minutami';
                        }
                        break;

                      case 'h':
                        return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';

                      case 'hh':
                        if (withoutSuffix || isFuture) {
                            return result + (plural(number) ? 'hodiny' : 'hodin');
                        } else {
                            return result + 'hodinami';
                        }
                        break;

                      case 'd':
                        return withoutSuffix || isFuture ? 'den' : 'dnem';

                      case 'dd':
                        if (withoutSuffix || isFuture) {
                            return result + (plural(number) ? 'dny' : 'dní');
                        } else {
                            return result + 'dny';
                        }
                        break;

                      case 'M':
                        return withoutSuffix || isFuture ? 'měsíc' : 'měsícem';

                      case 'MM':
                        if (withoutSuffix || isFuture) {
                            return result + (plural(number) ? 'měsíce' : 'měsíců');
                        } else {
                            return result + 'měsíci';
                        }
                        break;

                      case 'y':
                        return withoutSuffix || isFuture ? 'rok' : 'rokem';

                      case 'yy':
                        if (withoutSuffix || isFuture) {
                            return result + (plural(number) ? 'roky' : 'let');
                        } else {
                            return result + 'lety';
                        }
                        break;
                    }
                }
                return moment.defineLocale('cs', {
                    months: months,
                    monthsShort: monthsShort,
                    monthsParse: function(months, monthsShort) {
                        var i, _monthsParse = [];
                        for (i = 0; i < 12; i++) {
                            _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
                        }
                        return _monthsParse;
                    }(months, monthsShort),
                    weekdays: 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
                    weekdaysShort: 'ne_po_út_st_čt_pá_so'.split('_'),
                    weekdaysMin: 'ne_po_út_st_čt_pá_so'.split('_'),
                    longDateFormat: {
                        LT: 'H:mm',
                        L: 'DD. MM. YYYY',
                        LL: 'D. MMMM YYYY',
                        LLL: 'D. MMMM YYYY LT',
                        LLLL: 'dddd D. MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[dnes v] LT',
                        nextDay: '[zítra v] LT',
                        nextWeek: function nextWeek() {
                            switch (this.day()) {
                              case 0:
                                return '[v neděli v] LT';

                              case 1:
                              case 2:
                                return '[v] dddd [v] LT';

                              case 3:
                                return '[ve středu v] LT';

                              case 4:
                                return '[ve čtvrtek v] LT';

                              case 5:
                                return '[v pátek v] LT';

                              case 6:
                                return '[v sobotu v] LT';
                            }
                        },
                        lastDay: '[včera v] LT',
                        lastWeek: function lastWeek() {
                            switch (this.day()) {
                              case 0:
                                return '[minulou neděli v] LT';

                              case 1:
                              case 2:
                                return '[minulé] dddd [v] LT';

                              case 3:
                                return '[minulou středu v] LT';

                              case 4:
                              case 5:
                                return '[minulý] dddd [v] LT';

                              case 6:
                                return '[minulou sobotu v] LT';
                            }
                        },
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'za %s',
                        past: 'před %s',
                        s: translate,
                        m: translate,
                        mm: translate,
                        h: translate,
                        hh: translate,
                        d: translate,
                        dd: translate,
                        M: translate,
                        MM: translate,
                        y: translate,
                        yy: translate
                    },
                    ordinal: '%d.',
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('cv', {
                    months: 'кăрлач_нарăс_пуш_ака_май_çĕртме_утă_çурла_авăн_юпа_чӳк_раштав'.split('_'),
                    monthsShort: 'кăр_нар_пуш_ака_май_çĕр_утă_çур_ав_юпа_чӳк_раш'.split('_'),
                    weekdays: 'вырсарникун_тунтикун_ытларикун_юнкун_кĕçнерникун_эрнекун_шăматкун'.split('_'),
                    weekdaysShort: 'выр_тун_ытл_юн_кĕç_эрн_шăм'.split('_'),
                    weekdaysMin: 'вр_тн_ыт_юн_кç_эр_шм'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD-MM-YYYY',
                        LL: 'YYYY [çулхи] MMMM [уйăхĕн] D[-мĕшĕ]',
                        LLL: 'YYYY [çулхи] MMMM [уйăхĕн] D[-мĕшĕ], LT',
                        LLLL: 'dddd, YYYY [çулхи] MMMM [уйăхĕн] D[-мĕшĕ], LT'
                    },
                    calendar: {
                        sameDay: '[Паян] LT [сехетре]',
                        nextDay: '[Ыран] LT [сехетре]',
                        lastDay: '[Ĕнер] LT [сехетре]',
                        nextWeek: '[Çитес] dddd LT [сехетре]',
                        lastWeek: '[Иртнĕ] dddd LT [сехетре]',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: function future(output) {
                            var affix = /сехет$/i.exec(output) ? 'рен' : /çул$/i.exec(output) ? 'тан' : 'ран';
                            return output + affix;
                        },
                        past: '%s каялла',
                        s: 'пĕр-ик çеккунт',
                        m: 'пĕр минут',
                        mm: '%d минут',
                        h: 'пĕр сехет',
                        hh: '%d сехет',
                        d: 'пĕр кун',
                        dd: '%d кун',
                        M: 'пĕр уйăх',
                        MM: '%d уйăх',
                        y: 'пĕр çул',
                        yy: '%d çул'
                    },
                    ordinal: '%d-мĕш',
                    week: {
                        dow: 1,
                        doy: 7
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('cy', {
                    months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),
                    monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
                    weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
                    weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
                    weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY LT',
                        LLLL: 'dddd, D MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[Heddiw am] LT',
                        nextDay: '[Yfory am] LT',
                        nextWeek: 'dddd [am] LT',
                        lastDay: '[Ddoe am] LT',
                        lastWeek: 'dddd [diwethaf am] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'mewn %s',
                        past: '%s yn ôl',
                        s: 'ychydig eiliadau',
                        m: 'munud',
                        mm: '%d munud',
                        h: 'awr',
                        hh: '%d awr',
                        d: 'diwrnod',
                        dd: '%d diwrnod',
                        M: 'mis',
                        MM: '%d mis',
                        y: 'blwyddyn',
                        yy: '%d flynedd'
                    },
                    ordinal: function ordinal(number) {
                        var b = number, output = '', lookup = [ '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' ];
                        if (b > 20) {
                            if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
                                output = 'fed';
                            } else {
                                output = 'ain';
                            }
                        } else if (b > 0) {
                            output = lookup[b];
                        }
                        return number + output;
                    },
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('da', {
                    months: 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),
                    monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
                    weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
                    weekdaysShort: 'søn_man_tir_ons_tor_fre_lør'.split('_'),
                    weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD/MM/YYYY',
                        LL: 'D. MMMM YYYY',
                        LLL: 'D. MMMM YYYY LT',
                        LLLL: 'dddd [d.] D. MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[I dag kl.] LT',
                        nextDay: '[I morgen kl.] LT',
                        nextWeek: 'dddd [kl.] LT',
                        lastDay: '[I går kl.] LT',
                        lastWeek: '[sidste] dddd [kl] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'om %s',
                        past: '%s siden',
                        s: 'få sekunder',
                        m: 'et minut',
                        mm: '%d minutter',
                        h: 'en time',
                        hh: '%d timer',
                        d: 'en dag',
                        dd: '%d dage',
                        M: 'en måned',
                        MM: '%d måneder',
                        y: 'et år',
                        yy: '%d år'
                    },
                    ordinal: '%d.',
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                function processRelativeTime(number, withoutSuffix, key, isFuture) {
                    var format = {
                        m: [ 'eine Minute', 'einer Minute' ],
                        h: [ 'eine Stunde', 'einer Stunde' ],
                        d: [ 'ein Tag', 'einem Tag' ],
                        dd: [ number + ' Tage', number + ' Tagen' ],
                        M: [ 'ein Monat', 'einem Monat' ],
                        MM: [ number + ' Monate', number + ' Monaten' ],
                        y: [ 'ein Jahr', 'einem Jahr' ],
                        yy: [ number + ' Jahre', number + ' Jahren' ]
                    };
                    return withoutSuffix ? format[key][0] : format[key][1];
                }
                return moment.defineLocale('de-at', {
                    months: 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
                    monthsShort: 'Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
                    weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
                    weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
                    weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm [Uhr]',
                        L: 'DD.MM.YYYY',
                        LL: 'D. MMMM YYYY',
                        LLL: 'D. MMMM YYYY LT',
                        LLLL: 'dddd, D. MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[Heute um] LT',
                        sameElse: 'L',
                        nextDay: '[Morgen um] LT',
                        nextWeek: 'dddd [um] LT',
                        lastDay: '[Gestern um] LT',
                        lastWeek: '[letzten] dddd [um] LT'
                    },
                    relativeTime: {
                        future: 'in %s',
                        past: 'vor %s',
                        s: 'ein paar Sekunden',
                        m: processRelativeTime,
                        mm: '%d Minuten',
                        h: processRelativeTime,
                        hh: '%d Stunden',
                        d: processRelativeTime,
                        dd: processRelativeTime,
                        M: processRelativeTime,
                        MM: processRelativeTime,
                        y: processRelativeTime,
                        yy: processRelativeTime
                    },
                    ordinal: '%d.',
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                function processRelativeTime(number, withoutSuffix, key, isFuture) {
                    var format = {
                        m: [ 'eine Minute', 'einer Minute' ],
                        h: [ 'eine Stunde', 'einer Stunde' ],
                        d: [ 'ein Tag', 'einem Tag' ],
                        dd: [ number + ' Tage', number + ' Tagen' ],
                        M: [ 'ein Monat', 'einem Monat' ],
                        MM: [ number + ' Monate', number + ' Monaten' ],
                        y: [ 'ein Jahr', 'einem Jahr' ],
                        yy: [ number + ' Jahre', number + ' Jahren' ]
                    };
                    return withoutSuffix ? format[key][0] : format[key][1];
                }
                return moment.defineLocale('de', {
                    months: 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
                    monthsShort: 'Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
                    weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
                    weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
                    weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm [Uhr]',
                        L: 'DD.MM.YYYY',
                        LL: 'D. MMMM YYYY',
                        LLL: 'D. MMMM YYYY LT',
                        LLLL: 'dddd, D. MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[Heute um] LT',
                        sameElse: 'L',
                        nextDay: '[Morgen um] LT',
                        nextWeek: 'dddd [um] LT',
                        lastDay: '[Gestern um] LT',
                        lastWeek: '[letzten] dddd [um] LT'
                    },
                    relativeTime: {
                        future: 'in %s',
                        past: 'vor %s',
                        s: 'ein paar Sekunden',
                        m: processRelativeTime,
                        mm: '%d Minuten',
                        h: processRelativeTime,
                        hh: '%d Stunden',
                        d: processRelativeTime,
                        dd: processRelativeTime,
                        M: processRelativeTime,
                        MM: processRelativeTime,
                        y: processRelativeTime,
                        yy: processRelativeTime
                    },
                    ordinal: '%d.',
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('el', {
                    monthsNominativeEl: 'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split('_'),
                    monthsGenitiveEl: 'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split('_'),
                    months: function months(momentToFormat, format) {
                        if (/D/.test(format.substring(0, format.indexOf('MMMM')))) {
                            return this._monthsGenitiveEl[momentToFormat.month()];
                        } else {
                            return this._monthsNominativeEl[momentToFormat.month()];
                        }
                    },
                    monthsShort: 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
                    weekdays: 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split('_'),
                    weekdaysShort: 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
                    weekdaysMin: 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
                    meridiem: function meridiem(hours, minutes, isLower) {
                        if (hours > 11) {
                            return isLower ? 'μμ' : 'ΜΜ';
                        } else {
                            return isLower ? 'πμ' : 'ΠΜ';
                        }
                    },
                    isPM: function isPM(input) {
                        return (input + '').toLowerCase()[0] === 'μ';
                    },
                    meridiemParse: /[ΠΜ]\.?Μ?\.?/i,
                    longDateFormat: {
                        LT: 'h:mm A',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY LT',
                        LLLL: 'dddd, D MMMM YYYY LT'
                    },
                    calendarEl: {
                        sameDay: '[Σήμερα {}] LT',
                        nextDay: '[Αύριο {}] LT',
                        nextWeek: 'dddd [{}] LT',
                        lastDay: '[Χθες {}] LT',
                        lastWeek: function lastWeek() {
                            switch (this.day()) {
                              case 6:
                                return '[το προηγούμενο] dddd [{}] LT';

                              default:
                                return '[την προηγούμενη] dddd [{}] LT';
                            }
                        },
                        sameElse: 'L'
                    },
                    calendar: function calendar(key, mom) {
                        var output = this._calendarEl[key], hours = mom && mom.hours();
                        if (typeof output === 'function') {
                            output = output.apply(mom);
                        }
                        return output.replace('{}', hours % 12 === 1 ? 'στη' : 'στις');
                    },
                    relativeTime: {
                        future: 'σε %s',
                        past: '%s πριν',
                        s: 'δευτερόλεπτα',
                        m: 'ένα λεπτό',
                        mm: '%d λεπτά',
                        h: 'μία ώρα',
                        hh: '%d ώρες',
                        d: 'μία μέρα',
                        dd: '%d μέρες',
                        M: 'ένας μήνας',
                        MM: '%d μήνες',
                        y: 'ένας χρόνος',
                        yy: '%d χρόνια'
                    },
                    ordinal: function ordinal(number) {
                        return number + 'η';
                    },
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('en-au', {
                    months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
                    monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
                    weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
                    weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
                    weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
                    longDateFormat: {
                        LT: 'h:mm A',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY LT',
                        LLLL: 'dddd, D MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[Today at] LT',
                        nextDay: '[Tomorrow at] LT',
                        nextWeek: 'dddd [at] LT',
                        lastDay: '[Yesterday at] LT',
                        lastWeek: '[Last] dddd [at] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'in %s',
                        past: '%s ago',
                        s: 'a few seconds',
                        m: 'a minute',
                        mm: '%d minutes',
                        h: 'an hour',
                        hh: '%d hours',
                        d: 'a day',
                        dd: '%d days',
                        M: 'a month',
                        MM: '%d months',
                        y: 'a year',
                        yy: '%d years'
                    },
                    ordinal: function ordinal(number) {
                        var b = number % 10, output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
                        return number + output;
                    },
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('en-ca', {
                    months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
                    monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
                    weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
                    weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
                    weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
                    longDateFormat: {
                        LT: 'h:mm A',
                        L: 'YYYY-MM-DD',
                        LL: 'D MMMM, YYYY',
                        LLL: 'D MMMM, YYYY LT',
                        LLLL: 'dddd, D MMMM, YYYY LT'
                    },
                    calendar: {
                        sameDay: '[Today at] LT',
                        nextDay: '[Tomorrow at] LT',
                        nextWeek: 'dddd [at] LT',
                        lastDay: '[Yesterday at] LT',
                        lastWeek: '[Last] dddd [at] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'in %s',
                        past: '%s ago',
                        s: 'a few seconds',
                        m: 'a minute',
                        mm: '%d minutes',
                        h: 'an hour',
                        hh: '%d hours',
                        d: 'a day',
                        dd: '%d days',
                        M: 'a month',
                        MM: '%d months',
                        y: 'a year',
                        yy: '%d years'
                    },
                    ordinal: function ordinal(number) {
                        var b = number % 10, output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
                        return number + output;
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('en-gb', {
                    months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
                    monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
                    weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
                    weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
                    weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY LT',
                        LLLL: 'dddd, D MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[Today at] LT',
                        nextDay: '[Tomorrow at] LT',
                        nextWeek: 'dddd [at] LT',
                        lastDay: '[Yesterday at] LT',
                        lastWeek: '[Last] dddd [at] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'in %s',
                        past: '%s ago',
                        s: 'a few seconds',
                        m: 'a minute',
                        mm: '%d minutes',
                        h: 'an hour',
                        hh: '%d hours',
                        d: 'a day',
                        dd: '%d days',
                        M: 'a month',
                        MM: '%d months',
                        y: 'a year',
                        yy: '%d years'
                    },
                    ordinal: function ordinal(number) {
                        var b = number % 10, output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
                        return number + output;
                    },
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('eo', {
                    months: 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split('_'),
                    monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec'.split('_'),
                    weekdays: 'Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato'.split('_'),
                    weekdaysShort: 'Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab'.split('_'),
                    weekdaysMin: 'Di_Lu_Ma_Me_Ĵa_Ve_Sa'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'YYYY-MM-DD',
                        LL: 'D[-an de] MMMM, YYYY',
                        LLL: 'D[-an de] MMMM, YYYY LT',
                        LLLL: 'dddd, [la] D[-an de] MMMM, YYYY LT'
                    },
                    meridiem: function meridiem(hours, minutes, isLower) {
                        if (hours > 11) {
                            return isLower ? 'p.t.m.' : 'P.T.M.';
                        } else {
                            return isLower ? 'a.t.m.' : 'A.T.M.';
                        }
                    },
                    calendar: {
                        sameDay: '[Hodiaŭ je] LT',
                        nextDay: '[Morgaŭ je] LT',
                        nextWeek: 'dddd [je] LT',
                        lastDay: '[Hieraŭ je] LT',
                        lastWeek: '[pasinta] dddd [je] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'je %s',
                        past: 'antaŭ %s',
                        s: 'sekundoj',
                        m: 'minuto',
                        mm: '%d minutoj',
                        h: 'horo',
                        hh: '%d horoj',
                        d: 'tago',
                        dd: '%d tagoj',
                        M: 'monato',
                        MM: '%d monatoj',
                        y: 'jaro',
                        yy: '%d jaroj'
                    },
                    ordinal: '%da',
                    week: {
                        dow: 1,
                        doy: 7
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'), _monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');
                return moment.defineLocale('es', {
                    months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
                    monthsShort: function monthsShort(m, format) {
                        if (/-MMM-/.test(format)) {
                            return _monthsShort[m.month()];
                        } else {
                            return monthsShortDot[m.month()];
                        }
                    },
                    weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
                    weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
                    weekdaysMin: 'Do_Lu_Ma_Mi_Ju_Vi_Sá'.split('_'),
                    longDateFormat: {
                        LT: 'H:mm',
                        L: 'DD/MM/YYYY',
                        LL: 'D [de] MMMM [de] YYYY',
                        LLL: 'D [de] MMMM [de] YYYY LT',
                        LLLL: 'dddd, D [de] MMMM [de] YYYY LT'
                    },
                    calendar: {
                        sameDay: function sameDay() {
                            return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
                        },
                        nextDay: function nextDay() {
                            return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
                        },
                        nextWeek: function nextWeek() {
                            return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
                        },
                        lastDay: function lastDay() {
                            return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
                        },
                        lastWeek: function lastWeek() {
                            return '[el] dddd [pasado a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
                        },
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'en %s',
                        past: 'hace %s',
                        s: 'unos segundos',
                        m: 'un minuto',
                        mm: '%d minutos',
                        h: 'una hora',
                        hh: '%d horas',
                        d: 'un día',
                        dd: '%d días',
                        M: 'un mes',
                        MM: '%d meses',
                        y: 'un año',
                        yy: '%d años'
                    },
                    ordinal: '%dº',
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                function processRelativeTime(number, withoutSuffix, key, isFuture) {
                    var format = {
                        s: [ 'mõne sekundi', 'mõni sekund', 'paar sekundit' ],
                        m: [ 'ühe minuti', 'üks minut' ],
                        mm: [ number + ' minuti', number + ' minutit' ],
                        h: [ 'ühe tunni', 'tund aega', 'üks tund' ],
                        hh: [ number + ' tunni', number + ' tundi' ],
                        d: [ 'ühe päeva', 'üks päev' ],
                        M: [ 'kuu aja', 'kuu aega', 'üks kuu' ],
                        MM: [ number + ' kuu', number + ' kuud' ],
                        y: [ 'ühe aasta', 'aasta', 'üks aasta' ],
                        yy: [ number + ' aasta', number + ' aastat' ]
                    };
                    if (withoutSuffix) {
                        return format[key][2] ? format[key][2] : format[key][1];
                    }
                    return isFuture ? format[key][0] : format[key][1];
                }
                return moment.defineLocale('et', {
                    months: 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
                    monthsShort: 'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
                    weekdays: 'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split('_'),
                    weekdaysShort: 'P_E_T_K_N_R_L'.split('_'),
                    weekdaysMin: 'P_E_T_K_N_R_L'.split('_'),
                    longDateFormat: {
                        LT: 'H:mm',
                        L: 'DD.MM.YYYY',
                        LL: 'D. MMMM YYYY',
                        LLL: 'D. MMMM YYYY LT',
                        LLLL: 'dddd, D. MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[Täna,] LT',
                        nextDay: '[Homme,] LT',
                        nextWeek: '[Järgmine] dddd LT',
                        lastDay: '[Eile,] LT',
                        lastWeek: '[Eelmine] dddd LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: '%s pärast',
                        past: '%s tagasi',
                        s: processRelativeTime,
                        m: processRelativeTime,
                        mm: processRelativeTime,
                        h: processRelativeTime,
                        hh: processRelativeTime,
                        d: processRelativeTime,
                        dd: '%d päeva',
                        M: processRelativeTime,
                        MM: processRelativeTime,
                        y: processRelativeTime,
                        yy: processRelativeTime
                    },
                    ordinal: '%d.',
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('eu', {
                    months: 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
                    monthsShort: 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
                    weekdays: 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
                    weekdaysShort: 'ig._al._ar._az._og._ol._lr.'.split('_'),
                    weekdaysMin: 'ig_al_ar_az_og_ol_lr'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'YYYY-MM-DD',
                        LL: 'YYYY[ko] MMMM[ren] D[a]',
                        LLL: 'YYYY[ko] MMMM[ren] D[a] LT',
                        LLLL: 'dddd, YYYY[ko] MMMM[ren] D[a] LT',
                        l: 'YYYY-M-D',
                        ll: 'YYYY[ko] MMM D[a]',
                        lll: 'YYYY[ko] MMM D[a] LT',
                        llll: 'ddd, YYYY[ko] MMM D[a] LT'
                    },
                    calendar: {
                        sameDay: '[gaur] LT[etan]',
                        nextDay: '[bihar] LT[etan]',
                        nextWeek: 'dddd LT[etan]',
                        lastDay: '[atzo] LT[etan]',
                        lastWeek: '[aurreko] dddd LT[etan]',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: '%s barru',
                        past: 'duela %s',
                        s: 'segundo batzuk',
                        m: 'minutu bat',
                        mm: '%d minutu',
                        h: 'ordu bat',
                        hh: '%d ordu',
                        d: 'egun bat',
                        dd: '%d egun',
                        M: 'hilabete bat',
                        MM: '%d hilabete',
                        y: 'urte bat',
                        yy: '%d urte'
                    },
                    ordinal: '%d.',
                    week: {
                        dow: 1,
                        doy: 7
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                var symbolMap = {
                    '1': '۱',
                    '2': '۲',
                    '3': '۳',
                    '4': '۴',
                    '5': '۵',
                    '6': '۶',
                    '7': '۷',
                    '8': '۸',
                    '9': '۹',
                    '0': '۰'
                }, numberMap = {
                    '۱': '1',
                    '۲': '2',
                    '۳': '3',
                    '۴': '4',
                    '۵': '5',
                    '۶': '6',
                    '۷': '7',
                    '۸': '8',
                    '۹': '9',
                    '۰': '0'
                };
                return moment.defineLocale('fa', {
                    months: 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
                    monthsShort: 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
                    weekdays: 'یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه'.split('_'),
                    weekdaysShort: 'یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه'.split('_'),
                    weekdaysMin: 'ی_د_س_چ_پ_ج_ش'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY LT',
                        LLLL: 'dddd, D MMMM YYYY LT'
                    },
                    meridiem: function meridiem(hour, minute, isLower) {
                        if (hour < 12) {
                            return 'قبل از ظهر';
                        } else {
                            return 'بعد از ظهر';
                        }
                    },
                    calendar: {
                        sameDay: '[امروز ساعت] LT',
                        nextDay: '[فردا ساعت] LT',
                        nextWeek: 'dddd [ساعت] LT',
                        lastDay: '[دیروز ساعت] LT',
                        lastWeek: 'dddd [پیش] [ساعت] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'در %s',
                        past: '%s پیش',
                        s: 'چندین ثانیه',
                        m: 'یک دقیقه',
                        mm: '%d دقیقه',
                        h: 'یک ساعت',
                        hh: '%d ساعت',
                        d: 'یک روز',
                        dd: '%d روز',
                        M: 'یک ماه',
                        MM: '%d ماه',
                        y: 'یک سال',
                        yy: '%d سال'
                    },
                    preparse: function preparse(string) {
                        return string.replace(/[۰-۹]/g, function(match) {
                            return numberMap[match];
                        }).replace(/،/g, ',');
                    },
                    postformat: function postformat(string) {
                        return string.replace(/\d/g, function(match) {
                            return symbolMap[match];
                        }).replace(/,/g, '،');
                    },
                    ordinal: '%dم',
                    week: {
                        dow: 6,
                        doy: 12
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' '), numbersFuture = [ 'nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden', numbersPast[7], numbersPast[8], numbersPast[9] ];
                function translate(number, withoutSuffix, key, isFuture) {
                    var result = '';
                    switch (key) {
                      case 's':
                        return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';

                      case 'm':
                        return isFuture ? 'minuutin' : 'minuutti';

                      case 'mm':
                        result = isFuture ? 'minuutin' : 'minuuttia';
                        break;

                      case 'h':
                        return isFuture ? 'tunnin' : 'tunti';

                      case 'hh':
                        result = isFuture ? 'tunnin' : 'tuntia';
                        break;

                      case 'd':
                        return isFuture ? 'päivän' : 'päivä';

                      case 'dd':
                        result = isFuture ? 'päivän' : 'päivää';
                        break;

                      case 'M':
                        return isFuture ? 'kuukauden' : 'kuukausi';

                      case 'MM':
                        result = isFuture ? 'kuukauden' : 'kuukautta';
                        break;

                      case 'y':
                        return isFuture ? 'vuoden' : 'vuosi';

                      case 'yy':
                        result = isFuture ? 'vuoden' : 'vuotta';
                        break;
                    }
                    result = verbalNumber(number, isFuture) + ' ' + result;
                    return result;
                }
                function verbalNumber(number, isFuture) {
                    return number < 10 ? isFuture ? numbersFuture[number] : numbersPast[number] : number;
                }
                return moment.defineLocale('fi', {
                    months: 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
                    monthsShort: 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),
                    weekdays: 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
                    weekdaysShort: 'su_ma_ti_ke_to_pe_la'.split('_'),
                    weekdaysMin: 'su_ma_ti_ke_to_pe_la'.split('_'),
                    longDateFormat: {
                        LT: 'HH.mm',
                        L: 'DD.MM.YYYY',
                        LL: 'Do MMMM[ta] YYYY',
                        LLL: 'Do MMMM[ta] YYYY, [klo] LT',
                        LLLL: 'dddd, Do MMMM[ta] YYYY, [klo] LT',
                        l: 'D.M.YYYY',
                        ll: 'Do MMM YYYY',
                        lll: 'Do MMM YYYY, [klo] LT',
                        llll: 'ddd, Do MMM YYYY, [klo] LT'
                    },
                    calendar: {
                        sameDay: '[tänään] [klo] LT',
                        nextDay: '[huomenna] [klo] LT',
                        nextWeek: 'dddd [klo] LT',
                        lastDay: '[eilen] [klo] LT',
                        lastWeek: '[viime] dddd[na] [klo] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: '%s päästä',
                        past: '%s sitten',
                        s: translate,
                        m: translate,
                        mm: translate,
                        h: translate,
                        hh: translate,
                        d: translate,
                        dd: translate,
                        M: translate,
                        MM: translate,
                        y: translate,
                        yy: translate
                    },
                    ordinal: '%d.',
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('fo', {
                    months: 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
                    monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
                    weekdays: 'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split('_'),
                    weekdaysShort: 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
                    weekdaysMin: 'su_má_tý_mi_hó_fr_le'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY LT',
                        LLLL: 'dddd D. MMMM, YYYY LT'
                    },
                    calendar: {
                        sameDay: '[Í dag kl.] LT',
                        nextDay: '[Í morgin kl.] LT',
                        nextWeek: 'dddd [kl.] LT',
                        lastDay: '[Í gjár kl.] LT',
                        lastWeek: '[síðstu] dddd [kl] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'um %s',
                        past: '%s síðani',
                        s: 'fá sekund',
                        m: 'ein minutt',
                        mm: '%d minuttir',
                        h: 'ein tími',
                        hh: '%d tímar',
                        d: 'ein dagur',
                        dd: '%d dagar',
                        M: 'ein mánaði',
                        MM: '%d mánaðir',
                        y: 'eitt ár',
                        yy: '%d ár'
                    },
                    ordinal: '%d.',
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('fr-ca', {
                    months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
                    monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
                    weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
                    weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
                    weekdaysMin: 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'YYYY-MM-DD',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY LT',
                        LLLL: 'dddd D MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[Aujourd\'hui à] LT',
                        nextDay: '[Demain à] LT',
                        nextWeek: 'dddd [à] LT',
                        lastDay: '[Hier à] LT',
                        lastWeek: 'dddd [dernier à] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'dans %s',
                        past: 'il y a %s',
                        s: 'quelques secondes',
                        m: 'une minute',
                        mm: '%d minutes',
                        h: 'une heure',
                        hh: '%d heures',
                        d: 'un jour',
                        dd: '%d jours',
                        M: 'un mois',
                        MM: '%d mois',
                        y: 'un an',
                        yy: '%d ans'
                    },
                    ordinal: function ordinal(number) {
                        return number + (number === 1 ? 'er' : '');
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('fr', {
                    months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
                    monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
                    weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
                    weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
                    weekdaysMin: 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY LT',
                        LLLL: 'dddd D MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[Aujourd\'hui à] LT',
                        nextDay: '[Demain à] LT',
                        nextWeek: 'dddd [à] LT',
                        lastDay: '[Hier à] LT',
                        lastWeek: 'dddd [dernier à] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'dans %s',
                        past: 'il y a %s',
                        s: 'quelques secondes',
                        m: 'une minute',
                        mm: '%d minutes',
                        h: 'une heure',
                        hh: '%d heures',
                        d: 'un jour',
                        dd: '%d jours',
                        M: 'un mois',
                        MM: '%d mois',
                        y: 'un an',
                        yy: '%d ans'
                    },
                    ordinal: function ordinal(number) {
                        return number + (number === 1 ? 'er' : '');
                    },
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('gl', {
                    months: 'Xaneiro_Febreiro_Marzo_Abril_Maio_Xuño_Xullo_Agosto_Setembro_Outubro_Novembro_Decembro'.split('_'),
                    monthsShort: 'Xan._Feb._Mar._Abr._Mai._Xuñ._Xul._Ago._Set._Out._Nov._Dec.'.split('_'),
                    weekdays: 'Domingo_Luns_Martes_Mércores_Xoves_Venres_Sábado'.split('_'),
                    weekdaysShort: 'Dom._Lun._Mar._Mér._Xov._Ven._Sáb.'.split('_'),
                    weekdaysMin: 'Do_Lu_Ma_Mé_Xo_Ve_Sá'.split('_'),
                    longDateFormat: {
                        LT: 'H:mm',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY LT',
                        LLLL: 'dddd D MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: function sameDay() {
                            return '[hoxe ' + (this.hours() !== 1 ? 'ás' : 'á') + '] LT';
                        },
                        nextDay: function nextDay() {
                            return '[mañá ' + (this.hours() !== 1 ? 'ás' : 'á') + '] LT';
                        },
                        nextWeek: function nextWeek() {
                            return 'dddd [' + (this.hours() !== 1 ? 'ás' : 'a') + '] LT';
                        },
                        lastDay: function lastDay() {
                            return '[onte ' + (this.hours() !== 1 ? 'á' : 'a') + '] LT';
                        },
                        lastWeek: function lastWeek() {
                            return '[o] dddd [pasado ' + (this.hours() !== 1 ? 'ás' : 'a') + '] LT';
                        },
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: function future(str) {
                            if (str === 'uns segundos') {
                                return 'nuns segundos';
                            }
                            return 'en ' + str;
                        },
                        past: 'hai %s',
                        s: 'uns segundos',
                        m: 'un minuto',
                        mm: '%d minutos',
                        h: 'unha hora',
                        hh: '%d horas',
                        d: 'un día',
                        dd: '%d días',
                        M: 'un mes',
                        MM: '%d meses',
                        y: 'un ano',
                        yy: '%d anos'
                    },
                    ordinal: '%dº',
                    week: {
                        dow: 1,
                        doy: 7
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('he', {
                    months: 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),
                    monthsShort: 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
                    weekdays: 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
                    weekdaysShort: 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
                    weekdaysMin: 'א_ב_ג_ד_ה_ו_ש'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD/MM/YYYY',
                        LL: 'D [ב]MMMM YYYY',
                        LLL: 'D [ב]MMMM YYYY LT',
                        LLLL: 'dddd, D [ב]MMMM YYYY LT',
                        l: 'D/M/YYYY',
                        ll: 'D MMM YYYY',
                        lll: 'D MMM YYYY LT',
                        llll: 'ddd, D MMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[היום ב־]LT',
                        nextDay: '[מחר ב־]LT',
                        nextWeek: 'dddd [בשעה] LT',
                        lastDay: '[אתמול ב־]LT',
                        lastWeek: '[ביום] dddd [האחרון בשעה] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'בעוד %s',
                        past: 'לפני %s',
                        s: 'מספר שניות',
                        m: 'דקה',
                        mm: '%d דקות',
                        h: 'שעה',
                        hh: function hh(number) {
                            if (number === 2) {
                                return 'שעתיים';
                            }
                            return number + ' שעות';
                        },
                        d: 'יום',
                        dd: function dd(number) {
                            if (number === 2) {
                                return 'יומיים';
                            }
                            return number + ' ימים';
                        },
                        M: 'חודש',
                        MM: function MM(number) {
                            if (number === 2) {
                                return 'חודשיים';
                            }
                            return number + ' חודשים';
                        },
                        y: 'שנה',
                        yy: function yy(number) {
                            if (number === 2) {
                                return 'שנתיים';
                            }
                            return number + ' שנים';
                        }
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                var symbolMap = {
                    '1': '१',
                    '2': '२',
                    '3': '३',
                    '4': '४',
                    '5': '५',
                    '6': '६',
                    '7': '७',
                    '8': '८',
                    '9': '९',
                    '0': '०'
                }, numberMap = {
                    '१': '1',
                    '२': '2',
                    '३': '3',
                    '४': '4',
                    '५': '5',
                    '६': '6',
                    '७': '7',
                    '८': '8',
                    '९': '9',
                    '०': '0'
                };
                return moment.defineLocale('hi', {
                    months: 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),
                    monthsShort: 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
                    weekdays: 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
                    weekdaysShort: 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
                    weekdaysMin: 'र_सो_मं_बु_गु_शु_श'.split('_'),
                    longDateFormat: {
                        LT: 'A h:mm बजे',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY, LT',
                        LLLL: 'dddd, D MMMM YYYY, LT'
                    },
                    calendar: {
                        sameDay: '[आज] LT',
                        nextDay: '[कल] LT',
                        nextWeek: 'dddd, LT',
                        lastDay: '[कल] LT',
                        lastWeek: '[पिछले] dddd, LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: '%s में',
                        past: '%s पहले',
                        s: 'कुछ ही क्षण',
                        m: 'एक मिनट',
                        mm: '%d मिनट',
                        h: 'एक घंटा',
                        hh: '%d घंटे',
                        d: 'एक दिन',
                        dd: '%d दिन',
                        M: 'एक महीने',
                        MM: '%d महीने',
                        y: 'एक वर्ष',
                        yy: '%d वर्ष'
                    },
                    preparse: function preparse(string) {
                        return string.replace(/[१२३४५६७८९०]/g, function(match) {
                            return numberMap[match];
                        });
                    },
                    postformat: function postformat(string) {
                        return string.replace(/\d/g, function(match) {
                            return symbolMap[match];
                        });
                    },
                    meridiem: function meridiem(hour, minute, isLower) {
                        if (hour < 4) {
                            return 'रात';
                        } else if (hour < 10) {
                            return 'सुबह';
                        } else if (hour < 17) {
                            return 'दोपहर';
                        } else if (hour < 20) {
                            return 'शाम';
                        } else {
                            return 'रात';
                        }
                    },
                    week: {
                        dow: 0,
                        doy: 6
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                function translate(number, withoutSuffix, key) {
                    var result = number + ' ';
                    switch (key) {
                      case 'm':
                        return withoutSuffix ? 'jedna minuta' : 'jedne minute';

                      case 'mm':
                        if (number === 1) {
                            result += 'minuta';
                        } else if (number === 2 || number === 3 || number === 4) {
                            result += 'minute';
                        } else {
                            result += 'minuta';
                        }
                        return result;

                      case 'h':
                        return withoutSuffix ? 'jedan sat' : 'jednog sata';

                      case 'hh':
                        if (number === 1) {
                            result += 'sat';
                        } else if (number === 2 || number === 3 || number === 4) {
                            result += 'sata';
                        } else {
                            result += 'sati';
                        }
                        return result;

                      case 'dd':
                        if (number === 1) {
                            result += 'dan';
                        } else {
                            result += 'dana';
                        }
                        return result;

                      case 'MM':
                        if (number === 1) {
                            result += 'mjesec';
                        } else if (number === 2 || number === 3 || number === 4) {
                            result += 'mjeseca';
                        } else {
                            result += 'mjeseci';
                        }
                        return result;

                      case 'yy':
                        if (number === 1) {
                            result += 'godina';
                        } else if (number === 2 || number === 3 || number === 4) {
                            result += 'godine';
                        } else {
                            result += 'godina';
                        }
                        return result;
                    }
                }
                return moment.defineLocale('hr', {
                    months: 'sječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_'),
                    monthsShort: 'sje._vel._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
                    weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
                    weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
                    weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
                    longDateFormat: {
                        LT: 'H:mm',
                        L: 'DD. MM. YYYY',
                        LL: 'D. MMMM YYYY',
                        LLL: 'D. MMMM YYYY LT',
                        LLLL: 'dddd, D. MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[danas u] LT',
                        nextDay: '[sutra u] LT',
                        nextWeek: function nextWeek() {
                            switch (this.day()) {
                              case 0:
                                return '[u] [nedjelju] [u] LT';

                              case 3:
                                return '[u] [srijedu] [u] LT';

                              case 6:
                                return '[u] [subotu] [u] LT';

                              case 1:
                              case 2:
                              case 4:
                              case 5:
                                return '[u] dddd [u] LT';
                            }
                        },
                        lastDay: '[jučer u] LT',
                        lastWeek: function lastWeek() {
                            switch (this.day()) {
                              case 0:
                              case 3:
                                return '[prošlu] dddd [u] LT';

                              case 6:
                                return '[prošle] [subote] [u] LT';

                              case 1:
                              case 2:
                              case 4:
                              case 5:
                                return '[prošli] dddd [u] LT';
                            }
                        },
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'za %s',
                        past: 'prije %s',
                        s: 'par sekundi',
                        m: translate,
                        mm: translate,
                        h: translate,
                        hh: translate,
                        d: 'dan',
                        dd: translate,
                        M: 'mjesec',
                        MM: translate,
                        y: 'godinu',
                        yy: translate
                    },
                    ordinal: '%d.',
                    week: {
                        dow: 1,
                        doy: 7
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');
                function translate(number, withoutSuffix, key, isFuture) {
                    var num = number, suffix;
                    switch (key) {
                      case 's':
                        return isFuture || withoutSuffix ? 'néhány másodperc' : 'néhány másodperce';

                      case 'm':
                        return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');

                      case 'mm':
                        return num + (isFuture || withoutSuffix ? ' perc' : ' perce');

                      case 'h':
                        return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');

                      case 'hh':
                        return num + (isFuture || withoutSuffix ? ' óra' : ' órája');

                      case 'd':
                        return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');

                      case 'dd':
                        return num + (isFuture || withoutSuffix ? ' nap' : ' napja');

                      case 'M':
                        return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');

                      case 'MM':
                        return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');

                      case 'y':
                        return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');

                      case 'yy':
                        return num + (isFuture || withoutSuffix ? ' év' : ' éve');
                    }
                    return '';
                }
                function week(isFuture) {
                    return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
                }
                return moment.defineLocale('hu', {
                    months: 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),
                    monthsShort: 'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),
                    weekdays: 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
                    weekdaysShort: 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
                    weekdaysMin: 'v_h_k_sze_cs_p_szo'.split('_'),
                    longDateFormat: {
                        LT: 'H:mm',
                        L: 'YYYY.MM.DD.',
                        LL: 'YYYY. MMMM D.',
                        LLL: 'YYYY. MMMM D., LT',
                        LLLL: 'YYYY. MMMM D., dddd LT'
                    },
                    meridiem: function meridiem(hours, minutes, isLower) {
                        if (hours < 12) {
                            return isLower === true ? 'de' : 'DE';
                        } else {
                            return isLower === true ? 'du' : 'DU';
                        }
                    },
                    calendar: {
                        sameDay: '[ma] LT[-kor]',
                        nextDay: '[holnap] LT[-kor]',
                        nextWeek: function nextWeek() {
                            return week.call(this, true);
                        },
                        lastDay: '[tegnap] LT[-kor]',
                        lastWeek: function lastWeek() {
                            return week.call(this, false);
                        },
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: '%s múlva',
                        past: '%s',
                        s: translate,
                        m: translate,
                        mm: translate,
                        h: translate,
                        hh: translate,
                        d: translate,
                        dd: translate,
                        M: translate,
                        MM: translate,
                        y: translate,
                        yy: translate
                    },
                    ordinal: '%d.',
                    week: {
                        dow: 1,
                        doy: 7
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                function monthsCaseReplace(m, format) {
                    var months = {
                        nominative: 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_'),
                        accusative: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_')
                    }, nounCase = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(format) ? 'accusative' : 'nominative';
                    return months[nounCase][m.month()];
                }
                function monthsShortCaseReplace(m, format) {
                    var monthsShort = 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_');
                    return monthsShort[m.month()];
                }
                function weekdaysCaseReplace(m, format) {
                    var weekdays = 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_');
                    return weekdays[m.day()];
                }
                return moment.defineLocale('hy-am', {
                    months: monthsCaseReplace,
                    monthsShort: monthsShortCaseReplace,
                    weekdays: weekdaysCaseReplace,
                    weekdaysShort: 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
                    weekdaysMin: 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD.MM.YYYY',
                        LL: 'D MMMM YYYY թ.',
                        LLL: 'D MMMM YYYY թ., LT',
                        LLLL: 'dddd, D MMMM YYYY թ., LT'
                    },
                    calendar: {
                        sameDay: '[այսօր] LT',
                        nextDay: '[վաղը] LT',
                        lastDay: '[երեկ] LT',
                        nextWeek: function nextWeek() {
                            return 'dddd [օրը ժամը] LT';
                        },
                        lastWeek: function lastWeek() {
                            return '[անցած] dddd [օրը ժամը] LT';
                        },
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: '%s հետո',
                        past: '%s առաջ',
                        s: 'մի քանի վայրկյան',
                        m: 'րոպե',
                        mm: '%d րոպե',
                        h: 'ժամ',
                        hh: '%d ժամ',
                        d: 'օր',
                        dd: '%d օր',
                        M: 'ամիս',
                        MM: '%d ամիս',
                        y: 'տարի',
                        yy: '%d տարի'
                    },
                    meridiem: function meridiem(hour) {
                        if (hour < 4) {
                            return 'գիշերվա';
                        } else if (hour < 12) {
                            return 'առավոտվա';
                        } else if (hour < 17) {
                            return 'ցերեկվա';
                        } else {
                            return 'երեկոյան';
                        }
                    },
                    ordinal: function ordinal(number, period) {
                        switch (period) {
                          case 'DDD':
                          case 'w':
                          case 'W':
                          case 'DDDo':
                            if (number === 1) {
                                return number + '-ին';
                            }
                            return number + '-րդ';

                          default:
                            return number;
                        }
                    },
                    week: {
                        dow: 1,
                        doy: 7
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('id', {
                    months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),
                    monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des'.split('_'),
                    weekdays: 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
                    weekdaysShort: 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
                    weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
                    longDateFormat: {
                        LT: 'HH.mm',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY [pukul] LT',
                        LLLL: 'dddd, D MMMM YYYY [pukul] LT'
                    },
                    meridiem: function meridiem(hours, minutes, isLower) {
                        if (hours < 11) {
                            return 'pagi';
                        } else if (hours < 15) {
                            return 'siang';
                        } else if (hours < 19) {
                            return 'sore';
                        } else {
                            return 'malam';
                        }
                    },
                    calendar: {
                        sameDay: '[Hari ini pukul] LT',
                        nextDay: '[Besok pukul] LT',
                        nextWeek: 'dddd [pukul] LT',
                        lastDay: '[Kemarin pukul] LT',
                        lastWeek: 'dddd [lalu pukul] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'dalam %s',
                        past: '%s yang lalu',
                        s: 'beberapa detik',
                        m: 'semenit',
                        mm: '%d menit',
                        h: 'sejam',
                        hh: '%d jam',
                        d: 'sehari',
                        dd: '%d hari',
                        M: 'sebulan',
                        MM: '%d bulan',
                        y: 'setahun',
                        yy: '%d tahun'
                    },
                    week: {
                        dow: 1,
                        doy: 7
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                function plural(n) {
                    if (n % 100 === 11) {
                        return true;
                    } else if (n % 10 === 1) {
                        return false;
                    }
                    return true;
                }
                function translate(number, withoutSuffix, key, isFuture) {
                    var result = number + ' ';
                    switch (key) {
                      case 's':
                        return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';

                      case 'm':
                        return withoutSuffix ? 'mínúta' : 'mínútu';

                      case 'mm':
                        if (plural(number)) {
                            return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
                        } else if (withoutSuffix) {
                            return result + 'mínúta';
                        }
                        return result + 'mínútu';

                      case 'hh':
                        if (plural(number)) {
                            return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
                        }
                        return result + 'klukkustund';

                      case 'd':
                        if (withoutSuffix) {
                            return 'dagur';
                        }
                        return isFuture ? 'dag' : 'degi';

                      case 'dd':
                        if (plural(number)) {
                            if (withoutSuffix) {
                                return result + 'dagar';
                            }
                            return result + (isFuture ? 'daga' : 'dögum');
                        } else if (withoutSuffix) {
                            return result + 'dagur';
                        }
                        return result + (isFuture ? 'dag' : 'degi');

                      case 'M':
                        if (withoutSuffix) {
                            return 'mánuður';
                        }
                        return isFuture ? 'mánuð' : 'mánuði';

                      case 'MM':
                        if (plural(number)) {
                            if (withoutSuffix) {
                                return result + 'mánuðir';
                            }
                            return result + (isFuture ? 'mánuði' : 'mánuðum');
                        } else if (withoutSuffix) {
                            return result + 'mánuður';
                        }
                        return result + (isFuture ? 'mánuð' : 'mánuði');

                      case 'y':
                        return withoutSuffix || isFuture ? 'ár' : 'ári';

                      case 'yy':
                        if (plural(number)) {
                            return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
                        }
                        return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
                    }
                }
                return moment.defineLocale('is', {
                    months: 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split('_'),
                    monthsShort: 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
                    weekdays: 'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split('_'),
                    weekdaysShort: 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
                    weekdaysMin: 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
                    longDateFormat: {
                        LT: 'H:mm',
                        L: 'DD/MM/YYYY',
                        LL: 'D. MMMM YYYY',
                        LLL: 'D. MMMM YYYY [kl.] LT',
                        LLLL: 'dddd, D. MMMM YYYY [kl.] LT'
                    },
                    calendar: {
                        sameDay: '[í dag kl.] LT',
                        nextDay: '[á morgun kl.] LT',
                        nextWeek: 'dddd [kl.] LT',
                        lastDay: '[í gær kl.] LT',
                        lastWeek: '[síðasta] dddd [kl.] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'eftir %s',
                        past: 'fyrir %s síðan',
                        s: translate,
                        m: translate,
                        mm: translate,
                        h: 'klukkustund',
                        hh: translate,
                        d: translate,
                        dd: translate,
                        M: translate,
                        MM: translate,
                        y: translate,
                        yy: translate
                    },
                    ordinal: '%d.',
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('it', {
                    months: 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
                    monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
                    weekdays: 'Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato'.split('_'),
                    weekdaysShort: 'Dom_Lun_Mar_Mer_Gio_Ven_Sab'.split('_'),
                    weekdaysMin: 'D_L_Ma_Me_G_V_S'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY LT',
                        LLLL: 'dddd, D MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[Oggi alle] LT',
                        nextDay: '[Domani alle] LT',
                        nextWeek: 'dddd [alle] LT',
                        lastDay: '[Ieri alle] LT',
                        lastWeek: '[lo scorso] dddd [alle] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: function future(s) {
                            return (/^[0-9].+$/.test(s) ? 'tra' : 'in') + ' ' + s;
                        },
                        past: '%s fa',
                        s: 'alcuni secondi',
                        m: 'un minuto',
                        mm: '%d minuti',
                        h: 'un\'ora',
                        hh: '%d ore',
                        d: 'un giorno',
                        dd: '%d giorni',
                        M: 'un mese',
                        MM: '%d mesi',
                        y: 'un anno',
                        yy: '%d anni'
                    },
                    ordinal: '%dº',
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('ja', {
                    months: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
                    monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
                    weekdays: '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
                    weekdaysShort: '日_月_火_水_木_金_土'.split('_'),
                    weekdaysMin: '日_月_火_水_木_金_土'.split('_'),
                    longDateFormat: {
                        LT: 'Ah時m分',
                        L: 'YYYY/MM/DD',
                        LL: 'YYYY年M月D日',
                        LLL: 'YYYY年M月D日LT',
                        LLLL: 'YYYY年M月D日LT dddd'
                    },
                    meridiem: function meridiem(hour, minute, isLower) {
                        if (hour < 12) {
                            return '午前';
                        } else {
                            return '午後';
                        }
                    },
                    calendar: {
                        sameDay: '[今日] LT',
                        nextDay: '[明日] LT',
                        nextWeek: '[来週]dddd LT',
                        lastDay: '[昨日] LT',
                        lastWeek: '[前週]dddd LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: '%s後',
                        past: '%s前',
                        s: '数秒',
                        m: '1分',
                        mm: '%d分',
                        h: '1時間',
                        hh: '%d時間',
                        d: '1日',
                        dd: '%d日',
                        M: '1ヶ月',
                        MM: '%dヶ月',
                        y: '1年',
                        yy: '%d年'
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                function monthsCaseReplace(m, format) {
                    var months = {
                        nominative: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
                        accusative: 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
                    }, nounCase = /D[oD] *MMMM?/.test(format) ? 'accusative' : 'nominative';
                    return months[nounCase][m.month()];
                }
                function weekdaysCaseReplace(m, format) {
                    var weekdays = {
                        nominative: 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
                        accusative: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_')
                    }, nounCase = /(წინა|შემდეგ)/.test(format) ? 'accusative' : 'nominative';
                    return weekdays[nounCase][m.day()];
                }
                return moment.defineLocale('ka', {
                    months: monthsCaseReplace,
                    monthsShort: 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
                    weekdays: weekdaysCaseReplace,
                    weekdaysShort: 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
                    weekdaysMin: 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
                    longDateFormat: {
                        LT: 'h:mm A',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY LT',
                        LLLL: 'dddd, D MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[დღეს] LT[-ზე]',
                        nextDay: '[ხვალ] LT[-ზე]',
                        lastDay: '[გუშინ] LT[-ზე]',
                        nextWeek: '[შემდეგ] dddd LT[-ზე]',
                        lastWeek: '[წინა] dddd LT-ზე',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: function future(s) {
                            return /(წამი|წუთი|საათი|წელი)/.test(s) ? s.replace(/ი$/, 'ში') : s + 'ში';
                        },
                        past: function past(s) {
                            if (/(წამი|წუთი|საათი|დღე|თვე)/.test(s)) {
                                return s.replace(/(ი|ე)$/, 'ის წინ');
                            }
                            if (/წელი/.test(s)) {
                                return s.replace(/წელი$/, 'წლის წინ');
                            }
                        },
                        s: 'რამდენიმე წამი',
                        m: 'წუთი',
                        mm: '%d წუთი',
                        h: 'საათი',
                        hh: '%d საათი',
                        d: 'დღე',
                        dd: '%d დღე',
                        M: 'თვე',
                        MM: '%d თვე',
                        y: 'წელი',
                        yy: '%d წელი'
                    },
                    ordinal: function ordinal(number) {
                        if (number === 0) {
                            return number;
                        }
                        if (number === 1) {
                            return number + '-ლი';
                        }
                        if (number < 20 || number <= 100 && number % 20 === 0 || number % 100 === 0) {
                            return 'მე-' + number;
                        }
                        return number + '-ე';
                    },
                    week: {
                        dow: 1,
                        doy: 7
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('km', {
                    months: 'មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
                    monthsShort: 'មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
                    weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
                    weekdaysShort: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
                    weekdaysMin: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY LT',
                        LLLL: 'dddd, D MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[ថ្ងៃនៈ ម៉ោង] LT',
                        nextDay: '[ស្អែក ម៉ោង] LT',
                        nextWeek: 'dddd [ម៉ោង] LT',
                        lastDay: '[ម្សិលមិញ ម៉ោង] LT',
                        lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: '%sទៀត',
                        past: '%sមុន',
                        s: 'ប៉ុន្មានវិនាទី',
                        m: 'មួយនាទី',
                        mm: '%d នាទី',
                        h: 'មួយម៉ោង',
                        hh: '%d ម៉ោង',
                        d: 'មួយថ្ងៃ',
                        dd: '%d ថ្ងៃ',
                        M: 'មួយខែ',
                        MM: '%d ខែ',
                        y: 'មួយឆ្នាំ',
                        yy: '%d ឆ្នាំ'
                    },
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('ko', {
                    months: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
                    monthsShort: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
                    weekdays: '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
                    weekdaysShort: '일_월_화_수_목_금_토'.split('_'),
                    weekdaysMin: '일_월_화_수_목_금_토'.split('_'),
                    longDateFormat: {
                        LT: 'A h시 m분',
                        L: 'YYYY.MM.DD',
                        LL: 'YYYY년 MMMM D일',
                        LLL: 'YYYY년 MMMM D일 LT',
                        LLLL: 'YYYY년 MMMM D일 dddd LT'
                    },
                    meridiem: function meridiem(hour, minute, isUpper) {
                        return hour < 12 ? '오전' : '오후';
                    },
                    calendar: {
                        sameDay: '오늘 LT',
                        nextDay: '내일 LT',
                        nextWeek: 'dddd LT',
                        lastDay: '어제 LT',
                        lastWeek: '지난주 dddd LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: '%s 후',
                        past: '%s 전',
                        s: '몇초',
                        ss: '%d초',
                        m: '일분',
                        mm: '%d분',
                        h: '한시간',
                        hh: '%d시간',
                        d: '하루',
                        dd: '%d일',
                        M: '한달',
                        MM: '%d달',
                        y: '일년',
                        yy: '%d년'
                    },
                    ordinal: '%d일',
                    meridiemParse: /(오전|오후)/,
                    isPM: function isPM(token) {
                        return token === '오후';
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                function processRelativeTime(number, withoutSuffix, key, isFuture) {
                    var format = {
                        m: [ 'eng Minutt', 'enger Minutt' ],
                        h: [ 'eng Stonn', 'enger Stonn' ],
                        d: [ 'een Dag', 'engem Dag' ],
                        M: [ 'ee Mount', 'engem Mount' ],
                        y: [ 'ee Joer', 'engem Joer' ]
                    };
                    return withoutSuffix ? format[key][0] : format[key][1];
                }
                function processFutureTime(string) {
                    var number = string.substr(0, string.indexOf(' '));
                    if (eifelerRegelAppliesToNumber(number)) {
                        return 'a ' + string;
                    }
                    return 'an ' + string;
                }
                function processPastTime(string) {
                    var number = string.substr(0, string.indexOf(' '));
                    if (eifelerRegelAppliesToNumber(number)) {
                        return 'viru ' + string;
                    }
                    return 'virun ' + string;
                }
                function eifelerRegelAppliesToNumber(number) {
                    number = parseInt(number, 10);
                    if (isNaN(number)) {
                        return false;
                    }
                    if (number < 0) {
                        return true;
                    } else if (number < 10) {
                        if (4 <= number && number <= 7) {
                            return true;
                        }
                        return false;
                    } else if (number < 100) {
                        var lastDigit = number % 10, firstDigit = number / 10;
                        if (lastDigit === 0) {
                            return eifelerRegelAppliesToNumber(firstDigit);
                        }
                        return eifelerRegelAppliesToNumber(lastDigit);
                    } else if (number < 1e4) {
                        while (number >= 10) {
                            number = number / 10;
                        }
                        return eifelerRegelAppliesToNumber(number);
                    } else {
                        number = number / 1e3;
                        return eifelerRegelAppliesToNumber(number);
                    }
                }
                return moment.defineLocale('lb', {
                    months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
                    monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
                    weekdays: 'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),
                    weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
                    weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
                    longDateFormat: {
                        LT: 'H:mm [Auer]',
                        L: 'DD.MM.YYYY',
                        LL: 'D. MMMM YYYY',
                        LLL: 'D. MMMM YYYY LT',
                        LLLL: 'dddd, D. MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[Haut um] LT',
                        sameElse: 'L',
                        nextDay: '[Muer um] LT',
                        nextWeek: 'dddd [um] LT',
                        lastDay: '[Gëschter um] LT',
                        lastWeek: function lastWeek() {
                            switch (this.day()) {
                              case 2:
                              case 4:
                                return '[Leschten] dddd [um] LT';

                              default:
                                return '[Leschte] dddd [um] LT';
                            }
                        }
                    },
                    relativeTime: {
                        future: processFutureTime,
                        past: processPastTime,
                        s: 'e puer Sekonnen',
                        m: processRelativeTime,
                        mm: '%d Minutten',
                        h: processRelativeTime,
                        hh: '%d Stonnen',
                        d: processRelativeTime,
                        dd: '%d Deeg',
                        M: processRelativeTime,
                        MM: '%d Méint',
                        y: processRelativeTime,
                        yy: '%d Joer'
                    },
                    ordinal: '%d.',
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                var units = {
                    m: 'minutė_minutės_minutę',
                    mm: 'minutės_minučių_minutes',
                    h: 'valanda_valandos_valandą',
                    hh: 'valandos_valandų_valandas',
                    d: 'diena_dienos_dieną',
                    dd: 'dienos_dienų_dienas',
                    M: 'mėnuo_mėnesio_mėnesį',
                    MM: 'mėnesiai_mėnesių_mėnesius',
                    y: 'metai_metų_metus',
                    yy: 'metai_metų_metus'
                }, weekDays = 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_');
                function translateSeconds(number, withoutSuffix, key, isFuture) {
                    if (withoutSuffix) {
                        return 'kelios sekundės';
                    } else {
                        return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
                    }
                }
                function translateSingular(number, withoutSuffix, key, isFuture) {
                    return withoutSuffix ? forms(key)[0] : isFuture ? forms(key)[1] : forms(key)[2];
                }
                function special(number) {
                    return number % 10 === 0 || number > 10 && number < 20;
                }
                function forms(key) {
                    return units[key].split('_');
                }
                function translate(number, withoutSuffix, key, isFuture) {
                    var result = number + ' ';
                    if (number === 1) {
                        return result + translateSingular(number, withoutSuffix, key[0], isFuture);
                    } else if (withoutSuffix) {
                        return result + (special(number) ? forms(key)[1] : forms(key)[0]);
                    } else {
                        if (isFuture) {
                            return result + forms(key)[1];
                        } else {
                            return result + (special(number) ? forms(key)[1] : forms(key)[2]);
                        }
                    }
                }
                function relativeWeekDay(moment, format) {
                    var nominative = format.indexOf('dddd HH:mm') === -1, weekDay = weekDays[moment.day()];
                    return nominative ? weekDay : weekDay.substring(0, weekDay.length - 2) + 'į';
                }
                return moment.defineLocale('lt', {
                    months: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),
                    monthsShort: 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
                    weekdays: relativeWeekDay,
                    weekdaysShort: 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
                    weekdaysMin: 'S_P_A_T_K_Pn_Š'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'YYYY-MM-DD',
                        LL: 'YYYY [m.] MMMM D [d.]',
                        LLL: 'YYYY [m.] MMMM D [d.], LT [val.]',
                        LLLL: 'YYYY [m.] MMMM D [d.], dddd, LT [val.]',
                        l: 'YYYY-MM-DD',
                        ll: 'YYYY [m.] MMMM D [d.]',
                        lll: 'YYYY [m.] MMMM D [d.], LT [val.]',
                        llll: 'YYYY [m.] MMMM D [d.], ddd, LT [val.]'
                    },
                    calendar: {
                        sameDay: '[Šiandien] LT',
                        nextDay: '[Rytoj] LT',
                        nextWeek: 'dddd LT',
                        lastDay: '[Vakar] LT',
                        lastWeek: '[Praėjusį] dddd LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'po %s',
                        past: 'prieš %s',
                        s: translateSeconds,
                        m: translateSingular,
                        mm: translate,
                        h: translateSingular,
                        hh: translate,
                        d: translateSingular,
                        dd: translate,
                        M: translateSingular,
                        MM: translate,
                        y: translateSingular,
                        yy: translate
                    },
                    ordinal: function ordinal(number) {
                        return number + '-oji';
                    },
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                var units = {
                    mm: 'minūti_minūtes_minūte_minūtes',
                    hh: 'stundu_stundas_stunda_stundas',
                    dd: 'dienu_dienas_diena_dienas',
                    MM: 'mēnesi_mēnešus_mēnesis_mēneši',
                    yy: 'gadu_gadus_gads_gadi'
                };
                function format(word, number, withoutSuffix) {
                    var forms = word.split('_');
                    if (withoutSuffix) {
                        return number % 10 === 1 && number !== 11 ? forms[2] : forms[3];
                    } else {
                        return number % 10 === 1 && number !== 11 ? forms[0] : forms[1];
                    }
                }
                function relativeTimeWithPlural(number, withoutSuffix, key) {
                    return number + ' ' + format(units[key], number, withoutSuffix);
                }
                return moment.defineLocale('lv', {
                    months: 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
                    monthsShort: 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
                    weekdays: 'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split('_'),
                    weekdaysShort: 'Sv_P_O_T_C_Pk_S'.split('_'),
                    weekdaysMin: 'Sv_P_O_T_C_Pk_S'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD.MM.YYYY',
                        LL: 'YYYY. [gada] D. MMMM',
                        LLL: 'YYYY. [gada] D. MMMM, LT',
                        LLLL: 'YYYY. [gada] D. MMMM, dddd, LT'
                    },
                    calendar: {
                        sameDay: '[Šodien pulksten] LT',
                        nextDay: '[Rīt pulksten] LT',
                        nextWeek: 'dddd [pulksten] LT',
                        lastDay: '[Vakar pulksten] LT',
                        lastWeek: '[Pagājušā] dddd [pulksten] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: '%s vēlāk',
                        past: '%s agrāk',
                        s: 'dažas sekundes',
                        m: 'minūti',
                        mm: relativeTimeWithPlural,
                        h: 'stundu',
                        hh: relativeTimeWithPlural,
                        d: 'dienu',
                        dd: relativeTimeWithPlural,
                        M: 'mēnesi',
                        MM: relativeTimeWithPlural,
                        y: 'gadu',
                        yy: relativeTimeWithPlural
                    },
                    ordinal: '%d.',
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('mk', {
                    months: 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split('_'),
                    monthsShort: 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
                    weekdays: 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split('_'),
                    weekdaysShort: 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
                    weekdaysMin: 'нe_пo_вт_ср_че_пе_сa'.split('_'),
                    longDateFormat: {
                        LT: 'H:mm',
                        L: 'D.MM.YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY LT',
                        LLLL: 'dddd, D MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[Денес во] LT',
                        nextDay: '[Утре во] LT',
                        nextWeek: 'dddd [во] LT',
                        lastDay: '[Вчера во] LT',
                        lastWeek: function lastWeek() {
                            switch (this.day()) {
                              case 0:
                              case 3:
                              case 6:
                                return '[Во изминатата] dddd [во] LT';

                              case 1:
                              case 2:
                              case 4:
                              case 5:
                                return '[Во изминатиот] dddd [во] LT';
                            }
                        },
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'после %s',
                        past: 'пред %s',
                        s: 'неколку секунди',
                        m: 'минута',
                        mm: '%d минути',
                        h: 'час',
                        hh: '%d часа',
                        d: 'ден',
                        dd: '%d дена',
                        M: 'месец',
                        MM: '%d месеци',
                        y: 'година',
                        yy: '%d години'
                    },
                    ordinal: function ordinal(number) {
                        var lastDigit = number % 10, last2Digits = number % 100;
                        if (number === 0) {
                            return number + '-ев';
                        } else if (last2Digits === 0) {
                            return number + '-ен';
                        } else if (last2Digits > 10 && last2Digits < 20) {
                            return number + '-ти';
                        } else if (lastDigit === 1) {
                            return number + '-ви';
                        } else if (lastDigit === 2) {
                            return number + '-ри';
                        } else if (lastDigit === 7 || lastDigit === 8) {
                            return number + '-ми';
                        } else {
                            return number + '-ти';
                        }
                    },
                    week: {
                        dow: 1,
                        doy: 7
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('ml', {
                    months: 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split('_'),
                    monthsShort: 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split('_'),
                    weekdays: 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split('_'),
                    weekdaysShort: 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
                    weekdaysMin: 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
                    longDateFormat: {
                        LT: 'A h:mm -നു',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY, LT',
                        LLLL: 'dddd, D MMMM YYYY, LT'
                    },
                    calendar: {
                        sameDay: '[ഇന്ന്] LT',
                        nextDay: '[നാളെ] LT',
                        nextWeek: 'dddd, LT',
                        lastDay: '[ഇന്നലെ] LT',
                        lastWeek: '[കഴിഞ്ഞ] dddd, LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: '%s കഴിഞ്ഞ്',
                        past: '%s മുൻപ്',
                        s: 'അൽപ നിമിഷങ്ങൾ',
                        m: 'ഒരു മിനിറ്റ്',
                        mm: '%d മിനിറ്റ്',
                        h: 'ഒരു മണിക്കൂർ',
                        hh: '%d മണിക്കൂർ',
                        d: 'ഒരു ദിവസം',
                        dd: '%d ദിവസം',
                        M: 'ഒരു മാസം',
                        MM: '%d മാസം',
                        y: 'ഒരു വർഷം',
                        yy: '%d വർഷം'
                    },
                    meridiem: function meridiem(hour, minute, isLower) {
                        if (hour < 4) {
                            return 'രാത്രി';
                        } else if (hour < 12) {
                            return 'രാവിലെ';
                        } else if (hour < 17) {
                            return 'ഉച്ച കഴിഞ്ഞ്';
                        } else if (hour < 20) {
                            return 'വൈകുന്നേരം';
                        } else {
                            return 'രാത്രി';
                        }
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                var symbolMap = {
                    '1': '१',
                    '2': '२',
                    '3': '३',
                    '4': '४',
                    '5': '५',
                    '6': '६',
                    '7': '७',
                    '8': '८',
                    '9': '९',
                    '0': '०'
                }, numberMap = {
                    '१': '1',
                    '२': '2',
                    '३': '3',
                    '४': '4',
                    '५': '5',
                    '६': '6',
                    '७': '7',
                    '८': '8',
                    '९': '9',
                    '०': '0'
                };
                return moment.defineLocale('mr', {
                    months: 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),
                    monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),
                    weekdays: 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
                    weekdaysShort: 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
                    weekdaysMin: 'र_सो_मं_बु_गु_शु_श'.split('_'),
                    longDateFormat: {
                        LT: 'A h:mm वाजता',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY, LT',
                        LLLL: 'dddd, D MMMM YYYY, LT'
                    },
                    calendar: {
                        sameDay: '[आज] LT',
                        nextDay: '[उद्या] LT',
                        nextWeek: 'dddd, LT',
                        lastDay: '[काल] LT',
                        lastWeek: '[मागील] dddd, LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: '%s नंतर',
                        past: '%s पूर्वी',
                        s: 'सेकंद',
                        m: 'एक मिनिट',
                        mm: '%d मिनिटे',
                        h: 'एक तास',
                        hh: '%d तास',
                        d: 'एक दिवस',
                        dd: '%d दिवस',
                        M: 'एक महिना',
                        MM: '%d महिने',
                        y: 'एक वर्ष',
                        yy: '%d वर्षे'
                    },
                    preparse: function preparse(string) {
                        return string.replace(/[१२३४५६७८९०]/g, function(match) {
                            return numberMap[match];
                        });
                    },
                    postformat: function postformat(string) {
                        return string.replace(/\d/g, function(match) {
                            return symbolMap[match];
                        });
                    },
                    meridiem: function meridiem(hour, minute, isLower) {
                        if (hour < 4) {
                            return 'रात्री';
                        } else if (hour < 10) {
                            return 'सकाळी';
                        } else if (hour < 17) {
                            return 'दुपारी';
                        } else if (hour < 20) {
                            return 'सायंकाळी';
                        } else {
                            return 'रात्री';
                        }
                    },
                    week: {
                        dow: 0,
                        doy: 6
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('ms-my', {
                    months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
                    monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
                    weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
                    weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
                    weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
                    longDateFormat: {
                        LT: 'HH.mm',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY [pukul] LT',
                        LLLL: 'dddd, D MMMM YYYY [pukul] LT'
                    },
                    meridiem: function meridiem(hours, minutes, isLower) {
                        if (hours < 11) {
                            return 'pagi';
                        } else if (hours < 15) {
                            return 'tengahari';
                        } else if (hours < 19) {
                            return 'petang';
                        } else {
                            return 'malam';
                        }
                    },
                    calendar: {
                        sameDay: '[Hari ini pukul] LT',
                        nextDay: '[Esok pukul] LT',
                        nextWeek: 'dddd [pukul] LT',
                        lastDay: '[Kelmarin pukul] LT',
                        lastWeek: 'dddd [lepas pukul] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'dalam %s',
                        past: '%s yang lepas',
                        s: 'beberapa saat',
                        m: 'seminit',
                        mm: '%d minit',
                        h: 'sejam',
                        hh: '%d jam',
                        d: 'sehari',
                        dd: '%d hari',
                        M: 'sebulan',
                        MM: '%d bulan',
                        y: 'setahun',
                        yy: '%d tahun'
                    },
                    week: {
                        dow: 1,
                        doy: 7
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                var symbolMap = {
                    '1': '၁',
                    '2': '၂',
                    '3': '၃',
                    '4': '၄',
                    '5': '၅',
                    '6': '၆',
                    '7': '၇',
                    '8': '၈',
                    '9': '၉',
                    '0': '၀'
                }, numberMap = {
                    '၁': '1',
                    '၂': '2',
                    '၃': '3',
                    '၄': '4',
                    '၅': '5',
                    '၆': '6',
                    '၇': '7',
                    '၈': '8',
                    '၉': '9',
                    '၀': '0'
                };
                return moment.defineLocale('my', {
                    months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split('_'),
                    monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
                    weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split('_'),
                    weekdaysShort: 'နွေ_လာ_င်္ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
                    weekdaysMin: 'နွေ_လာ_င်္ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY LT',
                        LLLL: 'dddd D MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[ယနေ.] LT [မှာ]',
                        nextDay: '[မနက်ဖြန်] LT [မှာ]',
                        nextWeek: 'dddd LT [မှာ]',
                        lastDay: '[မနေ.က] LT [မှာ]',
                        lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'လာမည့် %s မှာ',
                        past: 'လွန်ခဲ့သော %s က',
                        s: 'စက္ကန်.အနည်းငယ်',
                        m: 'တစ်မိနစ်',
                        mm: '%d မိနစ်',
                        h: 'တစ်နာရီ',
                        hh: '%d နာရီ',
                        d: 'တစ်ရက်',
                        dd: '%d ရက်',
                        M: 'တစ်လ',
                        MM: '%d လ',
                        y: 'တစ်နှစ်',
                        yy: '%d နှစ်'
                    },
                    preparse: function preparse(string) {
                        return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function(match) {
                            return numberMap[match];
                        });
                    },
                    postformat: function postformat(string) {
                        return string.replace(/\d/g, function(match) {
                            return symbolMap[match];
                        });
                    },
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('nb', {
                    months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
                    monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
                    weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
                    weekdaysShort: 'søn_man_tirs_ons_tors_fre_lør'.split('_'),
                    weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),
                    longDateFormat: {
                        LT: 'H.mm',
                        L: 'DD.MM.YYYY',
                        LL: 'D. MMMM YYYY',
                        LLL: 'D. MMMM YYYY [kl.] LT',
                        LLLL: 'dddd D. MMMM YYYY [kl.] LT'
                    },
                    calendar: {
                        sameDay: '[i dag kl.] LT',
                        nextDay: '[i morgen kl.] LT',
                        nextWeek: 'dddd [kl.] LT',
                        lastDay: '[i går kl.] LT',
                        lastWeek: '[forrige] dddd [kl.] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'om %s',
                        past: 'for %s siden',
                        s: 'noen sekunder',
                        m: 'ett minutt',
                        mm: '%d minutter',
                        h: 'en time',
                        hh: '%d timer',
                        d: 'en dag',
                        dd: '%d dager',
                        M: 'en måned',
                        MM: '%d måneder',
                        y: 'ett år',
                        yy: '%d år'
                    },
                    ordinal: '%d.',
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                var symbolMap = {
                    '1': '१',
                    '2': '२',
                    '3': '३',
                    '4': '४',
                    '5': '५',
                    '6': '६',
                    '7': '७',
                    '8': '८',
                    '9': '९',
                    '0': '०'
                }, numberMap = {
                    '१': '1',
                    '२': '2',
                    '३': '3',
                    '४': '4',
                    '५': '5',
                    '६': '6',
                    '७': '7',
                    '८': '8',
                    '९': '9',
                    '०': '0'
                };
                return moment.defineLocale('ne', {
                    months: 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split('_'),
                    monthsShort: 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split('_'),
                    weekdays: 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split('_'),
                    weekdaysShort: 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
                    weekdaysMin: 'आइ._सो._मङ्_बु._बि._शु._श.'.split('_'),
                    longDateFormat: {
                        LT: 'Aको h:mm बजे',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY, LT',
                        LLLL: 'dddd, D MMMM YYYY, LT'
                    },
                    preparse: function preparse(string) {
                        return string.replace(/[१२३४५६७८९०]/g, function(match) {
                            return numberMap[match];
                        });
                    },
                    postformat: function postformat(string) {
                        return string.replace(/\d/g, function(match) {
                            return symbolMap[match];
                        });
                    },
                    meridiem: function meridiem(hour, minute, isLower) {
                        if (hour < 3) {
                            return 'राती';
                        } else if (hour < 10) {
                            return 'बिहान';
                        } else if (hour < 15) {
                            return 'दिउँसो';
                        } else if (hour < 18) {
                            return 'बेलुका';
                        } else if (hour < 20) {
                            return 'साँझ';
                        } else {
                            return 'राती';
                        }
                    },
                    calendar: {
                        sameDay: '[आज] LT',
                        nextDay: '[भोली] LT',
                        nextWeek: '[आउँदो] dddd[,] LT',
                        lastDay: '[हिजो] LT',
                        lastWeek: '[गएको] dddd[,] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: '%sमा',
                        past: '%s अगाडी',
                        s: 'केही समय',
                        m: 'एक मिनेट',
                        mm: '%d मिनेट',
                        h: 'एक घण्टा',
                        hh: '%d घण्टा',
                        d: 'एक दिन',
                        dd: '%d दिन',
                        M: 'एक महिना',
                        MM: '%d महिना',
                        y: 'एक बर्ष',
                        yy: '%d बर्ष'
                    },
                    week: {
                        dow: 1,
                        doy: 7
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'), monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');
                return moment.defineLocale('nl', {
                    months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
                    monthsShort: function monthsShort(m, format) {
                        if (/-MMM-/.test(format)) {
                            return monthsShortWithoutDots[m.month()];
                        } else {
                            return monthsShortWithDots[m.month()];
                        }
                    },
                    weekdays: 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
                    weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
                    weekdaysMin: 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD-MM-YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY LT',
                        LLLL: 'dddd D MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[vandaag om] LT',
                        nextDay: '[morgen om] LT',
                        nextWeek: 'dddd [om] LT',
                        lastDay: '[gisteren om] LT',
                        lastWeek: '[afgelopen] dddd [om] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'over %s',
                        past: '%s geleden',
                        s: 'een paar seconden',
                        m: 'één minuut',
                        mm: '%d minuten',
                        h: 'één uur',
                        hh: '%d uur',
                        d: 'één dag',
                        dd: '%d dagen',
                        M: 'één maand',
                        MM: '%d maanden',
                        y: 'één jaar',
                        yy: '%d jaar'
                    },
                    ordinal: function ordinal(number) {
                        return number + (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de');
                    },
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('nn', {
                    months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
                    monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
                    weekdays: 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
                    weekdaysShort: 'sun_mån_tys_ons_tor_fre_lau'.split('_'),
                    weekdaysMin: 'su_må_ty_on_to_fr_lø'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD.MM.YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY LT',
                        LLLL: 'dddd D MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[I dag klokka] LT',
                        nextDay: '[I morgon klokka] LT',
                        nextWeek: 'dddd [klokka] LT',
                        lastDay: '[I går klokka] LT',
                        lastWeek: '[Føregåande] dddd [klokka] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'om %s',
                        past: 'for %s sidan',
                        s: 'nokre sekund',
                        m: 'eit minutt',
                        mm: '%d minutt',
                        h: 'ein time',
                        hh: '%d timar',
                        d: 'ein dag',
                        dd: '%d dagar',
                        M: 'ein månad',
                        MM: '%d månader',
                        y: 'eit år',
                        yy: '%d år'
                    },
                    ordinal: '%d.',
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                var monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_'), monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');
                function plural(n) {
                    return n % 10 < 5 && n % 10 > 1 && ~~(n / 10) % 10 !== 1;
                }
                function translate(number, withoutSuffix, key) {
                    var result = number + ' ';
                    switch (key) {
                      case 'm':
                        return withoutSuffix ? 'minuta' : 'minutę';

                      case 'mm':
                        return result + (plural(number) ? 'minuty' : 'minut');

                      case 'h':
                        return withoutSuffix ? 'godzina' : 'godzinę';

                      case 'hh':
                        return result + (plural(number) ? 'godziny' : 'godzin');

                      case 'MM':
                        return result + (plural(number) ? 'miesiące' : 'miesięcy');

                      case 'yy':
                        return result + (plural(number) ? 'lata' : 'lat');
                    }
                }
                return moment.defineLocale('pl', {
                    months: function months(momentToFormat, format) {
                        if (/D MMMM/.test(format)) {
                            return monthsSubjective[momentToFormat.month()];
                        } else {
                            return monthsNominative[momentToFormat.month()];
                        }
                    },
                    monthsShort: 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
                    weekdays: 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
                    weekdaysShort: 'nie_pon_wt_śr_czw_pt_sb'.split('_'),
                    weekdaysMin: 'N_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD.MM.YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY LT',
                        LLLL: 'dddd, D MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[Dziś o] LT',
                        nextDay: '[Jutro o] LT',
                        nextWeek: '[W] dddd [o] LT',
                        lastDay: '[Wczoraj o] LT',
                        lastWeek: function lastWeek() {
                            switch (this.day()) {
                              case 0:
                                return '[W zeszłą niedzielę o] LT';

                              case 3:
                                return '[W zeszłą środę o] LT';

                              case 6:
                                return '[W zeszłą sobotę o] LT';

                              default:
                                return '[W zeszły] dddd [o] LT';
                            }
                        },
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'za %s',
                        past: '%s temu',
                        s: 'kilka sekund',
                        m: translate,
                        mm: translate,
                        h: translate,
                        hh: translate,
                        d: '1 dzień',
                        dd: '%d dni',
                        M: 'miesiąc',
                        MM: translate,
                        y: 'rok',
                        yy: translate
                    },
                    ordinal: '%d.',
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('pt-br', {
                    months: 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split('_'),
                    monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
                    weekdays: 'domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado'.split('_'),
                    weekdaysShort: 'dom_seg_ter_qua_qui_sex_sáb'.split('_'),
                    weekdaysMin: 'dom_2ª_3ª_4ª_5ª_6ª_sáb'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD/MM/YYYY',
                        LL: 'D [de] MMMM [de] YYYY',
                        LLL: 'D [de] MMMM [de] YYYY [às] LT',
                        LLLL: 'dddd, D [de] MMMM [de] YYYY [às] LT'
                    },
                    calendar: {
                        sameDay: '[Hoje às] LT',
                        nextDay: '[Amanhã às] LT',
                        nextWeek: 'dddd [às] LT',
                        lastDay: '[Ontem às] LT',
                        lastWeek: function lastWeek() {
                            return this.day() === 0 || this.day() === 6 ? '[Último] dddd [às] LT' : '[Última] dddd [às] LT';
                        },
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'em %s',
                        past: '%s atrás',
                        s: 'segundos',
                        m: 'um minuto',
                        mm: '%d minutos',
                        h: 'uma hora',
                        hh: '%d horas',
                        d: 'um dia',
                        dd: '%d dias',
                        M: 'um mês',
                        MM: '%d meses',
                        y: 'um ano',
                        yy: '%d anos'
                    },
                    ordinal: '%dº'
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('pt', {
                    months: 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split('_'),
                    monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
                    weekdays: 'domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado'.split('_'),
                    weekdaysShort: 'dom_seg_ter_qua_qui_sex_sáb'.split('_'),
                    weekdaysMin: 'dom_2ª_3ª_4ª_5ª_6ª_sáb'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD/MM/YYYY',
                        LL: 'D [de] MMMM [de] YYYY',
                        LLL: 'D [de] MMMM [de] YYYY LT',
                        LLLL: 'dddd, D [de] MMMM [de] YYYY LT'
                    },
                    calendar: {
                        sameDay: '[Hoje às] LT',
                        nextDay: '[Amanhã às] LT',
                        nextWeek: 'dddd [às] LT',
                        lastDay: '[Ontem às] LT',
                        lastWeek: function lastWeek() {
                            return this.day() === 0 || this.day() === 6 ? '[Último] dddd [às] LT' : '[Última] dddd [às] LT';
                        },
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'em %s',
                        past: 'há %s',
                        s: 'segundos',
                        m: 'um minuto',
                        mm: '%d minutos',
                        h: 'uma hora',
                        hh: '%d horas',
                        d: 'um dia',
                        dd: '%d dias',
                        M: 'um mês',
                        MM: '%d meses',
                        y: 'um ano',
                        yy: '%d anos'
                    },
                    ordinal: '%dº',
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                function relativeTimeWithPlural(number, withoutSuffix, key) {
                    var format = {
                        mm: 'minute',
                        hh: 'ore',
                        dd: 'zile',
                        MM: 'luni',
                        yy: 'ani'
                    }, separator = ' ';
                    if (number % 100 >= 20 || number >= 100 && number % 100 === 0) {
                        separator = ' de ';
                    }
                    return number + separator + format[key];
                }
                return moment.defineLocale('ro', {
                    months: 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
                    monthsShort: 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
                    weekdays: 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
                    weekdaysShort: 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
                    weekdaysMin: 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
                    longDateFormat: {
                        LT: 'H:mm',
                        L: 'DD.MM.YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY H:mm',
                        LLLL: 'dddd, D MMMM YYYY H:mm'
                    },
                    calendar: {
                        sameDay: '[azi la] LT',
                        nextDay: '[mâine la] LT',
                        nextWeek: 'dddd [la] LT',
                        lastDay: '[ieri la] LT',
                        lastWeek: '[fosta] dddd [la] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'peste %s',
                        past: '%s în urmă',
                        s: 'câteva secunde',
                        m: 'un minut',
                        mm: relativeTimeWithPlural,
                        h: 'o oră',
                        hh: relativeTimeWithPlural,
                        d: 'o zi',
                        dd: relativeTimeWithPlural,
                        M: 'o lună',
                        MM: relativeTimeWithPlural,
                        y: 'un an',
                        yy: relativeTimeWithPlural
                    },
                    week: {
                        dow: 1,
                        doy: 7
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                function plural(word, num) {
                    var forms = word.split('_');
                    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];
                }
                function relativeTimeWithPlural(number, withoutSuffix, key) {
                    var format = {
                        mm: withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
                        hh: 'час_часа_часов',
                        dd: 'день_дня_дней',
                        MM: 'месяц_месяца_месяцев',
                        yy: 'год_года_лет'
                    };
                    if (key === 'm') {
                        return withoutSuffix ? 'минута' : 'минуту';
                    } else {
                        return number + ' ' + plural(format[key], +number);
                    }
                }
                function monthsCaseReplace(m, format) {
                    var months = {
                        nominative: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
                        accusative: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_')
                    }, nounCase = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(format) ? 'accusative' : 'nominative';
                    return months[nounCase][m.month()];
                }
                function monthsShortCaseReplace(m, format) {
                    var monthsShort = {
                        nominative: 'янв_фев_мар_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),
                        accusative: 'янв_фев_мар_апр_мая_июня_июля_авг_сен_окт_ноя_дек'.split('_')
                    }, nounCase = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(format) ? 'accusative' : 'nominative';
                    return monthsShort[nounCase][m.month()];
                }
                function weekdaysCaseReplace(m, format) {
                    var weekdays = {
                        nominative: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
                        accusative: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_')
                    }, nounCase = /\[ ?[Вв] ?(?:прошлую|следующую)? ?\] ?dddd/.test(format) ? 'accusative' : 'nominative';
                    return weekdays[nounCase][m.day()];
                }
                return moment.defineLocale('ru', {
                    months: monthsCaseReplace,
                    monthsShort: monthsShortCaseReplace,
                    weekdays: weekdaysCaseReplace,
                    weekdaysShort: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
                    weekdaysMin: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
                    monthsParse: [ /^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[й|я]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i ],
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD.MM.YYYY',
                        LL: 'D MMMM YYYY г.',
                        LLL: 'D MMMM YYYY г., LT',
                        LLLL: 'dddd, D MMMM YYYY г., LT'
                    },
                    calendar: {
                        sameDay: '[Сегодня в] LT',
                        nextDay: '[Завтра в] LT',
                        lastDay: '[Вчера в] LT',
                        nextWeek: function nextWeek() {
                            return this.day() === 2 ? '[Во] dddd [в] LT' : '[В] dddd [в] LT';
                        },
                        lastWeek: function lastWeek() {
                            switch (this.day()) {
                              case 0:
                                return '[В прошлое] dddd [в] LT';

                              case 1:
                              case 2:
                              case 4:
                                return '[В прошлый] dddd [в] LT';

                              case 3:
                              case 5:
                              case 6:
                                return '[В прошлую] dddd [в] LT';
                            }
                        },
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'через %s',
                        past: '%s назад',
                        s: 'несколько секунд',
                        m: relativeTimeWithPlural,
                        mm: relativeTimeWithPlural,
                        h: 'час',
                        hh: relativeTimeWithPlural,
                        d: 'день',
                        dd: relativeTimeWithPlural,
                        M: 'месяц',
                        MM: relativeTimeWithPlural,
                        y: 'год',
                        yy: relativeTimeWithPlural
                    },
                    meridiemParse: /ночи|утра|дня|вечера/i,
                    isPM: function isPM(input) {
                        return /^(дня|вечера)$/.test(input);
                    },
                    meridiem: function meridiem(hour, minute, isLower) {
                        if (hour < 4) {
                            return 'ночи';
                        } else if (hour < 12) {
                            return 'утра';
                        } else if (hour < 17) {
                            return 'дня';
                        } else {
                            return 'вечера';
                        }
                    },
                    ordinal: function ordinal(number, period) {
                        switch (period) {
                          case 'M':
                          case 'd':
                          case 'DDD':
                            return number + '-й';

                          case 'D':
                            return number + '-го';

                          case 'w':
                          case 'W':
                            return number + '-я';

                          default:
                            return number;
                        }
                    },
                    week: {
                        dow: 1,
                        doy: 7
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                var months = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_'), monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');
                function plural(n) {
                    return n > 1 && n < 5;
                }
                function translate(number, withoutSuffix, key, isFuture) {
                    var result = number + ' ';
                    switch (key) {
                      case 's':
                        return withoutSuffix || isFuture ? 'pár sekúnd' : 'pár sekundami';

                      case 'm':
                        return withoutSuffix ? 'minúta' : isFuture ? 'minútu' : 'minútou';

                      case 'mm':
                        if (withoutSuffix || isFuture) {
                            return result + (plural(number) ? 'minúty' : 'minút');
                        } else {
                            return result + 'minútami';
                        }
                        break;

                      case 'h':
                        return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';

                      case 'hh':
                        if (withoutSuffix || isFuture) {
                            return result + (plural(number) ? 'hodiny' : 'hodín');
                        } else {
                            return result + 'hodinami';
                        }
                        break;

                      case 'd':
                        return withoutSuffix || isFuture ? 'deň' : 'dňom';

                      case 'dd':
                        if (withoutSuffix || isFuture) {
                            return result + (plural(number) ? 'dni' : 'dní');
                        } else {
                            return result + 'dňami';
                        }
                        break;

                      case 'M':
                        return withoutSuffix || isFuture ? 'mesiac' : 'mesiacom';

                      case 'MM':
                        if (withoutSuffix || isFuture) {
                            return result + (plural(number) ? 'mesiace' : 'mesiacov');
                        } else {
                            return result + 'mesiacmi';
                        }
                        break;

                      case 'y':
                        return withoutSuffix || isFuture ? 'rok' : 'rokom';

                      case 'yy':
                        if (withoutSuffix || isFuture) {
                            return result + (plural(number) ? 'roky' : 'rokov');
                        } else {
                            return result + 'rokmi';
                        }
                        break;
                    }
                }
                return moment.defineLocale('sk', {
                    months: months,
                    monthsShort: monthsShort,
                    monthsParse: function(months, monthsShort) {
                        var i, _monthsParse = [];
                        for (i = 0; i < 12; i++) {
                            _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
                        }
                        return _monthsParse;
                    }(months, monthsShort),
                    weekdays: 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
                    weekdaysShort: 'ne_po_ut_st_št_pi_so'.split('_'),
                    weekdaysMin: 'ne_po_ut_st_št_pi_so'.split('_'),
                    longDateFormat: {
                        LT: 'H:mm',
                        L: 'DD.MM.YYYY',
                        LL: 'D. MMMM YYYY',
                        LLL: 'D. MMMM YYYY LT',
                        LLLL: 'dddd D. MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[dnes o] LT',
                        nextDay: '[zajtra o] LT',
                        nextWeek: function nextWeek() {
                            switch (this.day()) {
                              case 0:
                                return '[v nedeľu o] LT';

                              case 1:
                              case 2:
                                return '[v] dddd [o] LT';

                              case 3:
                                return '[v stredu o] LT';

                              case 4:
                                return '[vo štvrtok o] LT';

                              case 5:
                                return '[v piatok o] LT';

                              case 6:
                                return '[v sobotu o] LT';
                            }
                        },
                        lastDay: '[včera o] LT',
                        lastWeek: function lastWeek() {
                            switch (this.day()) {
                              case 0:
                                return '[minulú nedeľu o] LT';

                              case 1:
                              case 2:
                                return '[minulý] dddd [o] LT';

                              case 3:
                                return '[minulú stredu o] LT';

                              case 4:
                              case 5:
                                return '[minulý] dddd [o] LT';

                              case 6:
                                return '[minulú sobotu o] LT';
                            }
                        },
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'za %s',
                        past: 'pred %s',
                        s: translate,
                        m: translate,
                        mm: translate,
                        h: translate,
                        hh: translate,
                        d: translate,
                        dd: translate,
                        M: translate,
                        MM: translate,
                        y: translate,
                        yy: translate
                    },
                    ordinal: '%d.',
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                function translate(number, withoutSuffix, key) {
                    var result = number + ' ';
                    switch (key) {
                      case 'm':
                        return withoutSuffix ? 'ena minuta' : 'eno minuto';

                      case 'mm':
                        if (number === 1) {
                            result += 'minuta';
                        } else if (number === 2) {
                            result += 'minuti';
                        } else if (number === 3 || number === 4) {
                            result += 'minute';
                        } else {
                            result += 'minut';
                        }
                        return result;

                      case 'h':
                        return withoutSuffix ? 'ena ura' : 'eno uro';

                      case 'hh':
                        if (number === 1) {
                            result += 'ura';
                        } else if (number === 2) {
                            result += 'uri';
                        } else if (number === 3 || number === 4) {
                            result += 'ure';
                        } else {
                            result += 'ur';
                        }
                        return result;

                      case 'dd':
                        if (number === 1) {
                            result += 'dan';
                        } else {
                            result += 'dni';
                        }
                        return result;

                      case 'MM':
                        if (number === 1) {
                            result += 'mesec';
                        } else if (number === 2) {
                            result += 'meseca';
                        } else if (number === 3 || number === 4) {
                            result += 'mesece';
                        } else {
                            result += 'mesecev';
                        }
                        return result;

                      case 'yy':
                        if (number === 1) {
                            result += 'leto';
                        } else if (number === 2) {
                            result += 'leti';
                        } else if (number === 3 || number === 4) {
                            result += 'leta';
                        } else {
                            result += 'let';
                        }
                        return result;
                    }
                }
                return moment.defineLocale('sl', {
                    months: 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
                    monthsShort: 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
                    weekdays: 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
                    weekdaysShort: 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
                    weekdaysMin: 'ne_po_to_sr_če_pe_so'.split('_'),
                    longDateFormat: {
                        LT: 'H:mm',
                        L: 'DD. MM. YYYY',
                        LL: 'D. MMMM YYYY',
                        LLL: 'D. MMMM YYYY LT',
                        LLLL: 'dddd, D. MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[danes ob] LT',
                        nextDay: '[jutri ob] LT',
                        nextWeek: function nextWeek() {
                            switch (this.day()) {
                              case 0:
                                return '[v] [nedeljo] [ob] LT';

                              case 3:
                                return '[v] [sredo] [ob] LT';

                              case 6:
                                return '[v] [soboto] [ob] LT';

                              case 1:
                              case 2:
                              case 4:
                              case 5:
                                return '[v] dddd [ob] LT';
                            }
                        },
                        lastDay: '[včeraj ob] LT',
                        lastWeek: function lastWeek() {
                            switch (this.day()) {
                              case 0:
                              case 3:
                              case 6:
                                return '[prejšnja] dddd [ob] LT';

                              case 1:
                              case 2:
                              case 4:
                              case 5:
                                return '[prejšnji] dddd [ob] LT';
                            }
                        },
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'čez %s',
                        past: '%s nazaj',
                        s: 'nekaj sekund',
                        m: translate,
                        mm: translate,
                        h: translate,
                        hh: translate,
                        d: 'en dan',
                        dd: translate,
                        M: 'en mesec',
                        MM: translate,
                        y: 'eno leto',
                        yy: translate
                    },
                    ordinal: '%d.',
                    week: {
                        dow: 1,
                        doy: 7
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('sq', {
                    months: 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split('_'),
                    monthsShort: 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
                    weekdays: 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split('_'),
                    weekdaysShort: 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
                    weekdaysMin: 'D_H_Ma_Më_E_P_Sh'.split('_'),
                    meridiem: function meridiem(hours, minutes, isLower) {
                        return hours < 12 ? 'PD' : 'MD';
                    },
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY LT',
                        LLLL: 'dddd, D MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[Sot në] LT',
                        nextDay: '[Nesër në] LT',
                        nextWeek: 'dddd [në] LT',
                        lastDay: '[Dje në] LT',
                        lastWeek: 'dddd [e kaluar në] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'në %s',
                        past: '%s më parë',
                        s: 'disa sekonda',
                        m: 'një minutë',
                        mm: '%d minuta',
                        h: 'një orë',
                        hh: '%d orë',
                        d: 'një ditë',
                        dd: '%d ditë',
                        M: 'një muaj',
                        MM: '%d muaj',
                        y: 'një vit',
                        yy: '%d vite'
                    },
                    ordinal: '%d.',
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                var translator = {
                    words: {
                        m: [ 'један минут', 'једне минуте' ],
                        mm: [ 'минут', 'минуте', 'минута' ],
                        h: [ 'један сат', 'једног сата' ],
                        hh: [ 'сат', 'сата', 'сати' ],
                        dd: [ 'дан', 'дана', 'дана' ],
                        MM: [ 'месец', 'месеца', 'месеци' ],
                        yy: [ 'година', 'године', 'година' ]
                    },
                    correctGrammaticalCase: function correctGrammaticalCase(number, wordKey) {
                        return number === 1 ? wordKey[0] : number >= 2 && number <= 4 ? wordKey[1] : wordKey[2];
                    },
                    translate: function translate(number, withoutSuffix, key) {
                        var wordKey = translator.words[key];
                        if (key.length === 1) {
                            return withoutSuffix ? wordKey[0] : wordKey[1];
                        } else {
                            return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
                        }
                    }
                };
                return moment.defineLocale('sr-cyrl', {
                    months: [ 'јануар', 'фебруар', 'март', 'април', 'мај', 'јун', 'јул', 'август', 'септембар', 'октобар', 'новембар', 'децембар' ],
                    monthsShort: [ 'јан.', 'феб.', 'мар.', 'апр.', 'мај', 'јун', 'јул', 'авг.', 'сеп.', 'окт.', 'нов.', 'дец.' ],
                    weekdays: [ 'недеља', 'понедељак', 'уторак', 'среда', 'четвртак', 'петак', 'субота' ],
                    weekdaysShort: [ 'нед.', 'пон.', 'уто.', 'сре.', 'чет.', 'пет.', 'суб.' ],
                    weekdaysMin: [ 'не', 'по', 'ут', 'ср', 'че', 'пе', 'су' ],
                    longDateFormat: {
                        LT: 'H:mm',
                        L: 'DD. MM. YYYY',
                        LL: 'D. MMMM YYYY',
                        LLL: 'D. MMMM YYYY LT',
                        LLLL: 'dddd, D. MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[данас у] LT',
                        nextDay: '[сутра у] LT',
                        nextWeek: function nextWeek() {
                            switch (this.day()) {
                              case 0:
                                return '[у] [недељу] [у] LT';

                              case 3:
                                return '[у] [среду] [у] LT';

                              case 6:
                                return '[у] [суботу] [у] LT';

                              case 1:
                              case 2:
                              case 4:
                              case 5:
                                return '[у] dddd [у] LT';
                            }
                        },
                        lastDay: '[јуче у] LT',
                        lastWeek: function lastWeek() {
                            var lastWeekDays = [ '[прошле] [недеље] [у] LT', '[прошлог] [понедељка] [у] LT', '[прошлог] [уторка] [у] LT', '[прошле] [среде] [у] LT', '[прошлог] [четвртка] [у] LT', '[прошлог] [петка] [у] LT', '[прошле] [суботе] [у] LT' ];
                            return lastWeekDays[this.day()];
                        },
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'за %s',
                        past: 'пре %s',
                        s: 'неколико секунди',
                        m: translator.translate,
                        mm: translator.translate,
                        h: translator.translate,
                        hh: translator.translate,
                        d: 'дан',
                        dd: translator.translate,
                        M: 'месец',
                        MM: translator.translate,
                        y: 'годину',
                        yy: translator.translate
                    },
                    ordinal: '%d.',
                    week: {
                        dow: 1,
                        doy: 7
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                var translator = {
                    words: {
                        m: [ 'jedan minut', 'jedne minute' ],
                        mm: [ 'minut', 'minute', 'minuta' ],
                        h: [ 'jedan sat', 'jednog sata' ],
                        hh: [ 'sat', 'sata', 'sati' ],
                        dd: [ 'dan', 'dana', 'dana' ],
                        MM: [ 'mesec', 'meseca', 'meseci' ],
                        yy: [ 'godina', 'godine', 'godina' ]
                    },
                    correctGrammaticalCase: function correctGrammaticalCase(number, wordKey) {
                        return number === 1 ? wordKey[0] : number >= 2 && number <= 4 ? wordKey[1] : wordKey[2];
                    },
                    translate: function translate(number, withoutSuffix, key) {
                        var wordKey = translator.words[key];
                        if (key.length === 1) {
                            return withoutSuffix ? wordKey[0] : wordKey[1];
                        } else {
                            return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
                        }
                    }
                };
                return moment.defineLocale('sr', {
                    months: [ 'januar', 'februar', 'mart', 'april', 'maj', 'jun', 'jul', 'avgust', 'septembar', 'oktobar', 'novembar', 'decembar' ],
                    monthsShort: [ 'jan.', 'feb.', 'mar.', 'apr.', 'maj', 'jun', 'jul', 'avg.', 'sep.', 'okt.', 'nov.', 'dec.' ],
                    weekdays: [ 'nedelja', 'ponedeljak', 'utorak', 'sreda', 'četvrtak', 'petak', 'subota' ],
                    weekdaysShort: [ 'ned.', 'pon.', 'uto.', 'sre.', 'čet.', 'pet.', 'sub.' ],
                    weekdaysMin: [ 'ne', 'po', 'ut', 'sr', 'če', 'pe', 'su' ],
                    longDateFormat: {
                        LT: 'H:mm',
                        L: 'DD. MM. YYYY',
                        LL: 'D. MMMM YYYY',
                        LLL: 'D. MMMM YYYY LT',
                        LLLL: 'dddd, D. MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[danas u] LT',
                        nextDay: '[sutra u] LT',
                        nextWeek: function nextWeek() {
                            switch (this.day()) {
                              case 0:
                                return '[u] [nedelju] [u] LT';

                              case 3:
                                return '[u] [sredu] [u] LT';

                              case 6:
                                return '[u] [subotu] [u] LT';

                              case 1:
                              case 2:
                              case 4:
                              case 5:
                                return '[u] dddd [u] LT';
                            }
                        },
                        lastDay: '[juče u] LT',
                        lastWeek: function lastWeek() {
                            var lastWeekDays = [ '[prošle] [nedelje] [u] LT', '[prošlog] [ponedeljka] [u] LT', '[prošlog] [utorka] [u] LT', '[prošle] [srede] [u] LT', '[prošlog] [četvrtka] [u] LT', '[prošlog] [petka] [u] LT', '[prošle] [subote] [u] LT' ];
                            return lastWeekDays[this.day()];
                        },
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'za %s',
                        past: 'pre %s',
                        s: 'nekoliko sekundi',
                        m: translator.translate,
                        mm: translator.translate,
                        h: translator.translate,
                        hh: translator.translate,
                        d: 'dan',
                        dd: translator.translate,
                        M: 'mesec',
                        MM: translator.translate,
                        y: 'godinu',
                        yy: translator.translate
                    },
                    ordinal: '%d.',
                    week: {
                        dow: 1,
                        doy: 7
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('sv', {
                    months: 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),
                    monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
                    weekdays: 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
                    weekdaysShort: 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
                    weekdaysMin: 'sö_må_ti_on_to_fr_lö'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'YYYY-MM-DD',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY LT',
                        LLLL: 'dddd D MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[Idag] LT',
                        nextDay: '[Imorgon] LT',
                        lastDay: '[Igår] LT',
                        nextWeek: 'dddd LT',
                        lastWeek: '[Förra] dddd[en] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'om %s',
                        past: 'för %s sedan',
                        s: 'några sekunder',
                        m: 'en minut',
                        mm: '%d minuter',
                        h: 'en timme',
                        hh: '%d timmar',
                        d: 'en dag',
                        dd: '%d dagar',
                        M: 'en månad',
                        MM: '%d månader',
                        y: 'ett år',
                        yy: '%d år'
                    },
                    ordinal: function ordinal(number) {
                        var b = number % 10, output = ~~(number % 100 / 10) === 1 ? 'e' : b === 1 ? 'a' : b === 2 ? 'a' : b === 3 ? 'e' : 'e';
                        return number + output;
                    },
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('ta', {
                    months: 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
                    monthsShort: 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
                    weekdays: 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split('_'),
                    weekdaysShort: 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split('_'),
                    weekdaysMin: 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY, LT',
                        LLLL: 'dddd, D MMMM YYYY, LT'
                    },
                    calendar: {
                        sameDay: '[இன்று] LT',
                        nextDay: '[நாளை] LT',
                        nextWeek: 'dddd, LT',
                        lastDay: '[நேற்று] LT',
                        lastWeek: '[கடந்த வாரம்] dddd, LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: '%s இல்',
                        past: '%s முன்',
                        s: 'ஒரு சில விநாடிகள்',
                        m: 'ஒரு நிமிடம்',
                        mm: '%d நிமிடங்கள்',
                        h: 'ஒரு மணி நேரம்',
                        hh: '%d மணி நேரம்',
                        d: 'ஒரு நாள்',
                        dd: '%d நாட்கள்',
                        M: 'ஒரு மாதம்',
                        MM: '%d மாதங்கள்',
                        y: 'ஒரு வருடம்',
                        yy: '%d ஆண்டுகள்'
                    },
                    ordinal: function ordinal(number) {
                        return number + 'வது';
                    },
                    meridiem: function meridiem(hour, minute, isLower) {
                        if (hour >= 6 && hour <= 10) {
                            return ' காலை';
                        } else if (hour >= 10 && hour <= 14) {
                            return ' நண்பகல்';
                        } else if (hour >= 14 && hour <= 18) {
                            return ' எற்பாடு';
                        } else if (hour >= 18 && hour <= 20) {
                            return ' மாலை';
                        } else if (hour >= 20 && hour <= 24) {
                            return ' இரவு';
                        } else if (hour >= 0 && hour <= 6) {
                            return ' வைகறை';
                        }
                    },
                    week: {
                        dow: 0,
                        doy: 6
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('th', {
                    months: 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),
                    monthsShort: 'มกรา_กุมภา_มีนา_เมษา_พฤษภา_มิถุนา_กรกฎา_สิงหา_กันยา_ตุลา_พฤศจิกา_ธันวา'.split('_'),
                    weekdays: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
                    weekdaysShort: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'),
                    weekdaysMin: 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
                    longDateFormat: {
                        LT: 'H นาฬิกา m นาที',
                        L: 'YYYY/MM/DD',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY เวลา LT',
                        LLLL: 'วันddddที่ D MMMM YYYY เวลา LT'
                    },
                    meridiem: function meridiem(hour, minute, isLower) {
                        if (hour < 12) {
                            return 'ก่อนเที่ยง';
                        } else {
                            return 'หลังเที่ยง';
                        }
                    },
                    calendar: {
                        sameDay: '[วันนี้ เวลา] LT',
                        nextDay: '[พรุ่งนี้ เวลา] LT',
                        nextWeek: 'dddd[หน้า เวลา] LT',
                        lastDay: '[เมื่อวานนี้ เวลา] LT',
                        lastWeek: '[วัน]dddd[ที่แล้ว เวลา] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'อีก %s',
                        past: '%sที่แล้ว',
                        s: 'ไม่กี่วินาที',
                        m: '1 นาที',
                        mm: '%d นาที',
                        h: '1 ชั่วโมง',
                        hh: '%d ชั่วโมง',
                        d: '1 วัน',
                        dd: '%d วัน',
                        M: '1 เดือน',
                        MM: '%d เดือน',
                        y: '1 ปี',
                        yy: '%d ปี'
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('tl-ph', {
                    months: 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
                    monthsShort: 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
                    weekdays: 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
                    weekdaysShort: 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
                    weekdaysMin: 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'MM/D/YYYY',
                        LL: 'MMMM D, YYYY',
                        LLL: 'MMMM D, YYYY LT',
                        LLLL: 'dddd, MMMM DD, YYYY LT'
                    },
                    calendar: {
                        sameDay: '[Ngayon sa] LT',
                        nextDay: '[Bukas sa] LT',
                        nextWeek: 'dddd [sa] LT',
                        lastDay: '[Kahapon sa] LT',
                        lastWeek: 'dddd [huling linggo] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'sa loob ng %s',
                        past: '%s ang nakalipas',
                        s: 'ilang segundo',
                        m: 'isang minuto',
                        mm: '%d minuto',
                        h: 'isang oras',
                        hh: '%d oras',
                        d: 'isang araw',
                        dd: '%d araw',
                        M: 'isang buwan',
                        MM: '%d buwan',
                        y: 'isang taon',
                        yy: '%d taon'
                    },
                    ordinal: function ordinal(number) {
                        return number;
                    },
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                var suffixes = {
                    1: '\'inci',
                    5: '\'inci',
                    8: '\'inci',
                    70: '\'inci',
                    80: '\'inci',
                    2: '\'nci',
                    7: '\'nci',
                    20: '\'nci',
                    50: '\'nci',
                    3: '\'üncü',
                    4: '\'üncü',
                    100: '\'üncü',
                    6: '\'ncı',
                    9: '\'uncu',
                    10: '\'uncu',
                    30: '\'uncu',
                    60: '\'ıncı',
                    90: '\'ıncı'
                };
                return moment.defineLocale('tr', {
                    months: 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),
                    monthsShort: 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
                    weekdays: 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),
                    weekdaysShort: 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),
                    weekdaysMin: 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD.MM.YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY LT',
                        LLLL: 'dddd, D MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[bugün saat] LT',
                        nextDay: '[yarın saat] LT',
                        nextWeek: '[haftaya] dddd [saat] LT',
                        lastDay: '[dün] LT',
                        lastWeek: '[geçen hafta] dddd [saat] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: '%s sonra',
                        past: '%s önce',
                        s: 'birkaç saniye',
                        m: 'bir dakika',
                        mm: '%d dakika',
                        h: 'bir saat',
                        hh: '%d saat',
                        d: 'bir gün',
                        dd: '%d gün',
                        M: 'bir ay',
                        MM: '%d ay',
                        y: 'bir yıl',
                        yy: '%d yıl'
                    },
                    ordinal: function ordinal(number) {
                        if (number === 0) {
                            return number + '\'ıncı';
                        }
                        var a = number % 10, b = number % 100 - a, c = number >= 100 ? 100 : null;
                        return number + (suffixes[a] || suffixes[b] || suffixes[c]);
                    },
                    week: {
                        dow: 1,
                        doy: 7
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('tzm-latn', {
                    months: 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
                    monthsShort: 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
                    weekdays: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
                    weekdaysShort: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
                    weekdaysMin: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY LT',
                        LLLL: 'dddd D MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[asdkh g] LT',
                        nextDay: '[aska g] LT',
                        nextWeek: 'dddd [g] LT',
                        lastDay: '[assant g] LT',
                        lastWeek: 'dddd [g] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'dadkh s yan %s',
                        past: 'yan %s',
                        s: 'imik',
                        m: 'minuḍ',
                        mm: '%d minuḍ',
                        h: 'saɛa',
                        hh: '%d tassaɛin',
                        d: 'ass',
                        dd: '%d ossan',
                        M: 'ayowr',
                        MM: '%d iyyirn',
                        y: 'asgas',
                        yy: '%d isgasn'
                    },
                    week: {
                        dow: 6,
                        doy: 12
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('tzm', {
                    months: 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
                    monthsShort: 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
                    weekdays: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
                    weekdaysShort: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
                    weekdaysMin: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY LT',
                        LLLL: 'dddd D MMMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
                        nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
                        nextWeek: 'dddd [ⴴ] LT',
                        lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
                        lastWeek: 'dddd [ⴴ] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
                        past: 'ⵢⴰⵏ %s',
                        s: 'ⵉⵎⵉⴽ',
                        m: 'ⵎⵉⵏⵓⴺ',
                        mm: '%d ⵎⵉⵏⵓⴺ',
                        h: 'ⵙⴰⵄⴰ',
                        hh: '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
                        d: 'ⴰⵙⵙ',
                        dd: '%d oⵙⵙⴰⵏ',
                        M: 'ⴰⵢoⵓⵔ',
                        MM: '%d ⵉⵢⵢⵉⵔⵏ',
                        y: 'ⴰⵙⴳⴰⵙ',
                        yy: '%d ⵉⵙⴳⴰⵙⵏ'
                    },
                    week: {
                        dow: 6,
                        doy: 12
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                function plural(word, num) {
                    var forms = word.split('_');
                    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];
                }
                function relativeTimeWithPlural(number, withoutSuffix, key) {
                    var format = {
                        mm: 'хвилина_хвилини_хвилин',
                        hh: 'година_години_годин',
                        dd: 'день_дні_днів',
                        MM: 'місяць_місяці_місяців',
                        yy: 'рік_роки_років'
                    };
                    if (key === 'm') {
                        return withoutSuffix ? 'хвилина' : 'хвилину';
                    } else if (key === 'h') {
                        return withoutSuffix ? 'година' : 'годину';
                    } else {
                        return number + ' ' + plural(format[key], +number);
                    }
                }
                function monthsCaseReplace(m, format) {
                    var months = {
                        nominative: 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_'),
                        accusative: 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_')
                    }, nounCase = /D[oD]? *MMMM?/.test(format) ? 'accusative' : 'nominative';
                    return months[nounCase][m.month()];
                }
                function weekdaysCaseReplace(m, format) {
                    var weekdays = {
                        nominative: 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
                        accusative: 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
                        genitive: 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
                    }, nounCase = /(\[[ВвУу]\]) ?dddd/.test(format) ? 'accusative' : /\[?(?:минулої|наступної)? ?\] ?dddd/.test(format) ? 'genitive' : 'nominative';
                    return weekdays[nounCase][m.day()];
                }
                function processHoursFunction(str) {
                    return function() {
                        return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
                    };
                }
                return moment.defineLocale('uk', {
                    months: monthsCaseReplace,
                    monthsShort: 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split('_'),
                    weekdays: weekdaysCaseReplace,
                    weekdaysShort: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
                    weekdaysMin: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD.MM.YYYY',
                        LL: 'D MMMM YYYY р.',
                        LLL: 'D MMMM YYYY р., LT',
                        LLLL: 'dddd, D MMMM YYYY р., LT'
                    },
                    calendar: {
                        sameDay: processHoursFunction('[Сьогодні '),
                        nextDay: processHoursFunction('[Завтра '),
                        lastDay: processHoursFunction('[Вчора '),
                        nextWeek: processHoursFunction('[У] dddd ['),
                        lastWeek: function lastWeek() {
                            switch (this.day()) {
                              case 0:
                              case 3:
                              case 5:
                              case 6:
                                return processHoursFunction('[Минулої] dddd [').call(this);

                              case 1:
                              case 2:
                              case 4:
                                return processHoursFunction('[Минулого] dddd [').call(this);
                            }
                        },
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'за %s',
                        past: '%s тому',
                        s: 'декілька секунд',
                        m: relativeTimeWithPlural,
                        mm: relativeTimeWithPlural,
                        h: 'годину',
                        hh: relativeTimeWithPlural,
                        d: 'день',
                        dd: relativeTimeWithPlural,
                        M: 'місяць',
                        MM: relativeTimeWithPlural,
                        y: 'рік',
                        yy: relativeTimeWithPlural
                    },
                    meridiem: function meridiem(hour, minute, isLower) {
                        if (hour < 4) {
                            return 'ночі';
                        } else if (hour < 12) {
                            return 'ранку';
                        } else if (hour < 17) {
                            return 'дня';
                        } else {
                            return 'вечора';
                        }
                    },
                    ordinal: function ordinal(number, period) {
                        switch (period) {
                          case 'M':
                          case 'd':
                          case 'DDD':
                          case 'w':
                          case 'W':
                            return number + '-й';

                          case 'D':
                            return number + '-го';

                          default:
                            return number;
                        }
                    },
                    week: {
                        dow: 1,
                        doy: 7
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('uz', {
                    months: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
                    monthsShort: 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
                    weekdays: 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
                    weekdaysShort: 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
                    weekdaysMin: 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM YYYY',
                        LLL: 'D MMMM YYYY LT',
                        LLLL: 'D MMMM YYYY, dddd LT'
                    },
                    calendar: {
                        sameDay: '[Бугун соат] LT [да]',
                        nextDay: '[Эртага] LT [да]',
                        nextWeek: 'dddd [куни соат] LT [да]',
                        lastDay: '[Кеча соат] LT [да]',
                        lastWeek: '[Утган] dddd [куни соат] LT [да]',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: 'Якин %s ичида',
                        past: 'Бир неча %s олдин',
                        s: 'фурсат',
                        m: 'бир дакика',
                        mm: '%d дакика',
                        h: 'бир соат',
                        hh: '%d соат',
                        d: 'бир кун',
                        dd: '%d кун',
                        M: 'бир ой',
                        MM: '%d ой',
                        y: 'бир йил',
                        yy: '%d йил'
                    },
                    week: {
                        dow: 1,
                        doy: 7
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('vi', {
                    months: 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split('_'),
                    monthsShort: 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),
                    weekdays: 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split('_'),
                    weekdaysShort: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
                    weekdaysMin: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
                    longDateFormat: {
                        LT: 'HH:mm',
                        L: 'DD/MM/YYYY',
                        LL: 'D MMMM [năm] YYYY',
                        LLL: 'D MMMM [năm] YYYY LT',
                        LLLL: 'dddd, D MMMM [năm] YYYY LT',
                        l: 'DD/M/YYYY',
                        ll: 'D MMM YYYY',
                        lll: 'D MMM YYYY LT',
                        llll: 'ddd, D MMM YYYY LT'
                    },
                    calendar: {
                        sameDay: '[Hôm nay lúc] LT',
                        nextDay: '[Ngày mai lúc] LT',
                        nextWeek: 'dddd [tuần tới lúc] LT',
                        lastDay: '[Hôm qua lúc] LT',
                        lastWeek: 'dddd [tuần rồi lúc] LT',
                        sameElse: 'L'
                    },
                    relativeTime: {
                        future: '%s tới',
                        past: '%s trước',
                        s: 'vài giây',
                        m: 'một phút',
                        mm: '%d phút',
                        h: 'một giờ',
                        hh: '%d giờ',
                        d: 'một ngày',
                        dd: '%d ngày',
                        M: 'một tháng',
                        MM: '%d tháng',
                        y: 'một năm',
                        yy: '%d năm'
                    },
                    ordinal: function ordinal(number) {
                        return number;
                    },
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('zh-cn', {
                    months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
                    monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
                    weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
                    weekdaysShort: '周日_周一_周二_周三_周四_周五_周六'.split('_'),
                    weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
                    longDateFormat: {
                        LT: 'Ah点mm',
                        L: 'YYYY-MM-DD',
                        LL: 'YYYY年MMMD日',
                        LLL: 'YYYY年MMMD日LT',
                        LLLL: 'YYYY年MMMD日ddddLT',
                        l: 'YYYY-MM-DD',
                        ll: 'YYYY年MMMD日',
                        lll: 'YYYY年MMMD日LT',
                        llll: 'YYYY年MMMD日ddddLT'
                    },
                    meridiem: function meridiem(hour, minute, isLower) {
                        var hm = hour * 100 + minute;
                        if (hm < 600) {
                            return '凌晨';
                        } else if (hm < 900) {
                            return '早上';
                        } else if (hm < 1130) {
                            return '上午';
                        } else if (hm < 1230) {
                            return '中午';
                        } else if (hm < 1800) {
                            return '下午';
                        } else {
                            return '晚上';
                        }
                    },
                    calendar: {
                        sameDay: function sameDay() {
                            return this.minutes() === 0 ? '[今天]Ah[点整]' : '[今天]LT';
                        },
                        nextDay: function nextDay() {
                            return this.minutes() === 0 ? '[明天]Ah[点整]' : '[明天]LT';
                        },
                        lastDay: function lastDay() {
                            return this.minutes() === 0 ? '[昨天]Ah[点整]' : '[昨天]LT';
                        },
                        nextWeek: function nextWeek() {
                            var startOfWeek, prefix;
                            startOfWeek = moment().startOf('week');
                            prefix = this.unix() - startOfWeek.unix() >= 7 * 24 * 3600 ? '[下]' : '[本]';
                            return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
                        },
                        lastWeek: function lastWeek() {
                            var startOfWeek, prefix;
                            startOfWeek = moment().startOf('week');
                            prefix = this.unix() < startOfWeek.unix() ? '[上]' : '[本]';
                            return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
                        },
                        sameElse: 'LL'
                    },
                    ordinal: function ordinal(number, period) {
                        switch (period) {
                          case 'd':
                          case 'D':
                          case 'DDD':
                            return number + '日';

                          case 'M':
                            return number + '月';

                          case 'w':
                          case 'W':
                            return number + '周';

                          default:
                            return number;
                        }
                    },
                    relativeTime: {
                        future: '%s内',
                        past: '%s前',
                        s: '几秒',
                        m: '1分钟',
                        mm: '%d分钟',
                        h: '1小时',
                        hh: '%d小时',
                        d: '1天',
                        dd: '%d天',
                        M: '1个月',
                        MM: '%d个月',
                        y: '1年',
                        yy: '%d年'
                    },
                    week: {
                        dow: 1,
                        doy: 4
                    }
                });
            });
            (function(factory) {
                factory(moment);
            })(function(moment) {
                return moment.defineLocale('zh-tw', {
                    months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
                    monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
                    weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
                    weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
                    weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
                    longDateFormat: {
                        LT: 'Ah點mm',
                        L: 'YYYY年MMMD日',
                        LL: 'YYYY年MMMD日',
                        LLL: 'YYYY年MMMD日LT',
                        LLLL: 'YYYY年MMMD日ddddLT',
                        l: 'YYYY年MMMD日',
                        ll: 'YYYY年MMMD日',
                        lll: 'YYYY年MMMD日LT',
                        llll: 'YYYY年MMMD日ddddLT'
                    },
                    meridiem: function meridiem(hour, minute, isLower) {
                        var hm = hour * 100 + minute;
                        if (hm < 900) {
                            return '早上';
                        } else if (hm < 1130) {
                            return '上午';
                        } else if (hm < 1230) {
                            return '中午';
                        } else if (hm < 1800) {
                            return '下午';
                        } else {
                            return '晚上';
                        }
                    },
                    calendar: {
                        sameDay: '[今天]LT',
                        nextDay: '[明天]LT',
                        nextWeek: '[下]ddddLT',
                        lastDay: '[昨天]LT',
                        lastWeek: '[上]ddddLT',
                        sameElse: 'L'
                    },
                    ordinal: function ordinal(number, period) {
                        switch (period) {
                          case 'd':
                          case 'D':
                          case 'DDD':
                            return number + '日';

                          case 'M':
                            return number + '月';

                          case 'w':
                          case 'W':
                            return number + '週';

                          default:
                            return number;
                        }
                    },
                    relativeTime: {
                        future: '%s內',
                        past: '%s前',
                        s: '幾秒',
                        m: '一分鐘',
                        mm: '%d分鐘',
                        h: '一小時',
                        hh: '%d小時',
                        d: '一天',
                        dd: '%d天',
                        M: '一個月',
                        MM: '%d個月',
                        y: '一年',
                        yy: '%d年'
                    }
                });
            });
            moment.locale('en');
            function makeGlobal(shouldDeprecate) {
                if (typeof ender !== 'undefined') {
                    return;
                }
                oldGlobalMoment = globalScope.moment;
                if (shouldDeprecate) {
                    globalScope.moment = deprecate('Accessing Moment through the global scope is ' + 'deprecated, and will be removed in an upcoming ' + 'release.', moment);
                } else {
                    globalScope.moment = moment;
                }
            }
            if (hasModule) {
                module.exports = moment;
            } else if (true) {
                !(__WEBPACK_AMD_DEFINE_RESULT__ = function(require, exports, module) {
                    if (module.config && module.config() && module.config().noGlobal === true) {
                        globalScope.moment = oldGlobalMoment;
                    }
                    return moment;
                }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                makeGlobal(true);
            } else {
                makeGlobal();
            }
        }).call(undefined);
    }).call(exports, __webpack_require__(7), __webpack_require__(5)(module));
}, function(module, exports) {
    module.exports = function(module) {
        if (!module.webpackPolyfill) {
            module.deprecate = function() {};
            module.paths = [];
            if (!module.children) module.children = [];
            Object.defineProperty(module, 'loaded', {
                enumerable: true,
                get: function() {
                    return module.l;
                }
            });
            Object.defineProperty(module, 'id', {
                enumerable: true,
                get: function() {
                    return module.i;
                }
            });
            module.webpackPolyfill = 1;
        }
        return module;
    };
}, function(module, exports, __webpack_require__) {
    'use strict';
    (function(module) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function(obj) {
            return typeof obj;
        } : function(obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        !function(a, b) {
            'object' == (false ? 'undefined' : _typeof(module)) && 'object' == _typeof(module.exports) ? module.exports = a.document ? b(a, !0) : function(a) {
                if (!a.document) throw new Error('jQuery requires a window with a document');
                return b(a);
            } : b(a);
        }('undefined' != typeof window ? window : undefined, function(a, b) {
            var c = [], d = c.slice, e = c.concat, f = c.push, g = c.indexOf, h = {}, i = h.toString, j = h.hasOwnProperty, k = {}, l = a.document, m = '2.1.1', n = function n(a, b) {
                return new n.fn.init(a, b);
            }, o = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, p = /^-ms-/, q = /-([\da-z])/gi, r = function r(a, b) {
                return b.toUpperCase();
            };
            n.fn = n.prototype = {
                jquery: m,
                constructor: n,
                selector: '',
                length: 0,
                toArray: function toArray() {
                    return d.call(this);
                },
                get: function get(a) {
                    return null != a ? 0 > a ? this[a + this.length] : this[a] : d.call(this);
                },
                pushStack: function pushStack(a) {
                    var b = n.merge(this.constructor(), a);
                    return b.prevObject = this, b.context = this.context, b;
                },
                each: function each(a, b) {
                    return n.each(this, a, b);
                },
                map: function map(a) {
                    return this.pushStack(n.map(this, function(b, c) {
                        return a.call(b, c, b);
                    }));
                },
                slice: function slice() {
                    return this.pushStack(d.apply(this, arguments));
                },
                first: function first() {
                    return this.eq(0);
                },
                last: function last() {
                    return this.eq(-1);
                },
                eq: function eq(a) {
                    var b = this.length, c = +a + (0 > a ? b : 0);
                    return this.pushStack(c >= 0 && b > c ? [ this[c] ] : []);
                },
                end: function end() {
                    return this.prevObject || this.constructor(null);
                },
                push: f,
                sort: c.sort,
                splice: c.splice
            }, n.extend = n.fn.extend = function() {
                var a, b, c, d, e, f, g = arguments[0] || {}, h = 1, i = arguments.length, j = !1;
                for ('boolean' == typeof g && (j = g, g = arguments[h] || {}, h++), 'object' == (typeof g === 'undefined' ? 'undefined' : _typeof(g)) || n.isFunction(g) || (g = {}), 
                h === i && (g = this, h--); i > h; h++) {
                    if (null != (a = arguments[h])) for (b in a) {
                        c = g[b], d = a[b], g !== d && (j && d && (n.isPlainObject(d) || (e = n.isArray(d))) ? (e ? (e = !1, f = c && n.isArray(c) ? c : []) : f = c && n.isPlainObject(c) ? c : {}, 
                        g[b] = n.extend(j, f, d)) : void 0 !== d && (g[b] = d));
                    }
                }
                return g;
            }, n.extend({
                expando: 'jQuery' + (m + Math.random()).replace(/\D/g, ''),
                isReady: !0,
                error: function error(a) {
                    throw new Error(a);
                },
                noop: function noop() {},
                isFunction: function isFunction(a) {
                    return 'function' === n.type(a);
                },
                isArray: Array.isArray,
                isWindow: function isWindow(a) {
                    return null != a && a === a.window;
                },
                isNumeric: function isNumeric(a) {
                    return !n.isArray(a) && a - parseFloat(a) >= 0;
                },
                isPlainObject: function isPlainObject(a) {
                    return 'object' !== n.type(a) || a.nodeType || n.isWindow(a) ? !1 : a.constructor && !j.call(a.constructor.prototype, 'isPrototypeOf') ? !1 : !0;
                },
                isEmptyObject: function isEmptyObject(a) {
                    var b;
                    for (b in a) {
                        return !1;
                    }
                    return !0;
                },
                type: function type(a) {
                    return null == a ? a + '' : 'object' == (typeof a === 'undefined' ? 'undefined' : _typeof(a)) || 'function' == typeof a ? h[i.call(a)] || 'object' : typeof a === 'undefined' ? 'undefined' : _typeof(a);
                },
                globalEval: function globalEval(a) {
                    var b, c = eval;
                    a = n.trim(a), a && (1 === a.indexOf('use strict') ? (b = l.createElement('script'), b.text = a, l.head.appendChild(b).parentNode.removeChild(b)) : c(a));
                },
                camelCase: function camelCase(a) {
                    return a.replace(p, 'ms-').replace(q, r);
                },
                nodeName: function nodeName(a, b) {
                    return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase();
                },
                each: function each(a, b, c) {
                    var d, e = 0, f = a.length, g = s(a);
                    if (c) {
                        if (g) {
                            for (;f > e; e++) {
                                if (d = b.apply(a[e], c), d === !1) break;
                            }
                        } else for (e in a) {
                            if (d = b.apply(a[e], c), d === !1) break;
                        }
                    } else if (g) {
                        for (;f > e; e++) {
                            if (d = b.call(a[e], e, a[e]), d === !1) break;
                        }
                    } else for (e in a) {
                        if (d = b.call(a[e], e, a[e]), d === !1) break;
                    }
                    return a;
                },
                trim: function trim(a) {
                    return null == a ? '' : (a + '').replace(o, '');
                },
                makeArray: function makeArray(a, b) {
                    var c = b || [];
                    return null != a && (s(Object(a)) ? n.merge(c, 'string' == typeof a ? [ a ] : a) : f.call(c, a)), c;
                },
                inArray: function inArray(a, b, c) {
                    return null == b ? -1 : g.call(b, a, c);
                },
                merge: function merge(a, b) {
                    for (var c = +b.length, d = 0, e = a.length; c > d; d++) {
                        a[e++] = b[d];
                    }
                    return a.length = e, a;
                },
                grep: function grep(a, b, c) {
                    for (var d, e = [], f = 0, g = a.length, h = !c; g > f; f++) {
                        d = !b(a[f], f), d !== h && e.push(a[f]);
                    }
                    return e;
                },
                map: function map(a, b, c) {
                    var d, f = 0, g = a.length, h = s(a), i = [];
                    if (h) for (;g > f; f++) {
                        d = b(a[f], f, c), null != d && i.push(d);
                    } else for (f in a) {
                        d = b(a[f], f, c), null != d && i.push(d);
                    }
                    return e.apply([], i);
                },
                guid: 1,
                proxy: function proxy(a, b) {
                    var c, e, f;
                    return 'string' == typeof b && (c = a[b], b = a, a = c), n.isFunction(a) ? (e = d.call(arguments, 2), f = function f() {
                        return a.apply(b || this, e.concat(d.call(arguments)));
                    }, f.guid = a.guid = a.guid || n.guid++, f) : void 0;
                },
                now: Date.now,
                support: k
            }), n.each('Boolean Number String Function Array Date RegExp Object Error'.split(' '), function(a, b) {
                h['[object ' + b + ']'] = b.toLowerCase();
            });
            function s(a) {
                var b = a.length, c = n.type(a);
                return 'function' === c || n.isWindow(a) ? !1 : 1 === a.nodeType && b ? !0 : 'array' === c || 0 === b || 'number' == typeof b && b > 0 && b - 1 in a;
            }
            var t = function(a) {
                var b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u = 'sizzle' + -new Date(), v = a.document, w = 0, x = 0, y = gb(), z = gb(), A = gb(), B = function B(a, b) {
                    return a === b && (l = !0), 0;
                }, C = 'undefined', D = 1 << 31, E = {}.hasOwnProperty, F = [], G = F.pop, H = F.push, I = F.push, J = F.slice, K = F.indexOf || function(a) {
                    for (var b = 0, c = this.length; c > b; b++) {
                        if (this[b] === a) return b;
                    }
                    return -1;
                }, L = 'checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped', M = '[\\x20\\t\\r\\n\\f]', N = '(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+', O = N.replace('w', 'w#'), P = '\\[' + M + '*(' + N + ')(?:' + M + '*([*^$|!~]?=)' + M + '*(?:\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)"|(' + O + '))|)' + M + '*\\]', Q = ':(' + N + ')(?:\\(((\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)")|((?:\\\\.|[^\\\\()[\\]]|' + P + ')*)|.*)\\)|)', R = new RegExp('^' + M + '+|((?:^|[^\\\\])(?:\\\\.)*)' + M + '+$', 'g'), S = new RegExp('^' + M + '*,' + M + '*'), T = new RegExp('^' + M + '*([>+~]|' + M + ')' + M + '*'), U = new RegExp('=' + M + '*([^\\]\'"]*?)' + M + '*\\]', 'g'), V = new RegExp(Q), W = new RegExp('^' + O + '$'), X = {
                    ID: new RegExp('^#(' + N + ')'),
                    CLASS: new RegExp('^\\.(' + N + ')'),
                    TAG: new RegExp('^(' + N.replace('w', 'w*') + ')'),
                    ATTR: new RegExp('^' + P),
                    PSEUDO: new RegExp('^' + Q),
                    CHILD: new RegExp('^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(' + M + '*(even|odd|(([+-]|)(\\d*)n|)' + M + '*(?:([+-]|)' + M + '*(\\d+)|))' + M + '*\\)|)', 'i'),
                    bool: new RegExp('^(?:' + L + ')$', 'i'),
                    needsContext: new RegExp('^' + M + '*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(' + M + '*((?:-\\d)?\\d*)' + M + '*\\)|)(?=[^-]|$)', 'i')
                }, Y = /^(?:input|select|textarea|button)$/i, Z = /^h\d$/i, $ = /^[^{]+\{\s*\[native \w/, _ = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, ab = /[+~]/, bb = /'|\\/g, cb = new RegExp('\\\\([\\da-f]{1,6}' + M + '?|(' + M + ')|.)', 'ig'), db = function db(a, b, c) {
                    var d = '0x' + b - 65536;
                    return d !== d || c ? b : 0 > d ? String.fromCharCode(d + 65536) : String.fromCharCode(d >> 10 | 55296, 1023 & d | 56320);
                };
                try {
                    I.apply(F = J.call(v.childNodes), v.childNodes), F[v.childNodes.length].nodeType;
                } catch (eb) {
                    I = {
                        apply: F.length ? function(a, b) {
                            H.apply(a, J.call(b));
                        } : function(a, b) {
                            var c = a.length, d = 0;
                            while (a[c++] = b[d++]) {}
                            a.length = c - 1;
                        }
                    };
                }
                function fb(a, b, d, e) {
                    var f, h, j, k, l, o, r, s, w, x;
                    if ((b ? b.ownerDocument || b : v) !== n && m(b), b = b || n, d = d || [], !a || 'string' != typeof a) return d;
                    if (1 !== (k = b.nodeType) && 9 !== k) return [];
                    if (p && !e) {
                        if (f = _.exec(a)) if (j = f[1]) {
                            if (9 === k) {
                                if (h = b.getElementById(j), !h || !h.parentNode) return d;
                                if (h.id === j) return d.push(h), d;
                            } else if (b.ownerDocument && (h = b.ownerDocument.getElementById(j)) && t(b, h) && h.id === j) return d.push(h), d;
                        } else {
                            if (f[2]) return I.apply(d, b.getElementsByTagName(a)), d;
                            if ((j = f[3]) && c.getElementsByClassName && b.getElementsByClassName) return I.apply(d, b.getElementsByClassName(j)), d;
                        }
                        if (c.qsa && (!q || !q.test(a))) {
                            if (s = r = u, w = b, x = 9 === k && a, 1 === k && 'object' !== b.nodeName.toLowerCase()) {
                                o = g(a), (r = b.getAttribute('id')) ? s = r.replace(bb, '\\$&') : b.setAttribute('id', s), s = '[id=\'' + s + '\'] ', l = o.length;
                                while (l--) {
                                    o[l] = s + qb(o[l]);
                                }
                                w = ab.test(a) && ob(b.parentNode) || b, x = o.join(',');
                            }
                            if (x) try {
                                return I.apply(d, w.querySelectorAll(x)), d;
                            } catch (y) {} finally {
                                r || b.removeAttribute('id');
                            }
                        }
                    }
                    return i(a.replace(R, '$1'), b, d, e);
                }
                function gb() {
                    var a = [];
                    function b(c, e) {
                        return a.push(c + ' ') > d.cacheLength && delete b[a.shift()], b[c + ' '] = e;
                    }
                    return b;
                }
                function hb(a) {
                    return a[u] = !0, a;
                }
                function ib(a) {
                    var b = n.createElement('div');
                    try {
                        return !!a(b);
                    } catch (c) {
                        return !1;
                    } finally {
                        b.parentNode && b.parentNode.removeChild(b), b = null;
                    }
                }
                function jb(a, b) {
                    var c = a.split('|'), e = a.length;
                    while (e--) {
                        d.attrHandle[c[e]] = b;
                    }
                }
                function kb(a, b) {
                    var c = b && a, d = c && 1 === a.nodeType && 1 === b.nodeType && (~b.sourceIndex || D) - (~a.sourceIndex || D);
                    if (d) return d;
                    if (c) while (c = c.nextSibling) {
                        if (c === b) return -1;
                    }
                    return a ? 1 : -1;
                }
                function lb(a) {
                    return function(b) {
                        var c = b.nodeName.toLowerCase();
                        return 'input' === c && b.type === a;
                    };
                }
                function mb(a) {
                    return function(b) {
                        var c = b.nodeName.toLowerCase();
                        return ('input' === c || 'button' === c) && b.type === a;
                    };
                }
                function nb(a) {
                    return hb(function(b) {
                        return b = +b, hb(function(c, d) {
                            var e, f = a([], c.length, b), g = f.length;
                            while (g--) {
                                c[e = f[g]] && (c[e] = !(d[e] = c[e]));
                            }
                        });
                    });
                }
                function ob(a) {
                    return a && _typeof(a.getElementsByTagName) !== C && a;
                }
                c = fb.support = {}, f = fb.isXML = function(a) {
                    var b = a && (a.ownerDocument || a).documentElement;
                    return b ? 'HTML' !== b.nodeName : !1;
                }, m = fb.setDocument = function(a) {
                    var b, e = a ? a.ownerDocument || a : v, g = e.defaultView;
                    return e !== n && 9 === e.nodeType && e.documentElement ? (n = e, o = e.documentElement, p = !f(e), g && g !== g.top && (g.addEventListener ? g.addEventListener('unload', function() {
                        m();
                    }, !1) : g.attachEvent && g.attachEvent('onunload', function() {
                        m();
                    })), c.attributes = ib(function(a) {
                        return a.className = 'i', !a.getAttribute('className');
                    }), c.getElementsByTagName = ib(function(a) {
                        return a.appendChild(e.createComment('')), !a.getElementsByTagName('*').length;
                    }), c.getElementsByClassName = $.test(e.getElementsByClassName) && ib(function(a) {
                        return a.innerHTML = '<div class=\'a\'></div><div class=\'a i\'></div>', a.firstChild.className = 'i', 2 === a.getElementsByClassName('i').length;
                    }), c.getById = ib(function(a) {
                        return o.appendChild(a).id = u, !e.getElementsByName || !e.getElementsByName(u).length;
                    }), c.getById ? (d.find.ID = function(a, b) {
                        if (_typeof(b.getElementById) !== C && p) {
                            var c = b.getElementById(a);
                            return c && c.parentNode ? [ c ] : [];
                        }
                    }, d.filter.ID = function(a) {
                        var b = a.replace(cb, db);
                        return function(a) {
                            return a.getAttribute('id') === b;
                        };
                    }) : (delete d.find.ID, d.filter.ID = function(a) {
                        var b = a.replace(cb, db);
                        return function(a) {
                            var c = _typeof(a.getAttributeNode) !== C && a.getAttributeNode('id');
                            return c && c.value === b;
                        };
                    }), d.find.TAG = c.getElementsByTagName ? function(a, b) {
                        return _typeof(b.getElementsByTagName) !== C ? b.getElementsByTagName(a) : void 0;
                    } : function(a, b) {
                        var c, d = [], e = 0, f = b.getElementsByTagName(a);
                        if ('*' === a) {
                            while (c = f[e++]) {
                                1 === c.nodeType && d.push(c);
                            }
                            return d;
                        }
                        return f;
                    }, d.find.CLASS = c.getElementsByClassName && function(a, b) {
                        return _typeof(b.getElementsByClassName) !== C && p ? b.getElementsByClassName(a) : void 0;
                    }, r = [], q = [], (c.qsa = $.test(e.querySelectorAll)) && (ib(function(a) {
                        a.innerHTML = '<select msallowclip=\'\'><option selected=\'\'></option></select>', a.querySelectorAll('[msallowclip^=\'\']').length && q.push('[*^$]=' + M + '*(?:\'\'|"")'), 
                        a.querySelectorAll('[selected]').length || q.push('\\[' + M + '*(?:value|' + L + ')'), a.querySelectorAll(':checked').length || q.push(':checked');
                    }), ib(function(a) {
                        var b = e.createElement('input');
                        b.setAttribute('type', 'hidden'), a.appendChild(b).setAttribute('name', 'D'), a.querySelectorAll('[name=d]').length && q.push('name' + M + '*[*^$|!~]?='), 
                        a.querySelectorAll(':enabled').length || q.push(':enabled', ':disabled'), a.querySelectorAll('*,:x'), q.push(',.*:');
                    })), (c.matchesSelector = $.test(s = o.matches || o.webkitMatchesSelector || o.mozMatchesSelector || o.oMatchesSelector || o.msMatchesSelector)) && ib(function(a) {
                        c.disconnectedMatch = s.call(a, 'div'), s.call(a, '[s!=\'\']:x'), r.push('!=', Q);
                    }), q = q.length && new RegExp(q.join('|')), r = r.length && new RegExp(r.join('|')), b = $.test(o.compareDocumentPosition), t = b || $.test(o.contains) ? function(a, b) {
                        var c = 9 === a.nodeType ? a.documentElement : a, d = b && b.parentNode;
                        return a === d || !(!d || 1 !== d.nodeType || !(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d)));
                    } : function(a, b) {
                        if (b) while (b = b.parentNode) {
                            if (b === a) return !0;
                        }
                        return !1;
                    }, B = b ? function(a, b) {
                        if (a === b) return l = !0, 0;
                        var d = !a.compareDocumentPosition - !b.compareDocumentPosition;
                        return d ? d : (d = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & d || !c.sortDetached && b.compareDocumentPosition(a) === d ? a === e || a.ownerDocument === v && t(v, a) ? -1 : b === e || b.ownerDocument === v && t(v, b) ? 1 : k ? K.call(k, a) - K.call(k, b) : 0 : 4 & d ? -1 : 1);
                    } : function(a, b) {
                        if (a === b) return l = !0, 0;
                        var c, d = 0, f = a.parentNode, g = b.parentNode, h = [ a ], i = [ b ];
                        if (!f || !g) return a === e ? -1 : b === e ? 1 : f ? -1 : g ? 1 : k ? K.call(k, a) - K.call(k, b) : 0;
                        if (f === g) return kb(a, b);
                        c = a;
                        while (c = c.parentNode) {
                            h.unshift(c);
                        }
                        c = b;
                        while (c = c.parentNode) {
                            i.unshift(c);
                        }
                        while (h[d] === i[d]) {
                            d++;
                        }
                        return d ? kb(h[d], i[d]) : h[d] === v ? -1 : i[d] === v ? 1 : 0;
                    }, e) : n;
                }, fb.matches = function(a, b) {
                    return fb(a, null, null, b);
                }, fb.matchesSelector = function(a, b) {
                    if ((a.ownerDocument || a) !== n && m(a), b = b.replace(U, '=\'$1\']'), !(!c.matchesSelector || !p || r && r.test(b) || q && q.test(b))) try {
                        var d = s.call(a, b);
                        if (d || c.disconnectedMatch || a.document && 11 !== a.document.nodeType) return d;
                    } catch (e) {}
                    return fb(b, n, null, [ a ]).length > 0;
                }, fb.contains = function(a, b) {
                    return (a.ownerDocument || a) !== n && m(a), t(a, b);
                }, fb.attr = function(a, b) {
                    (a.ownerDocument || a) !== n && m(a);
                    var e = d.attrHandle[b.toLowerCase()], f = e && E.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : void 0;
                    return void 0 !== f ? f : c.attributes || !p ? a.getAttribute(b) : (f = a.getAttributeNode(b)) && f.specified ? f.value : null;
                }, fb.error = function(a) {
                    throw new Error('Syntax error, unrecognized expression: ' + a);
                }, fb.uniqueSort = function(a) {
                    var b, d = [], e = 0, f = 0;
                    if (l = !c.detectDuplicates, k = !c.sortStable && a.slice(0), a.sort(B), l) {
                        while (b = a[f++]) {
                            b === a[f] && (e = d.push(f));
                        }
                        while (e--) {
                            a.splice(d[e], 1);
                        }
                    }
                    return k = null, a;
                }, e = fb.getText = function(a) {
                    var b, c = '', d = 0, f = a.nodeType;
                    if (f) {
                        if (1 === f || 9 === f || 11 === f) {
                            if ('string' == typeof a.textContent) return a.textContent;
                            for (a = a.firstChild; a; a = a.nextSibling) {
                                c += e(a);
                            }
                        } else if (3 === f || 4 === f) return a.nodeValue;
                    } else while (b = a[d++]) {
                        c += e(b);
                    }
                    return c;
                }, d = fb.selectors = {
                    cacheLength: 50,
                    createPseudo: hb,
                    match: X,
                    attrHandle: {},
                    find: {},
                    relative: {
                        '>': {
                            dir: 'parentNode',
                            first: !0
                        },
                        ' ': {
                            dir: 'parentNode'
                        },
                        '+': {
                            dir: 'previousSibling',
                            first: !0
                        },
                        '~': {
                            dir: 'previousSibling'
                        }
                    },
                    preFilter: {
                        ATTR: function ATTR(a) {
                            return a[1] = a[1].replace(cb, db), a[3] = (a[3] || a[4] || a[5] || '').replace(cb, db), '~=' === a[2] && (a[3] = ' ' + a[3] + ' '), a.slice(0, 4);
                        },
                        CHILD: function CHILD(a) {
                            return a[1] = a[1].toLowerCase(), 'nth' === a[1].slice(0, 3) ? (a[3] || fb.error(a[0]), a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * ('even' === a[3] || 'odd' === a[3])), 
                            a[5] = +(a[7] + a[8] || 'odd' === a[3])) : a[3] && fb.error(a[0]), a;
                        },
                        PSEUDO: function PSEUDO(a) {
                            var b, c = !a[6] && a[2];
                            return X.CHILD.test(a[0]) ? null : (a[3] ? a[2] = a[4] || a[5] || '' : c && V.test(c) && (b = g(c, !0)) && (b = c.indexOf(')', c.length - b) - c.length) && (a[0] = a[0].slice(0, b), 
                            a[2] = c.slice(0, b)), a.slice(0, 3));
                        }
                    },
                    filter: {
                        TAG: function TAG(a) {
                            var b = a.replace(cb, db).toLowerCase();
                            return '*' === a ? function() {
                                return !0;
                            } : function(a) {
                                return a.nodeName && a.nodeName.toLowerCase() === b;
                            };
                        },
                        CLASS: function CLASS(a) {
                            var b = y[a + ' '];
                            return b || (b = new RegExp('(^|' + M + ')' + a + '(' + M + '|$)')) && y(a, function(a) {
                                return b.test('string' == typeof a.className && a.className || _typeof(a.getAttribute) !== C && a.getAttribute('class') || '');
                            });
                        },
                        ATTR: function ATTR(a, b, c) {
                            return function(d) {
                                var e = fb.attr(d, a);
                                return null == e ? '!=' === b : b ? (e += '', '=' === b ? e === c : '!=' === b ? e !== c : '^=' === b ? c && 0 === e.indexOf(c) : '*=' === b ? c && e.indexOf(c) > -1 : '$=' === b ? c && e.slice(-c.length) === c : '~=' === b ? (' ' + e + ' ').indexOf(c) > -1 : '|=' === b ? e === c || e.slice(0, c.length + 1) === c + '-' : !1) : !0;
                            };
                        },
                        CHILD: function CHILD(a, b, c, d, e) {
                            var f = 'nth' !== a.slice(0, 3), g = 'last' !== a.slice(-4), h = 'of-type' === b;
                            return 1 === d && 0 === e ? function(a) {
                                return !!a.parentNode;
                            } : function(b, c, i) {
                                var j, k, l, m, n, o, p = f !== g ? 'nextSibling' : 'previousSibling', q = b.parentNode, r = h && b.nodeName.toLowerCase(), s = !i && !h;
                                if (q) {
                                    if (f) {
                                        while (p) {
                                            l = b;
                                            while (l = l[p]) {
                                                if (h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) return !1;
                                            }
                                            o = p = 'only' === a && !o && 'nextSibling';
                                        }
                                        return !0;
                                    }
                                    if (o = [ g ? q.firstChild : q.lastChild ], g && s) {
                                        k = q[u] || (q[u] = {}), j = k[a] || [], n = j[0] === w && j[1], m = j[0] === w && j[2], l = n && q.childNodes[n];
                                        while (l = ++n && l && l[p] || (m = n = 0) || o.pop()) {
                                            if (1 === l.nodeType && ++m && l === b) {
                                                k[a] = [ w, n, m ];
                                                break;
                                            }
                                        }
                                    } else if (s && (j = (b[u] || (b[u] = {}))[a]) && j[0] === w) m = j[1]; else while (l = ++n && l && l[p] || (m = n = 0) || o.pop()) {
                                        if ((h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) && ++m && (s && ((l[u] || (l[u] = {}))[a] = [ w, m ]), l === b)) break;
                                    }
                                    return m -= e, m === d || m % d === 0 && m / d >= 0;
                                }
                            };
                        },
                        PSEUDO: function PSEUDO(a, b) {
                            var c, e = d.pseudos[a] || d.setFilters[a.toLowerCase()] || fb.error('unsupported pseudo: ' + a);
                            return e[u] ? e(b) : e.length > 1 ? (c = [ a, a, '', b ], d.setFilters.hasOwnProperty(a.toLowerCase()) ? hb(function(a, c) {
                                var d, f = e(a, b), g = f.length;
                                while (g--) {
                                    d = K.call(a, f[g]), a[d] = !(c[d] = f[g]);
                                }
                            }) : function(a) {
                                return e(a, 0, c);
                            }) : e;
                        }
                    },
                    pseudos: {
                        not: hb(function(a) {
                            var b = [], c = [], d = h(a.replace(R, '$1'));
                            return d[u] ? hb(function(a, b, c, e) {
                                var f, g = d(a, null, e, []), h = a.length;
                                while (h--) {
                                    (f = g[h]) && (a[h] = !(b[h] = f));
                                }
                            }) : function(a, e, f) {
                                return b[0] = a, d(b, null, f, c), !c.pop();
                            };
                        }),
                        has: hb(function(a) {
                            return function(b) {
                                return fb(a, b).length > 0;
                            };
                        }),
                        contains: hb(function(a) {
                            return function(b) {
                                return (b.textContent || b.innerText || e(b)).indexOf(a) > -1;
                            };
                        }),
                        lang: hb(function(a) {
                            return W.test(a || '') || fb.error('unsupported lang: ' + a), a = a.replace(cb, db).toLowerCase(), function(b) {
                                var c;
                                do {
                                    if (c = p ? b.lang : b.getAttribute('xml:lang') || b.getAttribute('lang')) return c = c.toLowerCase(), c === a || 0 === c.indexOf(a + '-');
                                } while ((b = b.parentNode) && 1 === b.nodeType);
                                return !1;
                            };
                        }),
                        target: function target(b) {
                            var c = a.location && a.location.hash;
                            return c && c.slice(1) === b.id;
                        },
                        root: function root(a) {
                            return a === o;
                        },
                        focus: function focus(a) {
                            return a === n.activeElement && (!n.hasFocus || n.hasFocus()) && !!(a.type || a.href || ~a.tabIndex);
                        },
                        enabled: function enabled(a) {
                            return a.disabled === !1;
                        },
                        disabled: function disabled(a) {
                            return a.disabled === !0;
                        },
                        checked: function checked(a) {
                            var b = a.nodeName.toLowerCase();
                            return 'input' === b && !!a.checked || 'option' === b && !!a.selected;
                        },
                        selected: function selected(a) {
                            return a.parentNode && a.parentNode.selectedIndex, a.selected === !0;
                        },
                        empty: function empty(a) {
                            for (a = a.firstChild; a; a = a.nextSibling) {
                                if (a.nodeType < 6) return !1;
                            }
                            return !0;
                        },
                        parent: function parent(a) {
                            return !d.pseudos.empty(a);
                        },
                        header: function header(a) {
                            return Z.test(a.nodeName);
                        },
                        input: function input(a) {
                            return Y.test(a.nodeName);
                        },
                        button: function button(a) {
                            var b = a.nodeName.toLowerCase();
                            return 'input' === b && 'button' === a.type || 'button' === b;
                        },
                        text: function text(a) {
                            var b;
                            return 'input' === a.nodeName.toLowerCase() && 'text' === a.type && (null == (b = a.getAttribute('type')) || 'text' === b.toLowerCase());
                        },
                        first: nb(function() {
                            return [ 0 ];
                        }),
                        last: nb(function(a, b) {
                            return [ b - 1 ];
                        }),
                        eq: nb(function(a, b, c) {
                            return [ 0 > c ? c + b : c ];
                        }),
                        even: nb(function(a, b) {
                            for (var c = 0; b > c; c += 2) {
                                a.push(c);
                            }
                            return a;
                        }),
                        odd: nb(function(a, b) {
                            for (var c = 1; b > c; c += 2) {
                                a.push(c);
                            }
                            return a;
                        }),
                        lt: nb(function(a, b, c) {
                            for (var d = 0 > c ? c + b : c; --d >= 0; ) {
                                a.push(d);
                            }
                            return a;
                        }),
                        gt: nb(function(a, b, c) {
                            for (var d = 0 > c ? c + b : c; ++d < b; ) {
                                a.push(d);
                            }
                            return a;
                        })
                    }
                }, d.pseudos.nth = d.pseudos.eq;
                for (b in {
                    radio: !0,
                    checkbox: !0,
                    file: !0,
                    password: !0,
                    image: !0
                }) {
                    d.pseudos[b] = lb(b);
                }
                for (b in {
                    submit: !0,
                    reset: !0
                }) {
                    d.pseudos[b] = mb(b);
                }
                function pb() {}
                pb.prototype = d.filters = d.pseudos, d.setFilters = new pb(), g = fb.tokenize = function(a, b) {
                    var c, e, f, g, h, i, j, k = z[a + ' '];
                    if (k) return b ? 0 : k.slice(0);
                    h = a, i = [], j = d.preFilter;
                    while (h) {
                        (!c || (e = S.exec(h))) && (e && (h = h.slice(e[0].length) || h), i.push(f = [])), c = !1, (e = T.exec(h)) && (c = e.shift(), f.push({
                            value: c,
                            type: e[0].replace(R, ' ')
                        }), h = h.slice(c.length));
                        for (g in d.filter) {
                            !(e = X[g].exec(h)) || j[g] && !(e = j[g](e)) || (c = e.shift(), f.push({
                                value: c,
                                type: g,
                                matches: e
                            }), h = h.slice(c.length));
                        }
                        if (!c) break;
                    }
                    return b ? h.length : h ? fb.error(a) : z(a, i).slice(0);
                };
                function qb(a) {
                    for (var b = 0, c = a.length, d = ''; c > b; b++) {
                        d += a[b].value;
                    }
                    return d;
                }
                function rb(a, b, c) {
                    var d = b.dir, e = c && 'parentNode' === d, f = x++;
                    return b.first ? function(b, c, f) {
                        while (b = b[d]) {
                            if (1 === b.nodeType || e) return a(b, c, f);
                        }
                    } : function(b, c, g) {
                        var h, i, j = [ w, f ];
                        if (g) {
                            while (b = b[d]) {
                                if ((1 === b.nodeType || e) && a(b, c, g)) return !0;
                            }
                        } else while (b = b[d]) {
                            if (1 === b.nodeType || e) {
                                if (i = b[u] || (b[u] = {}), (h = i[d]) && h[0] === w && h[1] === f) return j[2] = h[2];
                                if (i[d] = j, j[2] = a(b, c, g)) return !0;
                            }
                        }
                    };
                }
                function sb(a) {
                    return a.length > 1 ? function(b, c, d) {
                        var e = a.length;
                        while (e--) {
                            if (!a[e](b, c, d)) return !1;
                        }
                        return !0;
                    } : a[0];
                }
                function tb(a, b, c) {
                    for (var d = 0, e = b.length; e > d; d++) {
                        fb(a, b[d], c);
                    }
                    return c;
                }
                function ub(a, b, c, d, e) {
                    for (var f, g = [], h = 0, i = a.length, j = null != b; i > h; h++) {
                        (f = a[h]) && (!c || c(f, d, e)) && (g.push(f), j && b.push(h));
                    }
                    return g;
                }
                function vb(a, b, c, d, e, f) {
                    return d && !d[u] && (d = vb(d)), e && !e[u] && (e = vb(e, f)), hb(function(f, g, h, i) {
                        var j, k, l, m = [], n = [], o = g.length, p = f || tb(b || '*', h.nodeType ? [ h ] : h, []), q = !a || !f && b ? p : ub(p, m, a, h, i), r = c ? e || (f ? a : o || d) ? [] : g : q;
                        if (c && c(q, r, h, i), d) {
                            j = ub(r, n), d(j, [], h, i), k = j.length;
                            while (k--) {
                                (l = j[k]) && (r[n[k]] = !(q[n[k]] = l));
                            }
                        }
                        if (f) {
                            if (e || a) {
                                if (e) {
                                    j = [], k = r.length;
                                    while (k--) {
                                        (l = r[k]) && j.push(q[k] = l);
                                    }
                                    e(null, r = [], j, i);
                                }
                                k = r.length;
                                while (k--) {
                                    (l = r[k]) && (j = e ? K.call(f, l) : m[k]) > -1 && (f[j] = !(g[j] = l));
                                }
                            }
                        } else r = ub(r === g ? r.splice(o, r.length) : r), e ? e(null, g, r, i) : I.apply(g, r);
                    });
                }
                function wb(a) {
                    for (var b, c, e, f = a.length, g = d.relative[a[0].type], h = g || d.relative[' '], i = g ? 1 : 0, k = rb(function(a) {
                        return a === b;
                    }, h, !0), l = rb(function(a) {
                        return K.call(b, a) > -1;
                    }, h, !0), m = [ function(a, c, d) {
                        return !g && (d || c !== j) || ((b = c).nodeType ? k(a, c, d) : l(a, c, d));
                    } ]; f > i; i++) {
                        if (c = d.relative[a[i].type]) m = [ rb(sb(m), c) ]; else {
                            if (c = d.filter[a[i].type].apply(null, a[i].matches), c[u]) {
                                for (e = ++i; f > e; e++) {
                                    if (d.relative[a[e].type]) break;
                                }
                                return vb(i > 1 && sb(m), i > 1 && qb(a.slice(0, i - 1).concat({
                                    value: ' ' === a[i - 2].type ? '*' : ''
                                })).replace(R, '$1'), c, e > i && wb(a.slice(i, e)), f > e && wb(a = a.slice(e)), f > e && qb(a));
                            }
                            m.push(c);
                        }
                    }
                    return sb(m);
                }
                function xb(a, b) {
                    var c = b.length > 0, e = a.length > 0, f = function f(_f, g, h, i, k) {
                        var l, m, o, p = 0, q = '0', r = _f && [], s = [], t = j, u = _f || e && d.find.TAG('*', k), v = w += null == t ? 1 : Math.random() || .1, x = u.length;
                        for (k && (j = g !== n && g); q !== x && null != (l = u[q]); q++) {
                            if (e && l) {
                                m = 0;
                                while (o = a[m++]) {
                                    if (o(l, g, h)) {
                                        i.push(l);
                                        break;
                                    }
                                }
                                k && (w = v);
                            }
                            c && ((l = !o && l) && p--, _f && r.push(l));
                        }
                        if (p += q, c && q !== p) {
                            m = 0;
                            while (o = b[m++]) {
                                o(r, s, g, h);
                            }
                            if (_f) {
                                if (p > 0) while (q--) {
                                    r[q] || s[q] || (s[q] = G.call(i));
                                }
                                s = ub(s);
                            }
                            I.apply(i, s), k && !_f && s.length > 0 && p + b.length > 1 && fb.uniqueSort(i);
                        }
                        return k && (w = v, j = t), r;
                    };
                    return c ? hb(f) : f;
                }
                return h = fb.compile = function(a, b) {
                    var c, d = [], e = [], f = A[a + ' '];
                    if (!f) {
                        b || (b = g(a)), c = b.length;
                        while (c--) {
                            f = wb(b[c]), f[u] ? d.push(f) : e.push(f);
                        }
                        f = A(a, xb(e, d)), f.selector = a;
                    }
                    return f;
                }, i = fb.select = function(a, b, e, f) {
                    var i, j, k, l, m, n = 'function' == typeof a && a, o = !f && g(a = n.selector || a);
                    if (e = e || [], 1 === o.length) {
                        if (j = o[0] = o[0].slice(0), j.length > 2 && 'ID' === (k = j[0]).type && c.getById && 9 === b.nodeType && p && d.relative[j[1].type]) {
                            if (b = (d.find.ID(k.matches[0].replace(cb, db), b) || [])[0], !b) return e;
                            n && (b = b.parentNode), a = a.slice(j.shift().value.length);
                        }
                        i = X.needsContext.test(a) ? 0 : j.length;
                        while (i--) {
                            if (k = j[i], d.relative[l = k.type]) break;
                            if ((m = d.find[l]) && (f = m(k.matches[0].replace(cb, db), ab.test(j[0].type) && ob(b.parentNode) || b))) {
                                if (j.splice(i, 1), a = f.length && qb(j), !a) return I.apply(e, f), e;
                                break;
                            }
                        }
                    }
                    return (n || h(a, o))(f, b, !p, e, ab.test(a) && ob(b.parentNode) || b), e;
                }, c.sortStable = u.split('').sort(B).join('') === u, c.detectDuplicates = !!l, m(), c.sortDetached = ib(function(a) {
                    return 1 & a.compareDocumentPosition(n.createElement('div'));
                }), ib(function(a) {
                    return a.innerHTML = '<a href=\'#\'></a>', '#' === a.firstChild.getAttribute('href');
                }) || jb('type|href|height|width', function(a, b, c) {
                    return c ? void 0 : a.getAttribute(b, 'type' === b.toLowerCase() ? 1 : 2);
                }), c.attributes && ib(function(a) {
                    return a.innerHTML = '<input/>', a.firstChild.setAttribute('value', ''), '' === a.firstChild.getAttribute('value');
                }) || jb('value', function(a, b, c) {
                    return c || 'input' !== a.nodeName.toLowerCase() ? void 0 : a.defaultValue;
                }), ib(function(a) {
                    return null == a.getAttribute('disabled');
                }) || jb(L, function(a, b, c) {
                    var d;
                    return c ? void 0 : a[b] === !0 ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null;
                }), fb;
            }(a);
            n.find = t, n.expr = t.selectors, n.expr[':'] = n.expr.pseudos, n.unique = t.uniqueSort, n.text = t.getText, n.isXMLDoc = t.isXML, n.contains = t.contains;
            var u = n.expr.match.needsContext, v = /^<(\w+)\s*\/?>(?:<\/\1>|)$/, w = /^.[^:#\[\.,]*$/;
            function x(a, b, c) {
                if (n.isFunction(b)) return n.grep(a, function(a, d) {
                    return !!b.call(a, d, a) !== c;
                });
                if (b.nodeType) return n.grep(a, function(a) {
                    return a === b !== c;
                });
                if ('string' == typeof b) {
                    if (w.test(b)) return n.filter(b, a, c);
                    b = n.filter(b, a);
                }
                return n.grep(a, function(a) {
                    return g.call(b, a) >= 0 !== c;
                });
            }
            n.filter = function(a, b, c) {
                var d = b[0];
                return c && (a = ':not(' + a + ')'), 1 === b.length && 1 === d.nodeType ? n.find.matchesSelector(d, a) ? [ d ] : [] : n.find.matches(a, n.grep(b, function(a) {
                    return 1 === a.nodeType;
                }));
            }, n.fn.extend({
                find: function find(a) {
                    var b, c = this.length, d = [], e = this;
                    if ('string' != typeof a) return this.pushStack(n(a).filter(function() {
                        for (b = 0; c > b; b++) {
                            if (n.contains(e[b], this)) return !0;
                        }
                    }));
                    for (b = 0; c > b; b++) {
                        n.find(a, e[b], d);
                    }
                    return d = this.pushStack(c > 1 ? n.unique(d) : d), d.selector = this.selector ? this.selector + ' ' + a : a, d;
                },
                filter: function filter(a) {
                    return this.pushStack(x(this, a || [], !1));
                },
                not: function not(a) {
                    return this.pushStack(x(this, a || [], !0));
                },
                is: function is(a) {
                    return !!x(this, 'string' == typeof a && u.test(a) ? n(a) : a || [], !1).length;
                }
            });
            var y, z = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, A = n.fn.init = function(a, b) {
                var c, d;
                if (!a) return this;
                if ('string' == typeof a) {
                    if (c = '<' === a[0] && '>' === a[a.length - 1] && a.length >= 3 ? [ null, a, null ] : z.exec(a), !c || !c[1] && b) return !b || b.jquery ? (b || y).find(a) : this.constructor(b).find(a);
                    if (c[1]) {
                        if (b = b instanceof n ? b[0] : b, n.merge(this, n.parseHTML(c[1], b && b.nodeType ? b.ownerDocument || b : l, !0)), v.test(c[1]) && n.isPlainObject(b)) for (c in b) {
                            n.isFunction(this[c]) ? this[c](b[c]) : this.attr(c, b[c]);
                        }
                        return this;
                    }
                    return d = l.getElementById(c[2]), d && d.parentNode && (this.length = 1, this[0] = d), this.context = l, this.selector = a, this;
                }
                return a.nodeType ? (this.context = this[0] = a, this.length = 1, this) : n.isFunction(a) ? 'undefined' != typeof y.ready ? y.ready(a) : a(n) : (void 0 !== a.selector && (this.selector = a.selector, 
                this.context = a.context), n.makeArray(a, this));
            };
            A.prototype = n.fn, y = n(l);
            var B = /^(?:parents|prev(?:Until|All))/, C = {
                children: !0,
                contents: !0,
                next: !0,
                prev: !0
            };
            n.extend({
                dir: function dir(a, b, c) {
                    var d = [], e = void 0 !== c;
                    while ((a = a[b]) && 9 !== a.nodeType) {
                        if (1 === a.nodeType) {
                            if (e && n(a).is(c)) break;
                            d.push(a);
                        }
                    }
                    return d;
                },
                sibling: function sibling(a, b) {
                    for (var c = []; a; a = a.nextSibling) {
                        1 === a.nodeType && a !== b && c.push(a);
                    }
                    return c;
                }
            }), n.fn.extend({
                has: function has(a) {
                    var b = n(a, this), c = b.length;
                    return this.filter(function() {
                        for (var a = 0; c > a; a++) {
                            if (n.contains(this, b[a])) return !0;
                        }
                    });
                },
                closest: function closest(a, b) {
                    for (var c, d = 0, e = this.length, f = [], g = u.test(a) || 'string' != typeof a ? n(a, b || this.context) : 0; e > d; d++) {
                        for (c = this[d]; c && c !== b; c = c.parentNode) {
                            if (c.nodeType < 11 && (g ? g.index(c) > -1 : 1 === c.nodeType && n.find.matchesSelector(c, a))) {
                                f.push(c);
                                break;
                            }
                        }
                    }
                    return this.pushStack(f.length > 1 ? n.unique(f) : f);
                },
                index: function index(a) {
                    return a ? 'string' == typeof a ? g.call(n(a), this[0]) : g.call(this, a.jquery ? a[0] : a) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
                },
                add: function add(a, b) {
                    return this.pushStack(n.unique(n.merge(this.get(), n(a, b))));
                },
                addBack: function addBack(a) {
                    return this.add(null == a ? this.prevObject : this.prevObject.filter(a));
                }
            });
            function D(a, b) {
                while ((a = a[b]) && 1 !== a.nodeType) {}
                return a;
            }
            n.each({
                parent: function parent(a) {
                    var b = a.parentNode;
                    return b && 11 !== b.nodeType ? b : null;
                },
                parents: function parents(a) {
                    return n.dir(a, 'parentNode');
                },
                parentsUntil: function parentsUntil(a, b, c) {
                    return n.dir(a, 'parentNode', c);
                },
                next: function next(a) {
                    return D(a, 'nextSibling');
                },
                prev: function prev(a) {
                    return D(a, 'previousSibling');
                },
                nextAll: function nextAll(a) {
                    return n.dir(a, 'nextSibling');
                },
                prevAll: function prevAll(a) {
                    return n.dir(a, 'previousSibling');
                },
                nextUntil: function nextUntil(a, b, c) {
                    return n.dir(a, 'nextSibling', c);
                },
                prevUntil: function prevUntil(a, b, c) {
                    return n.dir(a, 'previousSibling', c);
                },
                siblings: function siblings(a) {
                    return n.sibling((a.parentNode || {}).firstChild, a);
                },
                children: function children(a) {
                    return n.sibling(a.firstChild);
                },
                contents: function contents(a) {
                    return a.contentDocument || n.merge([], a.childNodes);
                }
            }, function(a, b) {
                n.fn[a] = function(c, d) {
                    var e = n.map(this, b, c);
                    return 'Until' !== a.slice(-5) && (d = c), d && 'string' == typeof d && (e = n.filter(d, e)), this.length > 1 && (C[a] || n.unique(e), B.test(a) && e.reverse()), 
                    this.pushStack(e);
                };
            });
            var E = /\S+/g, F = {};
            function G(a) {
                var b = F[a] = {};
                return n.each(a.match(E) || [], function(a, c) {
                    b[c] = !0;
                }), b;
            }
            n.Callbacks = function(a) {
                a = 'string' == typeof a ? F[a] || G(a) : n.extend({}, a);
                var b, c, d, e, f, g, h = [], i = !a.once && [], j = function j(l) {
                    for (b = a.memory && l, c = !0, g = e || 0, e = 0, f = h.length, d = !0; h && f > g; g++) {
                        if (h[g].apply(l[0], l[1]) === !1 && a.stopOnFalse) {
                            b = !1;
                            break;
                        }
                    }
                    d = !1, h && (i ? i.length && j(i.shift()) : b ? h = [] : k.disable());
                }, k = {
                    add: function add() {
                        if (h) {
                            var c = h.length;
                            !function g(b) {
                                n.each(b, function(b, c) {
                                    var d = n.type(c);
                                    'function' === d ? a.unique && k.has(c) || h.push(c) : c && c.length && 'string' !== d && g(c);
                                });
                            }(arguments), d ? f = h.length : b && (e = c, j(b));
                        }
                        return this;
                    },
                    remove: function remove() {
                        return h && n.each(arguments, function(a, b) {
                            var c;
                            while ((c = n.inArray(b, h, c)) > -1) {
                                h.splice(c, 1), d && (f >= c && f--, g >= c && g--);
                            }
                        }), this;
                    },
                    has: function has(a) {
                        return a ? n.inArray(a, h) > -1 : !(!h || !h.length);
                    },
                    empty: function empty() {
                        return h = [], f = 0, this;
                    },
                    disable: function disable() {
                        return h = i = b = void 0, this;
                    },
                    disabled: function disabled() {
                        return !h;
                    },
                    lock: function lock() {
                        return i = void 0, b || k.disable(), this;
                    },
                    locked: function locked() {
                        return !i;
                    },
                    fireWith: function fireWith(a, b) {
                        return !h || c && !i || (b = b || [], b = [ a, b.slice ? b.slice() : b ], d ? i.push(b) : j(b)), this;
                    },
                    fire: function fire() {
                        return k.fireWith(this, arguments), this;
                    },
                    fired: function fired() {
                        return !!c;
                    }
                };
                return k;
            }, n.extend({
                Deferred: function Deferred(a) {
                    var b = [ [ 'resolve', 'done', n.Callbacks('once memory'), 'resolved' ], [ 'reject', 'fail', n.Callbacks('once memory'), 'rejected' ], [ 'notify', 'progress', n.Callbacks('memory') ] ], c = 'pending', d = {
                        state: function state() {
                            return c;
                        },
                        always: function always() {
                            return e.done(arguments).fail(arguments), this;
                        },
                        then: function then() {
                            var a = arguments;
                            return n.Deferred(function(c) {
                                n.each(b, function(b, f) {
                                    var g = n.isFunction(a[b]) && a[b];
                                    e[f[1]](function() {
                                        var a = g && g.apply(this, arguments);
                                        a && n.isFunction(a.promise) ? a.promise().done(c.resolve).fail(c.reject).progress(c.notify) : c[f[0] + 'With'](this === d ? c.promise() : this, g ? [ a ] : arguments);
                                    });
                                }), a = null;
                            }).promise();
                        },
                        promise: function promise(a) {
                            return null != a ? n.extend(a, d) : d;
                        }
                    }, e = {};
                    return d.pipe = d.then, n.each(b, function(a, f) {
                        var g = f[2], h = f[3];
                        d[f[1]] = g.add, h && g.add(function() {
                            c = h;
                        }, b[1 ^ a][2].disable, b[2][2].lock), e[f[0]] = function() {
                            return e[f[0] + 'With'](this === e ? d : this, arguments), this;
                        }, e[f[0] + 'With'] = g.fireWith;
                    }), d.promise(e), a && a.call(e, e), e;
                },
                when: function when(a) {
                    var b = 0, c = d.call(arguments), e = c.length, f = 1 !== e || a && n.isFunction(a.promise) ? e : 0, g = 1 === f ? a : n.Deferred(), h = function h(a, b, c) {
                        return function(e) {
                            b[a] = this, c[a] = arguments.length > 1 ? d.call(arguments) : e, c === i ? g.notifyWith(b, c) : --f || g.resolveWith(b, c);
                        };
                    }, i, j, k;
                    if (e > 1) for (i = new Array(e), j = new Array(e), k = new Array(e); e > b; b++) {
                        c[b] && n.isFunction(c[b].promise) ? c[b].promise().done(h(b, k, c)).fail(g.reject).progress(h(b, j, i)) : --f;
                    }
                    return f || g.resolveWith(k, c), g.promise();
                }
            });
            var H;
            n.fn.ready = function(a) {
                return n.ready.promise().done(a), this;
            }, n.extend({
                isReady: !1,
                readyWait: 1,
                holdReady: function holdReady(a) {
                    a ? n.readyWait++ : n.ready(!0);
                },
                ready: function ready(a) {
                    (a === !0 ? --n.readyWait : n.isReady) || (n.isReady = !0, a !== !0 && --n.readyWait > 0 || (H.resolveWith(l, [ n ]), n.fn.triggerHandler && (n(l).triggerHandler('ready'), 
                    n(l).off('ready'))));
                }
            });
            function I() {
                l.removeEventListener('DOMContentLoaded', I, !1), a.removeEventListener('load', I, !1), n.ready();
            }
            n.ready.promise = function(b) {
                return H || (H = n.Deferred(), 'complete' === l.readyState ? setTimeout(n.ready) : (l.addEventListener('DOMContentLoaded', I, !1), a.addEventListener('load', I, !1))), 
                H.promise(b);
            }, n.ready.promise();
            var J = n.access = function(a, b, c, d, e, f, g) {
                var h = 0, i = a.length, j = null == c;
                if ('object' === n.type(c)) {
                    e = !0;
                    for (h in c) {
                        n.access(a, b, h, c[h], !0, f, g);
                    }
                } else if (void 0 !== d && (e = !0, n.isFunction(d) || (g = !0), j && (g ? (b.call(a, d), b = null) : (j = b, b = function b(a, _b2, c) {
                    return j.call(n(a), c);
                })), b)) for (;i > h; h++) {
                    b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));
                }
                return e ? a : j ? b.call(a) : i ? b(a[0], c) : f;
            };
            n.acceptData = function(a) {
                return 1 === a.nodeType || 9 === a.nodeType || !+a.nodeType;
            };
            function K() {
                Object.defineProperty(this.cache = {}, 0, {
                    get: function get() {
                        return {};
                    }
                }), this.expando = n.expando + Math.random();
            }
            K.uid = 1, K.accepts = n.acceptData, K.prototype = {
                key: function key(a) {
                    if (!K.accepts(a)) return 0;
                    var b = {}, c = a[this.expando];
                    if (!c) {
                        c = K.uid++;
                        try {
                            b[this.expando] = {
                                value: c
                            }, Object.defineProperties(a, b);
                        } catch (d) {
                            b[this.expando] = c, n.extend(a, b);
                        }
                    }
                    return this.cache[c] || (this.cache[c] = {}), c;
                },
                set: function set(a, b, c) {
                    var d, e = this.key(a), f = this.cache[e];
                    if ('string' == typeof b) f[b] = c; else if (n.isEmptyObject(f)) n.extend(this.cache[e], b); else for (d in b) {
                        f[d] = b[d];
                    }
                    return f;
                },
                get: function get(a, b) {
                    var c = this.cache[this.key(a)];
                    return void 0 === b ? c : c[b];
                },
                access: function access(a, b, c) {
                    var d;
                    return void 0 === b || b && 'string' == typeof b && void 0 === c ? (d = this.get(a, b), void 0 !== d ? d : this.get(a, n.camelCase(b))) : (this.set(a, b, c), 
                    void 0 !== c ? c : b);
                },
                remove: function remove(a, b) {
                    var c, d, e, f = this.key(a), g = this.cache[f];
                    if (void 0 === b) this.cache[f] = {}; else {
                        n.isArray(b) ? d = b.concat(b.map(n.camelCase)) : (e = n.camelCase(b), b in g ? d = [ b, e ] : (d = e, d = d in g ? [ d ] : d.match(E) || [])), c = d.length;
                        while (c--) {
                            delete g[d[c]];
                        }
                    }
                },
                hasData: function hasData(a) {
                    return !n.isEmptyObject(this.cache[a[this.expando]] || {});
                },
                discard: function discard(a) {
                    a[this.expando] && delete this.cache[a[this.expando]];
                }
            };
            var L = new K(), M = new K(), N = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, O = /([A-Z])/g;
            function P(a, b, c) {
                var d;
                if (void 0 === c && 1 === a.nodeType) if (d = 'data-' + b.replace(O, '-$1').toLowerCase(), c = a.getAttribute(d), 'string' == typeof c) {
                    try {
                        c = 'true' === c ? !0 : 'false' === c ? !1 : 'null' === c ? null : +c + '' === c ? +c : N.test(c) ? n.parseJSON(c) : c;
                    } catch (e) {}
                    M.set(a, b, c);
                } else c = void 0;
                return c;
            }
            n.extend({
                hasData: function hasData(a) {
                    return M.hasData(a) || L.hasData(a);
                },
                data: function data(a, b, c) {
                    return M.access(a, b, c);
                },
                removeData: function removeData(a, b) {
                    M.remove(a, b);
                },
                _data: function _data(a, b, c) {
                    return L.access(a, b, c);
                },
                _removeData: function _removeData(a, b) {
                    L.remove(a, b);
                }
            }), n.fn.extend({
                data: function data(a, b) {
                    var c, d, e, f = this[0], g = f && f.attributes;
                    if (void 0 === a) {
                        if (this.length && (e = M.get(f), 1 === f.nodeType && !L.get(f, 'hasDataAttrs'))) {
                            c = g.length;
                            while (c--) {
                                g[c] && (d = g[c].name, 0 === d.indexOf('data-') && (d = n.camelCase(d.slice(5)), P(f, d, e[d])));
                            }
                            L.set(f, 'hasDataAttrs', !0);
                        }
                        return e;
                    }
                    return 'object' == (typeof a === 'undefined' ? 'undefined' : _typeof(a)) ? this.each(function() {
                        M.set(this, a);
                    }) : J(this, function(b) {
                        var c, d = n.camelCase(a);
                        if (f && void 0 === b) {
                            if (c = M.get(f, a), void 0 !== c) return c;
                            if (c = M.get(f, d), void 0 !== c) return c;
                            if (c = P(f, d, void 0), void 0 !== c) return c;
                        } else this.each(function() {
                            var c = M.get(this, d);
                            M.set(this, d, b), -1 !== a.indexOf('-') && void 0 !== c && M.set(this, a, b);
                        });
                    }, null, b, arguments.length > 1, null, !0);
                },
                removeData: function removeData(a) {
                    return this.each(function() {
                        M.remove(this, a);
                    });
                }
            }), n.extend({
                queue: function queue(a, b, c) {
                    var d;
                    return a ? (b = (b || 'fx') + 'queue', d = L.get(a, b), c && (!d || n.isArray(c) ? d = L.access(a, b, n.makeArray(c)) : d.push(c)), d || []) : void 0;
                },
                dequeue: function dequeue(a, b) {
                    b = b || 'fx';
                    var c = n.queue(a, b), d = c.length, e = c.shift(), f = n._queueHooks(a, b), g = function g() {
                        n.dequeue(a, b);
                    };
                    'inprogress' === e && (e = c.shift(), d--), e && ('fx' === b && c.unshift('inprogress'), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire();
                },
                _queueHooks: function _queueHooks(a, b) {
                    var c = b + 'queueHooks';
                    return L.get(a, c) || L.access(a, c, {
                        empty: n.Callbacks('once memory').add(function() {
                            L.remove(a, [ b + 'queue', c ]);
                        })
                    });
                }
            }), n.fn.extend({
                queue: function queue(a, b) {
                    var c = 2;
                    return 'string' != typeof a && (b = a, a = 'fx', c--), arguments.length < c ? n.queue(this[0], a) : void 0 === b ? this : this.each(function() {
                        var c = n.queue(this, a, b);
                        n._queueHooks(this, a), 'fx' === a && 'inprogress' !== c[0] && n.dequeue(this, a);
                    });
                },
                dequeue: function dequeue(a) {
                    return this.each(function() {
                        n.dequeue(this, a);
                    });
                },
                clearQueue: function clearQueue(a) {
                    return this.queue(a || 'fx', []);
                },
                promise: function promise(a, b) {
                    var c, d = 1, e = n.Deferred(), f = this, g = this.length, h = function h() {
                        --d || e.resolveWith(f, [ f ]);
                    };
                    'string' != typeof a && (b = a, a = void 0), a = a || 'fx';
                    while (g--) {
                        c = L.get(f[g], a + 'queueHooks'), c && c.empty && (d++, c.empty.add(h));
                    }
                    return h(), e.promise(b);
                }
            });
            var Q = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source, R = [ 'Top', 'Right', 'Bottom', 'Left' ], S = function S(a, b) {
                return a = b || a, 'none' === n.css(a, 'display') || !n.contains(a.ownerDocument, a);
            }, T = /^(?:checkbox|radio)$/i;
            !function() {
                var a = l.createDocumentFragment(), b = a.appendChild(l.createElement('div')), c = l.createElement('input');
                c.setAttribute('type', 'radio'), c.setAttribute('checked', 'checked'), c.setAttribute('name', 't'), b.appendChild(c), k.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked, 
                b.innerHTML = '<textarea>x</textarea>', k.noCloneChecked = !!b.cloneNode(!0).lastChild.defaultValue;
            }();
            var U = 'undefined';
            k.focusinBubbles = 'onfocusin' in a;
            var V = /^key/, W = /^(?:mouse|pointer|contextmenu)|click/, X = /^(?:focusinfocus|focusoutblur)$/, Y = /^([^.]*)(?:\.(.+)|)$/;
            function Z() {
                return !0;
            }
            function $() {
                return !1;
            }
            function _() {
                try {
                    return l.activeElement;
                } catch (a) {}
            }
            n.event = {
                global: {},
                add: function add(a, b, c, d, e) {
                    var f, g, h, i, j, k, l, m, o, p, q, r = L.get(a);
                    if (r) {
                        c.handler && (f = c, c = f.handler, e = f.selector), c.guid || (c.guid = n.guid++), (i = r.events) || (i = r.events = {}), (g = r.handle) || (g = r.handle = function(b) {
                            return (typeof n === 'undefined' ? 'undefined' : _typeof(n)) !== U && n.event.triggered !== b.type ? n.event.dispatch.apply(a, arguments) : void 0;
                        }), b = (b || '').match(E) || [ '' ], j = b.length;
                        while (j--) {
                            h = Y.exec(b[j]) || [], o = q = h[1], p = (h[2] || '').split('.').sort(), o && (l = n.event.special[o] || {}, o = (e ? l.delegateType : l.bindType) || o, 
                            l = n.event.special[o] || {}, k = n.extend({
                                type: o,
                                origType: q,
                                data: d,
                                handler: c,
                                guid: c.guid,
                                selector: e,
                                needsContext: e && n.expr.match.needsContext.test(e),
                                namespace: p.join('.')
                            }, f), (m = i[o]) || (m = i[o] = [], m.delegateCount = 0, l.setup && l.setup.call(a, d, p, g) !== !1 || a.addEventListener && a.addEventListener(o, g, !1)), 
                            l.add && (l.add.call(a, k), k.handler.guid || (k.handler.guid = c.guid)), e ? m.splice(m.delegateCount++, 0, k) : m.push(k), n.event.global[o] = !0);
                        }
                    }
                },
                remove: function remove(a, b, c, d, e) {
                    var f, g, h, i, j, k, l, m, o, p, q, r = L.hasData(a) && L.get(a);
                    if (r && (i = r.events)) {
                        b = (b || '').match(E) || [ '' ], j = b.length;
                        while (j--) {
                            if (h = Y.exec(b[j]) || [], o = q = h[1], p = (h[2] || '').split('.').sort(), o) {
                                l = n.event.special[o] || {}, o = (d ? l.delegateType : l.bindType) || o, m = i[o] || [], h = h[2] && new RegExp('(^|\\.)' + p.join('\\.(?:.*\\.|)') + '(\\.|$)'), 
                                g = f = m.length;
                                while (f--) {
                                    k = m[f], !e && q !== k.origType || c && c.guid !== k.guid || h && !h.test(k.namespace) || d && d !== k.selector && ('**' !== d || !k.selector) || (m.splice(f, 1), 
                                    k.selector && m.delegateCount--, l.remove && l.remove.call(a, k));
                                }
                                g && !m.length && (l.teardown && l.teardown.call(a, p, r.handle) !== !1 || n.removeEvent(a, o, r.handle), delete i[o]);
                            } else for (o in i) {
                                n.event.remove(a, o + b[j], c, d, !0);
                            }
                        }
                        n.isEmptyObject(i) && (delete r.handle, L.remove(a, 'events'));
                    }
                },
                trigger: function trigger(b, c, d, e) {
                    var f, g, h, i, k, m, o, p = [ d || l ], q = j.call(b, 'type') ? b.type : b, r = j.call(b, 'namespace') ? b.namespace.split('.') : [];
                    if (g = h = d = d || l, 3 !== d.nodeType && 8 !== d.nodeType && !X.test(q + n.event.triggered) && (q.indexOf('.') >= 0 && (r = q.split('.'), q = r.shift(), 
                    r.sort()), k = q.indexOf(':') < 0 && 'on' + q, b = b[n.expando] ? b : new n.Event(q, 'object' == (typeof b === 'undefined' ? 'undefined' : _typeof(b)) && b), 
                    b.isTrigger = e ? 2 : 3, b.namespace = r.join('.'), b.namespace_re = b.namespace ? new RegExp('(^|\\.)' + r.join('\\.(?:.*\\.|)') + '(\\.|$)') : null, 
                    b.result = void 0, b.target || (b.target = d), c = null == c ? [ b ] : n.makeArray(c, [ b ]), o = n.event.special[q] || {}, e || !o.trigger || o.trigger.apply(d, c) !== !1)) {
                        if (!e && !o.noBubble && !n.isWindow(d)) {
                            for (i = o.delegateType || q, X.test(i + q) || (g = g.parentNode); g; g = g.parentNode) {
                                p.push(g), h = g;
                            }
                            h === (d.ownerDocument || l) && p.push(h.defaultView || h.parentWindow || a);
                        }
                        f = 0;
                        while ((g = p[f++]) && !b.isPropagationStopped()) {
                            b.type = f > 1 ? i : o.bindType || q, m = (L.get(g, 'events') || {})[b.type] && L.get(g, 'handle'), m && m.apply(g, c), m = k && g[k], m && m.apply && n.acceptData(g) && (b.result = m.apply(g, c), 
                            b.result === !1 && b.preventDefault());
                        }
                        return b.type = q, e || b.isDefaultPrevented() || o._default && o._default.apply(p.pop(), c) !== !1 || !n.acceptData(d) || k && n.isFunction(d[q]) && !n.isWindow(d) && (h = d[k], 
                        h && (d[k] = null), n.event.triggered = q, d[q](), n.event.triggered = void 0, h && (d[k] = h)), b.result;
                    }
                },
                dispatch: function dispatch(a) {
                    a = n.event.fix(a);
                    var b, c, e, f, g, h = [], i = d.call(arguments), j = (L.get(this, 'events') || {})[a.type] || [], k = n.event.special[a.type] || {};
                    if (i[0] = a, a.delegateTarget = this, !k.preDispatch || k.preDispatch.call(this, a) !== !1) {
                        h = n.event.handlers.call(this, a, j), b = 0;
                        while ((f = h[b++]) && !a.isPropagationStopped()) {
                            a.currentTarget = f.elem, c = 0;
                            while ((g = f.handlers[c++]) && !a.isImmediatePropagationStopped()) {
                                (!a.namespace_re || a.namespace_re.test(g.namespace)) && (a.handleObj = g, a.data = g.data, e = ((n.event.special[g.origType] || {}).handle || g.handler).apply(f.elem, i), 
                                void 0 !== e && (a.result = e) === !1 && (a.preventDefault(), a.stopPropagation()));
                            }
                        }
                        return k.postDispatch && k.postDispatch.call(this, a), a.result;
                    }
                },
                handlers: function handlers(a, b) {
                    var c, d, e, f, g = [], h = b.delegateCount, i = a.target;
                    if (h && i.nodeType && (!a.button || 'click' !== a.type)) for (;i !== this; i = i.parentNode || this) {
                        if (i.disabled !== !0 || 'click' !== a.type) {
                            for (d = [], c = 0; h > c; c++) {
                                f = b[c], e = f.selector + ' ', void 0 === d[e] && (d[e] = f.needsContext ? n(e, this).index(i) >= 0 : n.find(e, this, null, [ i ]).length), d[e] && d.push(f);
                            }
                            d.length && g.push({
                                elem: i,
                                handlers: d
                            });
                        }
                    }
                    return h < b.length && g.push({
                        elem: this,
                        handlers: b.slice(h)
                    }), g;
                },
                props: 'altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which'.split(' '),
                fixHooks: {},
                keyHooks: {
                    props: 'char charCode key keyCode'.split(' '),
                    filter: function filter(a, b) {
                        return null == a.which && (a.which = null != b.charCode ? b.charCode : b.keyCode), a;
                    }
                },
                mouseHooks: {
                    props: 'button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement'.split(' '),
                    filter: function filter(a, b) {
                        var c, d, e, f = b.button;
                        return null == a.pageX && null != b.clientX && (c = a.target.ownerDocument || l, d = c.documentElement, e = c.body, a.pageX = b.clientX + (d && d.scrollLeft || e && e.scrollLeft || 0) - (d && d.clientLeft || e && e.clientLeft || 0), 
                        a.pageY = b.clientY + (d && d.scrollTop || e && e.scrollTop || 0) - (d && d.clientTop || e && e.clientTop || 0)), a.which || void 0 === f || (a.which = 1 & f ? 1 : 2 & f ? 3 : 4 & f ? 2 : 0), 
                        a;
                    }
                },
                fix: function fix(a) {
                    if (a[n.expando]) return a;
                    var b, c, d, e = a.type, f = a, g = this.fixHooks[e];
                    g || (this.fixHooks[e] = g = W.test(e) ? this.mouseHooks : V.test(e) ? this.keyHooks : {}), d = g.props ? this.props.concat(g.props) : this.props, a = new n.Event(f), 
                    b = d.length;
                    while (b--) {
                        c = d[b], a[c] = f[c];
                    }
                    return a.target || (a.target = l), 3 === a.target.nodeType && (a.target = a.target.parentNode), g.filter ? g.filter(a, f) : a;
                },
                special: {
                    load: {
                        noBubble: !0
                    },
                    focus: {
                        trigger: function trigger() {
                            return this !== _() && this.focus ? (this.focus(), !1) : void 0;
                        },
                        delegateType: 'focusin'
                    },
                    blur: {
                        trigger: function trigger() {
                            return this === _() && this.blur ? (this.blur(), !1) : void 0;
                        },
                        delegateType: 'focusout'
                    },
                    click: {
                        trigger: function trigger() {
                            return 'checkbox' === this.type && this.click && n.nodeName(this, 'input') ? (this.click(), !1) : void 0;
                        },
                        _default: function _default(a) {
                            return n.nodeName(a.target, 'a');
                        }
                    },
                    beforeunload: {
                        postDispatch: function postDispatch(a) {
                            void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result);
                        }
                    }
                },
                simulate: function simulate(a, b, c, d) {
                    var e = n.extend(new n.Event(), c, {
                        type: a,
                        isSimulated: !0,
                        originalEvent: {}
                    });
                    d ? n.event.trigger(e, null, b) : n.event.dispatch.call(b, e), e.isDefaultPrevented() && c.preventDefault();
                }
            }, n.removeEvent = function(a, b, c) {
                a.removeEventListener && a.removeEventListener(b, c, !1);
            }, n.Event = function(a, b) {
                return this instanceof n.Event ? (a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || void 0 === a.defaultPrevented && a.returnValue === !1 ? Z : $) : this.type = a, 
                b && n.extend(this, b), this.timeStamp = a && a.timeStamp || n.now(), void (this[n.expando] = !0)) : new n.Event(a, b);
            }, n.Event.prototype = {
                isDefaultPrevented: $,
                isPropagationStopped: $,
                isImmediatePropagationStopped: $,
                preventDefault: function preventDefault() {
                    var a = this.originalEvent;
                    this.isDefaultPrevented = Z, a && a.preventDefault && a.preventDefault();
                },
                stopPropagation: function stopPropagation() {
                    var a = this.originalEvent;
                    this.isPropagationStopped = Z, a && a.stopPropagation && a.stopPropagation();
                },
                stopImmediatePropagation: function stopImmediatePropagation() {
                    var a = this.originalEvent;
                    this.isImmediatePropagationStopped = Z, a && a.stopImmediatePropagation && a.stopImmediatePropagation(), this.stopPropagation();
                }
            }, n.each({
                mouseenter: 'mouseover',
                mouseleave: 'mouseout',
                pointerenter: 'pointerover',
                pointerleave: 'pointerout'
            }, function(a, b) {
                n.event.special[a] = {
                    delegateType: b,
                    bindType: b,
                    handle: function handle(a) {
                        var c, d = this, e = a.relatedTarget, f = a.handleObj;
                        return (!e || e !== d && !n.contains(d, e)) && (a.type = f.origType, c = f.handler.apply(this, arguments), a.type = b), c;
                    }
                };
            }), k.focusinBubbles || n.each({
                focus: 'focusin',
                blur: 'focusout'
            }, function(a, b) {
                var c = function c(a) {
                    n.event.simulate(b, a.target, n.event.fix(a), !0);
                };
                n.event.special[b] = {
                    setup: function setup() {
                        var d = this.ownerDocument || this, e = L.access(d, b);
                        e || d.addEventListener(a, c, !0), L.access(d, b, (e || 0) + 1);
                    },
                    teardown: function teardown() {
                        var d = this.ownerDocument || this, e = L.access(d, b) - 1;
                        e ? L.access(d, b, e) : (d.removeEventListener(a, c, !0), L.remove(d, b));
                    }
                };
            }), n.fn.extend({
                on: function on(a, b, c, d, e) {
                    var f, g;
                    if ('object' == (typeof a === 'undefined' ? 'undefined' : _typeof(a))) {
                        'string' != typeof b && (c = c || b, b = void 0);
                        for (g in a) {
                            this.on(g, b, c, a[g], e);
                        }
                        return this;
                    }
                    if (null == c && null == d ? (d = b, c = b = void 0) : null == d && ('string' == typeof b ? (d = c, c = void 0) : (d = c, c = b, b = void 0)), d === !1) d = $; else if (!d) return this;
                    return 1 === e && (f = d, d = function d(a) {
                        return n().off(a), f.apply(this, arguments);
                    }, d.guid = f.guid || (f.guid = n.guid++)), this.each(function() {
                        n.event.add(this, a, d, c, b);
                    });
                },
                one: function one(a, b, c, d) {
                    return this.on(a, b, c, d, 1);
                },
                off: function off(a, b, c) {
                    var d, e;
                    if (a && a.preventDefault && a.handleObj) return d = a.handleObj, n(a.delegateTarget).off(d.namespace ? d.origType + '.' + d.namespace : d.origType, d.selector, d.handler), 
                    this;
                    if ('object' == (typeof a === 'undefined' ? 'undefined' : _typeof(a))) {
                        for (e in a) {
                            this.off(e, b, a[e]);
                        }
                        return this;
                    }
                    return (b === !1 || 'function' == typeof b) && (c = b, b = void 0), c === !1 && (c = $), this.each(function() {
                        n.event.remove(this, a, c, b);
                    });
                },
                trigger: function trigger(a, b) {
                    return this.each(function() {
                        n.event.trigger(a, b, this);
                    });
                },
                triggerHandler: function triggerHandler(a, b) {
                    var c = this[0];
                    return c ? n.event.trigger(a, b, c, !0) : void 0;
                }
            });
            var ab = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, bb = /<([\w:]+)/, cb = /<|&#?\w+;/, db = /<(?:script|style|link)/i, eb = /checked\s*(?:[^=]|=\s*.checked.)/i, fb = /^$|\/(?:java|ecma)script/i, gb = /^true\/(.*)/, hb = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, ib = {
                option: [ 1, '<select multiple=\'multiple\'>', '</select>' ],
                thead: [ 1, '<table>', '</table>' ],
                col: [ 2, '<table><colgroup>', '</colgroup></table>' ],
                tr: [ 2, '<table><tbody>', '</tbody></table>' ],
                td: [ 3, '<table><tbody><tr>', '</tr></tbody></table>' ],
                _default: [ 0, '', '' ]
            };
            ib.optgroup = ib.option, ib.tbody = ib.tfoot = ib.colgroup = ib.caption = ib.thead, ib.th = ib.td;
            function jb(a, b) {
                return n.nodeName(a, 'table') && n.nodeName(11 !== b.nodeType ? b : b.firstChild, 'tr') ? a.getElementsByTagName('tbody')[0] || a.appendChild(a.ownerDocument.createElement('tbody')) : a;
            }
            function kb(a) {
                return a.type = (null !== a.getAttribute('type')) + '/' + a.type, a;
            }
            function lb(a) {
                var b = gb.exec(a.type);
                return b ? a.type = b[1] : a.removeAttribute('type'), a;
            }
            function mb(a, b) {
                for (var c = 0, d = a.length; d > c; c++) {
                    L.set(a[c], 'globalEval', !b || L.get(b[c], 'globalEval'));
                }
            }
            function nb(a, b) {
                var c, d, e, f, g, h, i, j;
                if (1 === b.nodeType) {
                    if (L.hasData(a) && (f = L.access(a), g = L.set(b, f), j = f.events)) {
                        delete g.handle, g.events = {};
                        for (e in j) {
                            for (c = 0, d = j[e].length; d > c; c++) {
                                n.event.add(b, e, j[e][c]);
                            }
                        }
                    }
                    M.hasData(a) && (h = M.access(a), i = n.extend({}, h), M.set(b, i));
                }
            }
            function ob(a, b) {
                var c = a.getElementsByTagName ? a.getElementsByTagName(b || '*') : a.querySelectorAll ? a.querySelectorAll(b || '*') : [];
                return void 0 === b || b && n.nodeName(a, b) ? n.merge([ a ], c) : c;
            }
            function pb(a, b) {
                var c = b.nodeName.toLowerCase();
                'input' === c && T.test(a.type) ? b.checked = a.checked : ('input' === c || 'textarea' === c) && (b.defaultValue = a.defaultValue);
            }
            n.extend({
                clone: function clone(a, b, c) {
                    var d, e, f, g, h = a.cloneNode(!0), i = n.contains(a.ownerDocument, a);
                    if (!(k.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || n.isXMLDoc(a))) for (g = ob(h), f = ob(a), d = 0, e = f.length; e > d; d++) {
                        pb(f[d], g[d]);
                    }
                    if (b) if (c) for (f = f || ob(a), g = g || ob(h), d = 0, e = f.length; e > d; d++) {
                        nb(f[d], g[d]);
                    } else nb(a, h);
                    return g = ob(h, 'script'), g.length > 0 && mb(g, !i && ob(a, 'script')), h;
                },
                buildFragment: function buildFragment(a, b, c, d) {
                    for (var e, f, g, h, i, j, k = b.createDocumentFragment(), l = [], m = 0, o = a.length; o > m; m++) {
                        if (e = a[m], e || 0 === e) if ('object' === n.type(e)) n.merge(l, e.nodeType ? [ e ] : e); else if (cb.test(e)) {
                            f = f || k.appendChild(b.createElement('div')), g = (bb.exec(e) || [ '', '' ])[1].toLowerCase(), h = ib[g] || ib._default, f.innerHTML = h[1] + e.replace(ab, '<$1></$2>') + h[2], 
                            j = h[0];
                            while (j--) {
                                f = f.lastChild;
                            }
                            n.merge(l, f.childNodes), f = k.firstChild, f.textContent = '';
                        } else l.push(b.createTextNode(e));
                    }
                    k.textContent = '', m = 0;
                    while (e = l[m++]) {
                        if ((!d || -1 === n.inArray(e, d)) && (i = n.contains(e.ownerDocument, e), f = ob(k.appendChild(e), 'script'), i && mb(f), c)) {
                            j = 0;
                            while (e = f[j++]) {
                                fb.test(e.type || '') && c.push(e);
                            }
                        }
                    }
                    return k;
                },
                cleanData: function cleanData(a) {
                    for (var b, c, d, e, f = n.event.special, g = 0; void 0 !== (c = a[g]); g++) {
                        if (n.acceptData(c) && (e = c[L.expando], e && (b = L.cache[e]))) {
                            if (b.events) for (d in b.events) {
                                f[d] ? n.event.remove(c, d) : n.removeEvent(c, d, b.handle);
                            }
                            L.cache[e] && delete L.cache[e];
                        }
                        delete M.cache[c[M.expando]];
                    }
                }
            }), n.fn.extend({
                text: function text(a) {
                    return J(this, function(a) {
                        return void 0 === a ? n.text(this) : this.empty().each(function() {
                            (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) && (this.textContent = a);
                        });
                    }, null, a, arguments.length);
                },
                append: function append() {
                    return this.domManip(arguments, function(a) {
                        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                            var b = jb(this, a);
                            b.appendChild(a);
                        }
                    });
                },
                prepend: function prepend() {
                    return this.domManip(arguments, function(a) {
                        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                            var b = jb(this, a);
                            b.insertBefore(a, b.firstChild);
                        }
                    });
                },
                before: function before() {
                    return this.domManip(arguments, function(a) {
                        this.parentNode && this.parentNode.insertBefore(a, this);
                    });
                },
                after: function after() {
                    return this.domManip(arguments, function(a) {
                        this.parentNode && this.parentNode.insertBefore(a, this.nextSibling);
                    });
                },
                remove: function remove(a, b) {
                    for (var c, d = a ? n.filter(a, this) : this, e = 0; null != (c = d[e]); e++) {
                        b || 1 !== c.nodeType || n.cleanData(ob(c)), c.parentNode && (b && n.contains(c.ownerDocument, c) && mb(ob(c, 'script')), c.parentNode.removeChild(c));
                    }
                    return this;
                },
                empty: function empty() {
                    for (var a, b = 0; null != (a = this[b]); b++) {
                        1 === a.nodeType && (n.cleanData(ob(a, !1)), a.textContent = '');
                    }
                    return this;
                },
                clone: function clone(a, b) {
                    return a = null == a ? !1 : a, b = null == b ? a : b, this.map(function() {
                        return n.clone(this, a, b);
                    });
                },
                html: function html(a) {
                    return J(this, function(a) {
                        var b = this[0] || {}, c = 0, d = this.length;
                        if (void 0 === a && 1 === b.nodeType) return b.innerHTML;
                        if ('string' == typeof a && !db.test(a) && !ib[(bb.exec(a) || [ '', '' ])[1].toLowerCase()]) {
                            a = a.replace(ab, '<$1></$2>');
                            try {
                                for (;d > c; c++) {
                                    b = this[c] || {}, 1 === b.nodeType && (n.cleanData(ob(b, !1)), b.innerHTML = a);
                                }
                                b = 0;
                            } catch (e) {}
                        }
                        b && this.empty().append(a);
                    }, null, a, arguments.length);
                },
                replaceWith: function replaceWith() {
                    var a = arguments[0];
                    return this.domManip(arguments, function(b) {
                        a = this.parentNode, n.cleanData(ob(this)), a && a.replaceChild(b, this);
                    }), a && (a.length || a.nodeType) ? this : this.remove();
                },
                detach: function detach(a) {
                    return this.remove(a, !0);
                },
                domManip: function domManip(a, b) {
                    a = e.apply([], a);
                    var c, d, f, g, h, i, j = 0, l = this.length, m = this, o = l - 1, p = a[0], q = n.isFunction(p);
                    if (q || l > 1 && 'string' == typeof p && !k.checkClone && eb.test(p)) return this.each(function(c) {
                        var d = m.eq(c);
                        q && (a[0] = p.call(this, c, d.html())), d.domManip(a, b);
                    });
                    if (l && (c = n.buildFragment(a, this[0].ownerDocument, !1, this), d = c.firstChild, 1 === c.childNodes.length && (c = d), d)) {
                        for (f = n.map(ob(c, 'script'), kb), g = f.length; l > j; j++) {
                            h = c, j !== o && (h = n.clone(h, !0, !0), g && n.merge(f, ob(h, 'script'))), b.call(this[j], h, j);
                        }
                        if (g) for (i = f[f.length - 1].ownerDocument, n.map(f, lb), j = 0; g > j; j++) {
                            h = f[j], fb.test(h.type || '') && !L.access(h, 'globalEval') && n.contains(i, h) && (h.src ? n._evalUrl && n._evalUrl(h.src) : n.globalEval(h.textContent.replace(hb, '')));
                        }
                    }
                    return this;
                }
            }), n.each({
                appendTo: 'append',
                prependTo: 'prepend',
                insertBefore: 'before',
                insertAfter: 'after',
                replaceAll: 'replaceWith'
            }, function(a, b) {
                n.fn[a] = function(a) {
                    for (var c, d = [], e = n(a), g = e.length - 1, h = 0; g >= h; h++) {
                        c = h === g ? this : this.clone(!0), n(e[h])[b](c), f.apply(d, c.get());
                    }
                    return this.pushStack(d);
                };
            });
            var qb, rb = {};
            function sb(b, c) {
                var d, e = n(c.createElement(b)).appendTo(c.body), f = a.getDefaultComputedStyle && (d = a.getDefaultComputedStyle(e[0])) ? d.display : n.css(e[0], 'display');
                return e.detach(), f;
            }
            function tb(a) {
                var b = l, c = rb[a];
                return c || (c = sb(a, b), 'none' !== c && c || (qb = (qb || n('<iframe frameborder=\'0\' width=\'0\' height=\'0\'/>')).appendTo(b.documentElement), b = qb[0].contentDocument, 
                b.write(), b.close(), c = sb(a, b), qb.detach()), rb[a] = c), c;
            }
            var ub = /^margin/, vb = new RegExp('^(' + Q + ')(?!px)[a-z%]+$', 'i'), wb = function wb(a) {
                return a.ownerDocument.defaultView.getComputedStyle(a, null);
            };
            function xb(a, b, c) {
                var d, e, f, g, h = a.style;
                return c = c || wb(a), c && (g = c.getPropertyValue(b) || c[b]), c && ('' !== g || n.contains(a.ownerDocument, a) || (g = n.style(a, b)), vb.test(g) && ub.test(b) && (d = h.width, 
                e = h.minWidth, f = h.maxWidth, h.minWidth = h.maxWidth = h.width = g, g = c.width, h.width = d, h.minWidth = e, h.maxWidth = f)), void 0 !== g ? g + '' : g;
            }
            function yb(a, b) {
                return {
                    get: function get() {
                        return a() ? void delete this.get : (this.get = b).apply(this, arguments);
                    }
                };
            }
            !function() {
                var b, c, d = l.documentElement, e = l.createElement('div'), f = l.createElement('div');
                if (f.style) {
                    var _g = function _g() {
                        f.style.cssText = '-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute', 
                        f.innerHTML = '', d.appendChild(e);
                        var g = a.getComputedStyle(f, null);
                        b = '1%' !== g.top, c = '4px' === g.width, d.removeChild(e);
                    };
                    f.style.backgroundClip = 'content-box', f.cloneNode(!0).style.backgroundClip = '', k.clearCloneStyle = 'content-box' === f.style.backgroundClip, e.style.cssText = 'border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute', 
                    e.appendChild(f);
                    a.getComputedStyle && n.extend(k, {
                        pixelPosition: function pixelPosition() {
                            return _g(), b;
                        },
                        boxSizingReliable: function boxSizingReliable() {
                            return null == c && _g(), c;
                        },
                        reliableMarginRight: function reliableMarginRight() {
                            var b, c = f.appendChild(l.createElement('div'));
                            return c.style.cssText = f.style.cssText = '-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0', 
                            c.style.marginRight = c.style.width = '0', f.style.width = '1px', d.appendChild(e), b = !parseFloat(a.getComputedStyle(c, null).marginRight), d.removeChild(e), 
                            b;
                        }
                    });
                }
            }(), n.swap = function(a, b, c, d) {
                var e, f, g = {};
                for (f in b) {
                    g[f] = a.style[f], a.style[f] = b[f];
                }
                e = c.apply(a, d || []);
                for (f in b) {
                    a.style[f] = g[f];
                }
                return e;
            };
            var zb = /^(none|table(?!-c[ea]).+)/, Ab = new RegExp('^(' + Q + ')(.*)$', 'i'), Bb = new RegExp('^([+-])=(' + Q + ')', 'i'), Cb = {
                position: 'absolute',
                visibility: 'hidden',
                display: 'block'
            }, Db = {
                letterSpacing: '0',
                fontWeight: '400'
            }, Eb = [ 'Webkit', 'O', 'Moz', 'ms' ];
            function Fb(a, b) {
                if (b in a) return b;
                var c = b[0].toUpperCase() + b.slice(1), d = b, e = Eb.length;
                while (e--) {
                    if (b = Eb[e] + c, b in a) return b;
                }
                return d;
            }
            function Gb(a, b, c) {
                var d = Ab.exec(b);
                return d ? Math.max(0, d[1] - (c || 0)) + (d[2] || 'px') : b;
            }
            function Hb(a, b, c, d, e) {
                for (var f = c === (d ? 'border' : 'content') ? 4 : 'width' === b ? 1 : 0, g = 0; 4 > f; f += 2) {
                    'margin' === c && (g += n.css(a, c + R[f], !0, e)), d ? ('content' === c && (g -= n.css(a, 'padding' + R[f], !0, e)), 'margin' !== c && (g -= n.css(a, 'border' + R[f] + 'Width', !0, e))) : (g += n.css(a, 'padding' + R[f], !0, e), 
                    'padding' !== c && (g += n.css(a, 'border' + R[f] + 'Width', !0, e)));
                }
                return g;
            }
            function Ib(a, b, c) {
                var d = !0, e = 'width' === b ? a.offsetWidth : a.offsetHeight, f = wb(a), g = 'border-box' === n.css(a, 'boxSizing', !1, f);
                if (0 >= e || null == e) {
                    if (e = xb(a, b, f), (0 > e || null == e) && (e = a.style[b]), vb.test(e)) return e;
                    d = g && (k.boxSizingReliable() || e === a.style[b]), e = parseFloat(e) || 0;
                }
                return e + Hb(a, b, c || (g ? 'border' : 'content'), d, f) + 'px';
            }
            function Jb(a, b) {
                for (var c, d, e, f = [], g = 0, h = a.length; h > g; g++) {
                    d = a[g], d.style && (f[g] = L.get(d, 'olddisplay'), c = d.style.display, b ? (f[g] || 'none' !== c || (d.style.display = ''), '' === d.style.display && S(d) && (f[g] = L.access(d, 'olddisplay', tb(d.nodeName)))) : (e = S(d), 
                    'none' === c && e || L.set(d, 'olddisplay', e ? c : n.css(d, 'display'))));
                }
                for (g = 0; h > g; g++) {
                    d = a[g], d.style && (b && 'none' !== d.style.display && '' !== d.style.display || (d.style.display = b ? f[g] || '' : 'none'));
                }
                return a;
            }
            n.extend({
                cssHooks: {
                    opacity: {
                        get: function get(a, b) {
                            if (b) {
                                var c = xb(a, 'opacity');
                                return '' === c ? '1' : c;
                            }
                        }
                    }
                },
                cssNumber: {
                    columnCount: !0,
                    fillOpacity: !0,
                    flexGrow: !0,
                    flexShrink: !0,
                    fontWeight: !0,
                    lineHeight: !0,
                    opacity: !0,
                    order: !0,
                    orphans: !0,
                    widows: !0,
                    zIndex: !0,
                    zoom: !0
                },
                cssProps: {
                    float: 'cssFloat'
                },
                style: function style(a, b, c, d) {
                    if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {
                        var e, f, g, h = n.camelCase(b), i = a.style;
                        return b = n.cssProps[h] || (n.cssProps[h] = Fb(i, h)), g = n.cssHooks[b] || n.cssHooks[h], void 0 === c ? g && 'get' in g && void 0 !== (e = g.get(a, !1, d)) ? e : i[b] : (f = typeof c === 'undefined' ? 'undefined' : _typeof(c), 
                        'string' === f && (e = Bb.exec(c)) && (c = (e[1] + 1) * e[2] + parseFloat(n.css(a, b)), f = 'number'), null != c && c === c && ('number' !== f || n.cssNumber[h] || (c += 'px'), 
                        k.clearCloneStyle || '' !== c || 0 !== b.indexOf('background') || (i[b] = 'inherit'), g && 'set' in g && void 0 === (c = g.set(a, c, d)) || (i[b] = c)), 
                        void 0);
                    }
                },
                css: function css(a, b, c, d) {
                    var e, f, g, h = n.camelCase(b);
                    return b = n.cssProps[h] || (n.cssProps[h] = Fb(a.style, h)), g = n.cssHooks[b] || n.cssHooks[h], g && 'get' in g && (e = g.get(a, !0, c)), void 0 === e && (e = xb(a, b, d)), 
                    'normal' === e && b in Db && (e = Db[b]), '' === c || c ? (f = parseFloat(e), c === !0 || n.isNumeric(f) ? f || 0 : e) : e;
                }
            }), n.each([ 'height', 'width' ], function(a, b) {
                n.cssHooks[b] = {
                    get: function get(a, c, d) {
                        return c ? zb.test(n.css(a, 'display')) && 0 === a.offsetWidth ? n.swap(a, Cb, function() {
                            return Ib(a, b, d);
                        }) : Ib(a, b, d) : void 0;
                    },
                    set: function set(a, c, d) {
                        var e = d && wb(a);
                        return Gb(a, c, d ? Hb(a, b, d, 'border-box' === n.css(a, 'boxSizing', !1, e), e) : 0);
                    }
                };
            }), n.cssHooks.marginRight = yb(k.reliableMarginRight, function(a, b) {
                return b ? n.swap(a, {
                    display: 'inline-block'
                }, xb, [ a, 'marginRight' ]) : void 0;
            }), n.each({
                margin: '',
                padding: '',
                border: 'Width'
            }, function(a, b) {
                n.cssHooks[a + b] = {
                    expand: function expand(c) {
                        for (var d = 0, e = {}, f = 'string' == typeof c ? c.split(' ') : [ c ]; 4 > d; d++) {
                            e[a + R[d] + b] = f[d] || f[d - 2] || f[0];
                        }
                        return e;
                    }
                }, ub.test(a) || (n.cssHooks[a + b].set = Gb);
            }), n.fn.extend({
                css: function css(a, b) {
                    return J(this, function(a, b, c) {
                        var d, e, f = {}, g = 0;
                        if (n.isArray(b)) {
                            for (d = wb(a), e = b.length; e > g; g++) {
                                f[b[g]] = n.css(a, b[g], !1, d);
                            }
                            return f;
                        }
                        return void 0 !== c ? n.style(a, b, c) : n.css(a, b);
                    }, a, b, arguments.length > 1);
                },
                show: function show() {
                    return Jb(this, !0);
                },
                hide: function hide() {
                    return Jb(this);
                },
                toggle: function toggle(a) {
                    return 'boolean' == typeof a ? a ? this.show() : this.hide() : this.each(function() {
                        S(this) ? n(this).show() : n(this).hide();
                    });
                }
            });
            function Kb(a, b, c, d, e) {
                return new Kb.prototype.init(a, b, c, d, e);
            }
            n.Tween = Kb, Kb.prototype = {
                constructor: Kb,
                init: function init(a, b, c, d, e, f) {
                    this.elem = a, this.prop = c, this.easing = e || 'swing', this.options = b, this.start = this.now = this.cur(), this.end = d, this.unit = f || (n.cssNumber[c] ? '' : 'px');
                },
                cur: function cur() {
                    var a = Kb.propHooks[this.prop];
                    return a && a.get ? a.get(this) : Kb.propHooks._default.get(this);
                },
                run: function run(a) {
                    var b, c = Kb.propHooks[this.prop];
                    return this.pos = b = this.options.duration ? n.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) : a, this.now = (this.end - this.start) * b + this.start, 
                    this.options.step && this.options.step.call(this.elem, this.now, this), c && c.set ? c.set(this) : Kb.propHooks._default.set(this), this;
                }
            }, Kb.prototype.init.prototype = Kb.prototype, Kb.propHooks = {
                _default: {
                    get: function get(a) {
                        var b;
                        return null == a.elem[a.prop] || a.elem.style && null != a.elem.style[a.prop] ? (b = n.css(a.elem, a.prop, ''), b && 'auto' !== b ? b : 0) : a.elem[a.prop];
                    },
                    set: function set(a) {
                        n.fx.step[a.prop] ? n.fx.step[a.prop](a) : a.elem.style && (null != a.elem.style[n.cssProps[a.prop]] || n.cssHooks[a.prop]) ? n.style(a.elem, a.prop, a.now + a.unit) : a.elem[a.prop] = a.now;
                    }
                }
            }, Kb.propHooks.scrollTop = Kb.propHooks.scrollLeft = {
                set: function set(a) {
                    a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now);
                }
            }, n.easing = {
                linear: function linear(a) {
                    return a;
                },
                swing: function swing(a) {
                    return .5 - Math.cos(a * Math.PI) / 2;
                }
            }, n.fx = Kb.prototype.init, n.fx.step = {};
            var Lb, Mb, Nb = /^(?:toggle|show|hide)$/, Ob = new RegExp('^(?:([+-])=|)(' + Q + ')([a-z%]*)$', 'i'), Pb = /queueHooks$/, Qb = [ Vb ], Rb = {
                '*': [ function(a, b) {
                    var c = this.createTween(a, b), d = c.cur(), e = Ob.exec(b), f = e && e[3] || (n.cssNumber[a] ? '' : 'px'), g = (n.cssNumber[a] || 'px' !== f && +d) && Ob.exec(n.css(c.elem, a)), h = 1, i = 20;
                    if (g && g[3] !== f) {
                        f = f || g[3], e = e || [], g = +d || 1;
                        do {
                            h = h || '.5', g /= h, n.style(c.elem, a, g + f);
                        } while (h !== (h = c.cur() / d) && 1 !== h && --i);
                    }
                    return e && (g = c.start = +g || +d || 0, c.unit = f, c.end = e[1] ? g + (e[1] + 1) * e[2] : +e[2]), c;
                } ]
            };
            function Sb() {
                return setTimeout(function() {
                    Lb = void 0;
                }), Lb = n.now();
            }
            function Tb(a, b) {
                var c, d = 0, e = {
                    height: a
                };
                for (b = b ? 1 : 0; 4 > d; d += 2 - b) {
                    c = R[d], e['margin' + c] = e['padding' + c] = a;
                }
                return b && (e.opacity = e.width = a), e;
            }
            function Ub(a, b, c) {
                for (var d, e = (Rb[b] || []).concat(Rb['*']), f = 0, g = e.length; g > f; f++) {
                    if (d = e[f].call(c, b, a)) return d;
                }
            }
            function Vb(a, b, c) {
                var d, e, f, g, h, i, j, k, l = this, m = {}, o = a.style, p = a.nodeType && S(a), q = L.get(a, 'fxshow');
                c.queue || (h = n._queueHooks(a, 'fx'), null == h.unqueued && (h.unqueued = 0, i = h.empty.fire, h.empty.fire = function() {
                    h.unqueued || i();
                }), h.unqueued++, l.always(function() {
                    l.always(function() {
                        h.unqueued--, n.queue(a, 'fx').length || h.empty.fire();
                    });
                })), 1 === a.nodeType && ('height' in b || 'width' in b) && (c.overflow = [ o.overflow, o.overflowX, o.overflowY ], j = n.css(a, 'display'), k = 'none' === j ? L.get(a, 'olddisplay') || tb(a.nodeName) : j, 
                'inline' === k && 'none' === n.css(a, 'float') && (o.display = 'inline-block')), c.overflow && (o.overflow = 'hidden', l.always(function() {
                    o.overflow = c.overflow[0], o.overflowX = c.overflow[1], o.overflowY = c.overflow[2];
                }));
                for (d in b) {
                    if (e = b[d], Nb.exec(e)) {
                        if (delete b[d], f = f || 'toggle' === e, e === (p ? 'hide' : 'show')) {
                            if ('show' !== e || !q || void 0 === q[d]) continue;
                            p = !0;
                        }
                        m[d] = q && q[d] || n.style(a, d);
                    } else j = void 0;
                }
                if (n.isEmptyObject(m)) 'inline' === ('none' === j ? tb(a.nodeName) : j) && (o.display = j); else {
                    q ? 'hidden' in q && (p = q.hidden) : q = L.access(a, 'fxshow', {}), f && (q.hidden = !p), p ? n(a).show() : l.done(function() {
                        n(a).hide();
                    }), l.done(function() {
                        var b;
                        L.remove(a, 'fxshow');
                        for (b in m) {
                            n.style(a, b, m[b]);
                        }
                    });
                    for (d in m) {
                        g = Ub(p ? q[d] : 0, d, l), d in q || (q[d] = g.start, p && (g.end = g.start, g.start = 'width' === d || 'height' === d ? 1 : 0));
                    }
                }
            }
            function Wb(a, b) {
                var c, d, e, f, g;
                for (c in a) {
                    if (d = n.camelCase(c), e = b[d], f = a[c], n.isArray(f) && (e = f[1], f = a[c] = f[0]), c !== d && (a[d] = f, delete a[c]), g = n.cssHooks[d], g && 'expand' in g) {
                        f = g.expand(f), delete a[d];
                        for (c in f) {
                            c in a || (a[c] = f[c], b[c] = e);
                        }
                    } else b[d] = e;
                }
            }
            function Xb(a, b, c) {
                var d, e, f = 0, g = Qb.length, h = n.Deferred().always(function() {
                    delete i.elem;
                }), i = function i() {
                    if (e) return !1;
                    for (var b = Lb || Sb(), c = Math.max(0, j.startTime + j.duration - b), d = c / j.duration || 0, f = 1 - d, g = 0, i = j.tweens.length; i > g; g++) {
                        j.tweens[g].run(f);
                    }
                    return h.notifyWith(a, [ j, f, c ]), 1 > f && i ? c : (h.resolveWith(a, [ j ]), !1);
                }, j = h.promise({
                    elem: a,
                    props: n.extend({}, b),
                    opts: n.extend(!0, {
                        specialEasing: {}
                    }, c),
                    originalProperties: b,
                    originalOptions: c,
                    startTime: Lb || Sb(),
                    duration: c.duration,
                    tweens: [],
                    createTween: function createTween(b, c) {
                        var d = n.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing);
                        return j.tweens.push(d), d;
                    },
                    stop: function stop(b) {
                        var c = 0, d = b ? j.tweens.length : 0;
                        if (e) return this;
                        for (e = !0; d > c; c++) {
                            j.tweens[c].run(1);
                        }
                        return b ? h.resolveWith(a, [ j, b ]) : h.rejectWith(a, [ j, b ]), this;
                    }
                }), k = j.props;
                for (Wb(k, j.opts.specialEasing); g > f; f++) {
                    if (d = Qb[f].call(j, a, k, j.opts)) return d;
                }
                return n.map(k, Ub, j), n.isFunction(j.opts.start) && j.opts.start.call(a, j), n.fx.timer(n.extend(i, {
                    elem: a,
                    anim: j,
                    queue: j.opts.queue
                })), j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always);
            }
            n.Animation = n.extend(Xb, {
                tweener: function tweener(a, b) {
                    n.isFunction(a) ? (b = a, a = [ '*' ]) : a = a.split(' ');
                    for (var c, d = 0, e = a.length; e > d; d++) {
                        c = a[d], Rb[c] = Rb[c] || [], Rb[c].unshift(b);
                    }
                },
                prefilter: function prefilter(a, b) {
                    b ? Qb.unshift(a) : Qb.push(a);
                }
            }), n.speed = function(a, b, c) {
                var d = a && 'object' == (typeof a === 'undefined' ? 'undefined' : _typeof(a)) ? n.extend({}, a) : {
                    complete: c || !c && b || n.isFunction(a) && a,
                    duration: a,
                    easing: c && b || b && !n.isFunction(b) && b
                };
                return d.duration = n.fx.off ? 0 : 'number' == typeof d.duration ? d.duration : d.duration in n.fx.speeds ? n.fx.speeds[d.duration] : n.fx.speeds._default, 
                (null == d.queue || d.queue === !0) && (d.queue = 'fx'), d.old = d.complete, d.complete = function() {
                    n.isFunction(d.old) && d.old.call(this), d.queue && n.dequeue(this, d.queue);
                }, d;
            }, n.fn.extend({
                fadeTo: function fadeTo(a, b, c, d) {
                    return this.filter(S).css('opacity', 0).show().end().animate({
                        opacity: b
                    }, a, c, d);
                },
                animate: function animate(a, b, c, d) {
                    var e = n.isEmptyObject(a), f = n.speed(b, c, d), g = function g() {
                        var b = Xb(this, n.extend({}, a), f);
                        (e || L.get(this, 'finish')) && b.stop(!0);
                    };
                    return g.finish = g, e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g);
                },
                stop: function stop(a, b, c) {
                    var d = function d(a) {
                        var b = a.stop;
                        delete a.stop, b(c);
                    };
                    return 'string' != typeof a && (c = b, b = a, a = void 0), b && a !== !1 && this.queue(a || 'fx', []), this.each(function() {
                        var b = !0, e = null != a && a + 'queueHooks', f = n.timers, g = L.get(this);
                        if (e) g[e] && g[e].stop && d(g[e]); else for (e in g) {
                            g[e] && g[e].stop && Pb.test(e) && d(g[e]);
                        }
                        for (e = f.length; e--; ) {
                            f[e].elem !== this || null != a && f[e].queue !== a || (f[e].anim.stop(c), b = !1, f.splice(e, 1));
                        }
                        (b || !c) && n.dequeue(this, a);
                    });
                },
                finish: function finish(a) {
                    return a !== !1 && (a = a || 'fx'), this.each(function() {
                        var b, c = L.get(this), d = c[a + 'queue'], e = c[a + 'queueHooks'], f = n.timers, g = d ? d.length : 0;
                        for (c.finish = !0, n.queue(this, a, []), e && e.stop && e.stop.call(this, !0), b = f.length; b--; ) {
                            f[b].elem === this && f[b].queue === a && (f[b].anim.stop(!0), f.splice(b, 1));
                        }
                        for (b = 0; g > b; b++) {
                            d[b] && d[b].finish && d[b].finish.call(this);
                        }
                        delete c.finish;
                    });
                }
            }), n.each([ 'toggle', 'show', 'hide' ], function(a, b) {
                var c = n.fn[b];
                n.fn[b] = function(a, d, e) {
                    return null == a || 'boolean' == typeof a ? c.apply(this, arguments) : this.animate(Tb(b, !0), a, d, e);
                };
            }), n.each({
                slideDown: Tb('show'),
                slideUp: Tb('hide'),
                slideToggle: Tb('toggle'),
                fadeIn: {
                    opacity: 'show'
                },
                fadeOut: {
                    opacity: 'hide'
                },
                fadeToggle: {
                    opacity: 'toggle'
                }
            }, function(a, b) {
                n.fn[a] = function(a, c, d) {
                    return this.animate(b, a, c, d);
                };
            }), n.timers = [], n.fx.tick = function() {
                var a, b = 0, c = n.timers;
                for (Lb = n.now(); b < c.length; b++) {
                    a = c[b], a() || c[b] !== a || c.splice(b--, 1);
                }
                c.length || n.fx.stop(), Lb = void 0;
            }, n.fx.timer = function(a) {
                n.timers.push(a), a() ? n.fx.start() : n.timers.pop();
            }, n.fx.interval = 13, n.fx.start = function() {
                Mb || (Mb = setInterval(n.fx.tick, n.fx.interval));
            }, n.fx.stop = function() {
                clearInterval(Mb), Mb = null;
            }, n.fx.speeds = {
                slow: 600,
                fast: 200,
                _default: 400
            }, n.fn.delay = function(a, b) {
                return a = n.fx ? n.fx.speeds[a] || a : a, b = b || 'fx', this.queue(b, function(b, c) {
                    var d = setTimeout(b, a);
                    c.stop = function() {
                        clearTimeout(d);
                    };
                });
            }, function() {
                var a = l.createElement('input'), b = l.createElement('select'), c = b.appendChild(l.createElement('option'));
                a.type = 'checkbox', k.checkOn = '' !== a.value, k.optSelected = c.selected, b.disabled = !0, k.optDisabled = !c.disabled, a = l.createElement('input'), 
                a.value = 't', a.type = 'radio', k.radioValue = 't' === a.value;
            }();
            var Yb, Zb, $b = n.expr.attrHandle;
            n.fn.extend({
                attr: function attr(a, b) {
                    return J(this, n.attr, a, b, arguments.length > 1);
                },
                removeAttr: function removeAttr(a) {
                    return this.each(function() {
                        n.removeAttr(this, a);
                    });
                }
            }), n.extend({
                attr: function attr(a, b, c) {
                    var d, e, f = a.nodeType;
                    if (a && 3 !== f && 8 !== f && 2 !== f) return _typeof(a.getAttribute) === U ? n.prop(a, b, c) : (1 === f && n.isXMLDoc(a) || (b = b.toLowerCase(), d = n.attrHooks[b] || (n.expr.match.bool.test(b) ? Zb : Yb)), 
                    void 0 === c ? d && 'get' in d && null !== (e = d.get(a, b)) ? e : (e = n.find.attr(a, b), null == e ? void 0 : e) : null !== c ? d && 'set' in d && void 0 !== (e = d.set(a, c, b)) ? e : (a.setAttribute(b, c + ''), 
                    c) : void n.removeAttr(a, b));
                },
                removeAttr: function removeAttr(a, b) {
                    var c, d, e = 0, f = b && b.match(E);
                    if (f && 1 === a.nodeType) while (c = f[e++]) {
                        d = n.propFix[c] || c, n.expr.match.bool.test(c) && (a[d] = !1), a.removeAttribute(c);
                    }
                },
                attrHooks: {
                    type: {
                        set: function set(a, b) {
                            if (!k.radioValue && 'radio' === b && n.nodeName(a, 'input')) {
                                var c = a.value;
                                return a.setAttribute('type', b), c && (a.value = c), b;
                            }
                        }
                    }
                }
            }), Zb = {
                set: function set(a, b, c) {
                    return b === !1 ? n.removeAttr(a, c) : a.setAttribute(c, c), c;
                }
            }, n.each(n.expr.match.bool.source.match(/\w+/g), function(a, b) {
                var c = $b[b] || n.find.attr;
                $b[b] = function(a, b, d) {
                    var e, f;
                    return d || (f = $b[b], $b[b] = e, e = null != c(a, b, d) ? b.toLowerCase() : null, $b[b] = f), e;
                };
            });
            var _b = /^(?:input|select|textarea|button)$/i;
            n.fn.extend({
                prop: function prop(a, b) {
                    return J(this, n.prop, a, b, arguments.length > 1);
                },
                removeProp: function removeProp(a) {
                    return this.each(function() {
                        delete this[n.propFix[a] || a];
                    });
                }
            }), n.extend({
                propFix: {
                    for: 'htmlFor',
                    class: 'className'
                },
                prop: function prop(a, b, c) {
                    var d, e, f, g = a.nodeType;
                    if (a && 3 !== g && 8 !== g && 2 !== g) return f = 1 !== g || !n.isXMLDoc(a), f && (b = n.propFix[b] || b, e = n.propHooks[b]), void 0 !== c ? e && 'set' in e && void 0 !== (d = e.set(a, c, b)) ? d : a[b] = c : e && 'get' in e && null !== (d = e.get(a, b)) ? d : a[b];
                },
                propHooks: {
                    tabIndex: {
                        get: function get(a) {
                            return a.hasAttribute('tabindex') || _b.test(a.nodeName) || a.href ? a.tabIndex : -1;
                        }
                    }
                }
            }), k.optSelected || (n.propHooks.selected = {
                get: function get(a) {
                    var b = a.parentNode;
                    return b && b.parentNode && b.parentNode.selectedIndex, null;
                }
            }), n.each([ 'tabIndex', 'readOnly', 'maxLength', 'cellSpacing', 'cellPadding', 'rowSpan', 'colSpan', 'useMap', 'frameBorder', 'contentEditable' ], function() {
                n.propFix[this.toLowerCase()] = this;
            });
            var ac = /[\t\r\n\f]/g;
            n.fn.extend({
                addClass: function addClass(a) {
                    var b, c, d, e, f, g, h = 'string' == typeof a && a, i = 0, j = this.length;
                    if (n.isFunction(a)) return this.each(function(b) {
                        n(this).addClass(a.call(this, b, this.className));
                    });
                    if (h) for (b = (a || '').match(E) || []; j > i; i++) {
                        if (c = this[i], d = 1 === c.nodeType && (c.className ? (' ' + c.className + ' ').replace(ac, ' ') : ' ')) {
                            f = 0;
                            while (e = b[f++]) {
                                d.indexOf(' ' + e + ' ') < 0 && (d += e + ' ');
                            }
                            g = n.trim(d), c.className !== g && (c.className = g);
                        }
                    }
                    return this;
                },
                removeClass: function removeClass(a) {
                    var b, c, d, e, f, g, h = 0 === arguments.length || 'string' == typeof a && a, i = 0, j = this.length;
                    if (n.isFunction(a)) return this.each(function(b) {
                        n(this).removeClass(a.call(this, b, this.className));
                    });
                    if (h) for (b = (a || '').match(E) || []; j > i; i++) {
                        if (c = this[i], d = 1 === c.nodeType && (c.className ? (' ' + c.className + ' ').replace(ac, ' ') : '')) {
                            f = 0;
                            while (e = b[f++]) {
                                while (d.indexOf(' ' + e + ' ') >= 0) {
                                    d = d.replace(' ' + e + ' ', ' ');
                                }
                            }
                            g = a ? n.trim(d) : '', c.className !== g && (c.className = g);
                        }
                    }
                    return this;
                },
                toggleClass: function toggleClass(a, b) {
                    var c = typeof a === 'undefined' ? 'undefined' : _typeof(a);
                    return 'boolean' == typeof b && 'string' === c ? b ? this.addClass(a) : this.removeClass(a) : this.each(n.isFunction(a) ? function(c) {
                        n(this).toggleClass(a.call(this, c, this.className, b), b);
                    } : function() {
                        if ('string' === c) {
                            var b, d = 0, e = n(this), f = a.match(E) || [];
                            while (b = f[d++]) {
                                e.hasClass(b) ? e.removeClass(b) : e.addClass(b);
                            }
                        } else (c === U || 'boolean' === c) && (this.className && L.set(this, '__className__', this.className), this.className = this.className || a === !1 ? '' : L.get(this, '__className__') || '');
                    });
                },
                hasClass: function hasClass(a) {
                    for (var b = ' ' + a + ' ', c = 0, d = this.length; d > c; c++) {
                        if (1 === this[c].nodeType && (' ' + this[c].className + ' ').replace(ac, ' ').indexOf(b) >= 0) return !0;
                    }
                    return !1;
                }
            });
            var bc = /\r/g;
            n.fn.extend({
                val: function val(a) {
                    var b, c, d, e = this[0];
                    {
                        if (arguments.length) return d = n.isFunction(a), this.each(function(c) {
                            var e;
                            1 === this.nodeType && (e = d ? a.call(this, c, n(this).val()) : a, null == e ? e = '' : 'number' == typeof e ? e += '' : n.isArray(e) && (e = n.map(e, function(a) {
                                return null == a ? '' : a + '';
                            })), b = n.valHooks[this.type] || n.valHooks[this.nodeName.toLowerCase()], b && 'set' in b && void 0 !== b.set(this, e, 'value') || (this.value = e));
                        });
                        if (e) return b = n.valHooks[e.type] || n.valHooks[e.nodeName.toLowerCase()], b && 'get' in b && void 0 !== (c = b.get(e, 'value')) ? c : (c = e.value, 
                        'string' == typeof c ? c.replace(bc, '') : null == c ? '' : c);
                    }
                }
            }), n.extend({
                valHooks: {
                    option: {
                        get: function get(a) {
                            var b = n.find.attr(a, 'value');
                            return null != b ? b : n.trim(n.text(a));
                        }
                    },
                    select: {
                        get: function get(a) {
                            for (var b, c, d = a.options, e = a.selectedIndex, f = 'select-one' === a.type || 0 > e, g = f ? null : [], h = f ? e + 1 : d.length, i = 0 > e ? h : f ? e : 0; h > i; i++) {
                                if (c = d[i], !(!c.selected && i !== e || (k.optDisabled ? c.disabled : null !== c.getAttribute('disabled')) || c.parentNode.disabled && n.nodeName(c.parentNode, 'optgroup'))) {
                                    if (b = n(c).val(), f) return b;
                                    g.push(b);
                                }
                            }
                            return g;
                        },
                        set: function set(a, b) {
                            var c, d, e = a.options, f = n.makeArray(b), g = e.length;
                            while (g--) {
                                d = e[g], (d.selected = n.inArray(d.value, f) >= 0) && (c = !0);
                            }
                            return c || (a.selectedIndex = -1), f;
                        }
                    }
                }
            }), n.each([ 'radio', 'checkbox' ], function() {
                n.valHooks[this] = {
                    set: function set(a, b) {
                        return n.isArray(b) ? a.checked = n.inArray(n(a).val(), b) >= 0 : void 0;
                    }
                }, k.checkOn || (n.valHooks[this].get = function(a) {
                    return null === a.getAttribute('value') ? 'on' : a.value;
                });
            }), n.each('blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu'.split(' '), function(a, b) {
                n.fn[b] = function(a, c) {
                    return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b);
                };
            }), n.fn.extend({
                hover: function hover(a, b) {
                    return this.mouseenter(a).mouseleave(b || a);
                },
                bind: function bind(a, b, c) {
                    return this.on(a, null, b, c);
                },
                unbind: function unbind(a, b) {
                    return this.off(a, null, b);
                },
                delegate: function delegate(a, b, c, d) {
                    return this.on(b, a, c, d);
                },
                undelegate: function undelegate(a, b, c) {
                    return 1 === arguments.length ? this.off(a, '**') : this.off(b, a || '**', c);
                }
            });
            var cc = n.now(), dc = /\?/;
            n.parseJSON = function(a) {
                return JSON.parse(a + '');
            }, n.parseXML = function(a) {
                var b, c;
                if (!a || 'string' != typeof a) return null;
                try {
                    c = new DOMParser(), b = c.parseFromString(a, 'text/xml');
                } catch (d) {
                    b = void 0;
                }
                return (!b || b.getElementsByTagName('parsererror').length) && n.error('Invalid XML: ' + a), b;
            };
            var ec, fc, gc = /#.*$/, hc = /([?&])_=[^&]*/, ic = /^(.*?):[ \t]*([^\r\n]*)$/gm, jc = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, kc = /^(?:GET|HEAD)$/, lc = /^\/\//, mc = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/, nc = {}, oc = {}, pc = '*/'.concat('*');
            try {
                fc = location.href;
            } catch (qc) {
                fc = l.createElement('a'), fc.href = '', fc = fc.href;
            }
            ec = mc.exec(fc.toLowerCase()) || [];
            function rc(a) {
                return function(b, c) {
                    'string' != typeof b && (c = b, b = '*');
                    var d, e = 0, f = b.toLowerCase().match(E) || [];
                    if (n.isFunction(c)) while (d = f[e++]) {
                        '+' === d[0] ? (d = d.slice(1) || '*', (a[d] = a[d] || []).unshift(c)) : (a[d] = a[d] || []).push(c);
                    }
                };
            }
            function sc(a, b, c, d) {
                var e = {}, f = a === oc;
                function g(h) {
                    var i;
                    return e[h] = !0, n.each(a[h] || [], function(a, h) {
                        var j = h(b, c, d);
                        return 'string' != typeof j || f || e[j] ? f ? !(i = j) : void 0 : (b.dataTypes.unshift(j), g(j), !1);
                    }), i;
                }
                return g(b.dataTypes[0]) || !e['*'] && g('*');
            }
            function tc(a, b) {
                var c, d, e = n.ajaxSettings.flatOptions || {};
                for (c in b) {
                    void 0 !== b[c] && ((e[c] ? a : d || (d = {}))[c] = b[c]);
                }
                return d && n.extend(!0, a, d), a;
            }
            function uc(a, b, c) {
                var d, e, f, g, h = a.contents, i = a.dataTypes;
                while ('*' === i[0]) {
                    i.shift(), void 0 === d && (d = a.mimeType || b.getResponseHeader('Content-Type'));
                }
                if (d) for (e in h) {
                    if (h[e] && h[e].test(d)) {
                        i.unshift(e);
                        break;
                    }
                }
                if (i[0] in c) f = i[0]; else {
                    for (e in c) {
                        if (!i[0] || a.converters[e + ' ' + i[0]]) {
                            f = e;
                            break;
                        }
                        g || (g = e);
                    }
                    f = f || g;
                }
                return f ? (f !== i[0] && i.unshift(f), c[f]) : void 0;
            }
            function vc(a, b, c, d) {
                var e, f, g, h, i, j = {}, k = a.dataTypes.slice();
                if (k[1]) for (g in a.converters) {
                    j[g.toLowerCase()] = a.converters[g];
                }
                f = k.shift();
                while (f) {
                    if (a.responseFields[f] && (c[a.responseFields[f]] = b), !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)), i = f, f = k.shift()) if ('*' === f) f = i; else if ('*' !== i && i !== f) {
                        if (g = j[i + ' ' + f] || j['* ' + f], !g) for (e in j) {
                            if (h = e.split(' '), h[1] === f && (g = j[i + ' ' + h[0]] || j['* ' + h[0]])) {
                                g === !0 ? g = j[e] : j[e] !== !0 && (f = h[0], k.unshift(h[1]));
                                break;
                            }
                        }
                        if (g !== !0) if (g && a['throws']) b = g(b); else try {
                            b = g(b);
                        } catch (l) {
                            return {
                                state: 'parsererror',
                                error: g ? l : 'No conversion from ' + i + ' to ' + f
                            };
                        }
                    }
                }
                return {
                    state: 'success',
                    data: b
                };
            }
            n.extend({
                active: 0,
                lastModified: {},
                etag: {},
                ajaxSettings: {
                    url: fc,
                    type: 'GET',
                    isLocal: jc.test(ec[1]),
                    global: !0,
                    processData: !0,
                    async: !0,
                    contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                    accepts: {
                        '*': pc,
                        text: 'text/plain',
                        html: 'text/html',
                        xml: 'application/xml, text/xml',
                        json: 'application/json, text/javascript'
                    },
                    contents: {
                        xml: /xml/,
                        html: /html/,
                        json: /json/
                    },
                    responseFields: {
                        xml: 'responseXML',
                        text: 'responseText',
                        json: 'responseJSON'
                    },
                    converters: {
                        '* text': String,
                        'text html': !0,
                        'text json': n.parseJSON,
                        'text xml': n.parseXML
                    },
                    flatOptions: {
                        url: !0,
                        context: !0
                    }
                },
                ajaxSetup: function ajaxSetup(a, b) {
                    return b ? tc(tc(a, n.ajaxSettings), b) : tc(n.ajaxSettings, a);
                },
                ajaxPrefilter: rc(nc),
                ajaxTransport: rc(oc),
                ajax: function ajax(a, b) {
                    'object' == (typeof a === 'undefined' ? 'undefined' : _typeof(a)) && (b = a, a = void 0), b = b || {};
                    var c, d, e, f, g, h, i, j, k = n.ajaxSetup({}, b), l = k.context || k, m = k.context && (l.nodeType || l.jquery) ? n(l) : n.event, o = n.Deferred(), p = n.Callbacks('once memory'), q = k.statusCode || {}, r = {}, s = {}, t = 0, u = 'canceled', v = {
                        readyState: 0,
                        getResponseHeader: function getResponseHeader(a) {
                            var b;
                            if (2 === t) {
                                if (!f) {
                                    f = {};
                                    while (b = ic.exec(e)) {
                                        f[b[1].toLowerCase()] = b[2];
                                    }
                                }
                                b = f[a.toLowerCase()];
                            }
                            return null == b ? null : b;
                        },
                        getAllResponseHeaders: function getAllResponseHeaders() {
                            return 2 === t ? e : null;
                        },
                        setRequestHeader: function setRequestHeader(a, b) {
                            var c = a.toLowerCase();
                            return t || (a = s[c] = s[c] || a, r[a] = b), this;
                        },
                        overrideMimeType: function overrideMimeType(a) {
                            return t || (k.mimeType = a), this;
                        },
                        statusCode: function statusCode(a) {
                            var b;
                            if (a) if (2 > t) for (b in a) {
                                q[b] = [ q[b], a[b] ];
                            } else v.always(a[v.status]);
                            return this;
                        },
                        abort: function abort(a) {
                            var b = a || u;
                            return c && c.abort(b), x(0, b), this;
                        }
                    };
                    if (o.promise(v).complete = p.add, v.success = v.done, v.error = v.fail, k.url = ((a || k.url || fc) + '').replace(gc, '').replace(lc, ec[1] + '//'), 
                    k.type = b.method || b.type || k.method || k.type, k.dataTypes = n.trim(k.dataType || '*').toLowerCase().match(E) || [ '' ], null == k.crossDomain && (h = mc.exec(k.url.toLowerCase()), 
                    k.crossDomain = !(!h || h[1] === ec[1] && h[2] === ec[2] && (h[3] || ('http:' === h[1] ? '80' : '443')) === (ec[3] || ('http:' === ec[1] ? '80' : '443')))), 
                    k.data && k.processData && 'string' != typeof k.data && (k.data = n.param(k.data, k.traditional)), sc(nc, k, b, v), 2 === t) return v;
                    i = k.global, i && 0 === n.active++ && n.event.trigger('ajaxStart'), k.type = k.type.toUpperCase(), k.hasContent = !kc.test(k.type), d = k.url, k.hasContent || (k.data && (d = k.url += (dc.test(d) ? '&' : '?') + k.data, 
                    delete k.data), k.cache === !1 && (k.url = hc.test(d) ? d.replace(hc, '$1_=' + cc++) : d + (dc.test(d) ? '&' : '?') + '_=' + cc++)), k.ifModified && (n.lastModified[d] && v.setRequestHeader('If-Modified-Since', n.lastModified[d]), 
                    n.etag[d] && v.setRequestHeader('If-None-Match', n.etag[d])), (k.data && k.hasContent && k.contentType !== !1 || b.contentType) && v.setRequestHeader('Content-Type', k.contentType), 
                    v.setRequestHeader('Accept', k.dataTypes[0] && k.accepts[k.dataTypes[0]] ? k.accepts[k.dataTypes[0]] + ('*' !== k.dataTypes[0] ? ', ' + pc + '; q=0.01' : '') : k.accepts['*']);
                    for (j in k.headers) {
                        v.setRequestHeader(j, k.headers[j]);
                    }
                    if (k.beforeSend && (k.beforeSend.call(l, v, k) === !1 || 2 === t)) return v.abort();
                    u = 'abort';
                    for (j in {
                        success: 1,
                        error: 1,
                        complete: 1
                    }) {
                        v[j](k[j]);
                    }
                    if (c = sc(oc, k, b, v)) {
                        v.readyState = 1, i && m.trigger('ajaxSend', [ v, k ]), k.async && k.timeout > 0 && (g = setTimeout(function() {
                            v.abort('timeout');
                        }, k.timeout));
                        try {
                            t = 1, c.send(r, x);
                        } catch (w) {
                            if (!(2 > t)) throw w;
                            x(-1, w);
                        }
                    } else x(-1, 'No Transport');
                    function x(a, b, f, h) {
                        var j, r, s, u, w, x = b;
                        2 !== t && (t = 2, g && clearTimeout(g), c = void 0, e = h || '', v.readyState = a > 0 ? 4 : 0, j = a >= 200 && 300 > a || 304 === a, f && (u = uc(k, v, f)), 
                        u = vc(k, u, v, j), j ? (k.ifModified && (w = v.getResponseHeader('Last-Modified'), w && (n.lastModified[d] = w), w = v.getResponseHeader('etag'), w && (n.etag[d] = w)), 
                        204 === a || 'HEAD' === k.type ? x = 'nocontent' : 304 === a ? x = 'notmodified' : (x = u.state, r = u.data, s = u.error, j = !s)) : (s = x, (a || !x) && (x = 'error', 
                        0 > a && (a = 0))), v.status = a, v.statusText = (b || x) + '', j ? o.resolveWith(l, [ r, x, v ]) : o.rejectWith(l, [ v, x, s ]), v.statusCode(q), q = void 0, 
                        i && m.trigger(j ? 'ajaxSuccess' : 'ajaxError', [ v, k, j ? r : s ]), p.fireWith(l, [ v, x ]), i && (m.trigger('ajaxComplete', [ v, k ]), --n.active || n.event.trigger('ajaxStop')));
                    }
                    return v;
                },
                getJSON: function getJSON(a, b, c) {
                    return n.get(a, b, c, 'json');
                },
                getScript: function getScript(a, b) {
                    return n.get(a, void 0, b, 'script');
                }
            }), n.each([ 'get', 'post' ], function(a, b) {
                n[b] = function(a, c, d, e) {
                    return n.isFunction(c) && (e = e || d, d = c, c = void 0), n.ajax({
                        url: a,
                        type: b,
                        dataType: e,
                        data: c,
                        success: d
                    });
                };
            }), n.each([ 'ajaxStart', 'ajaxStop', 'ajaxComplete', 'ajaxError', 'ajaxSuccess', 'ajaxSend' ], function(a, b) {
                n.fn[b] = function(a) {
                    return this.on(b, a);
                };
            }), n._evalUrl = function(a) {
                return n.ajax({
                    url: a,
                    type: 'GET',
                    dataType: 'script',
                    async: !1,
                    global: !1,
                    throws: !0
                });
            }, n.fn.extend({
                wrapAll: function wrapAll(a) {
                    var b;
                    return n.isFunction(a) ? this.each(function(b) {
                        n(this).wrapAll(a.call(this, b));
                    }) : (this[0] && (b = n(a, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && b.insertBefore(this[0]), b.map(function() {
                        var a = this;
                        while (a.firstElementChild) {
                            a = a.firstElementChild;
                        }
                        return a;
                    }).append(this)), this);
                },
                wrapInner: function wrapInner(a) {
                    return this.each(n.isFunction(a) ? function(b) {
                        n(this).wrapInner(a.call(this, b));
                    } : function() {
                        var b = n(this), c = b.contents();
                        c.length ? c.wrapAll(a) : b.append(a);
                    });
                },
                wrap: function wrap(a) {
                    var b = n.isFunction(a);
                    return this.each(function(c) {
                        n(this).wrapAll(b ? a.call(this, c) : a);
                    });
                },
                unwrap: function unwrap() {
                    return this.parent().each(function() {
                        n.nodeName(this, 'body') || n(this).replaceWith(this.childNodes);
                    }).end();
                }
            }), n.expr.filters.hidden = function(a) {
                return a.offsetWidth <= 0 && a.offsetHeight <= 0;
            }, n.expr.filters.visible = function(a) {
                return !n.expr.filters.hidden(a);
            };
            var wc = /%20/g, xc = /\[\]$/, yc = /\r?\n/g, zc = /^(?:submit|button|image|reset|file)$/i, Ac = /^(?:input|select|textarea|keygen)/i;
            function Bc(a, b, c, d) {
                var e;
                if (n.isArray(b)) n.each(b, function(b, e) {
                    c || xc.test(a) ? d(a, e) : Bc(a + '[' + ('object' == (typeof e === 'undefined' ? 'undefined' : _typeof(e)) ? b : '') + ']', e, c, d);
                }); else if (c || 'object' !== n.type(b)) d(a, b); else for (e in b) {
                    Bc(a + '[' + e + ']', b[e], c, d);
                }
            }
            n.param = function(a, b) {
                var c, d = [], e = function e(a, b) {
                    b = n.isFunction(b) ? b() : null == b ? '' : b, d[d.length] = encodeURIComponent(a) + '=' + encodeURIComponent(b);
                };
                if (void 0 === b && (b = n.ajaxSettings && n.ajaxSettings.traditional), n.isArray(a) || a.jquery && !n.isPlainObject(a)) n.each(a, function() {
                    e(this.name, this.value);
                }); else for (c in a) {
                    Bc(c, a[c], b, e);
                }
                return d.join('&').replace(wc, '+');
            }, n.fn.extend({
                serialize: function serialize() {
                    return n.param(this.serializeArray());
                },
                serializeArray: function serializeArray() {
                    return this.map(function() {
                        var a = n.prop(this, 'elements');
                        return a ? n.makeArray(a) : this;
                    }).filter(function() {
                        var a = this.type;
                        return this.name && !n(this).is(':disabled') && Ac.test(this.nodeName) && !zc.test(a) && (this.checked || !T.test(a));
                    }).map(function(a, b) {
                        var c = n(this).val();
                        return null == c ? null : n.isArray(c) ? n.map(c, function(a) {
                            return {
                                name: b.name,
                                value: a.replace(yc, '\r\n')
                            };
                        }) : {
                            name: b.name,
                            value: c.replace(yc, '\r\n')
                        };
                    }).get();
                }
            }), n.ajaxSettings.xhr = function() {
                try {
                    return new XMLHttpRequest();
                } catch (a) {}
            };
            var Cc = 0, Dc = {}, Ec = {
                0: 200,
                1223: 204
            }, Fc = n.ajaxSettings.xhr();
            a.ActiveXObject && n(a).on('unload', function() {
                for (var a in Dc) {
                    Dc[a]();
                }
            }), k.cors = !!Fc && 'withCredentials' in Fc, k.ajax = Fc = !!Fc, n.ajaxTransport(function(a) {
                var _b3;
                return k.cors || Fc && !a.crossDomain ? {
                    send: function send(c, d) {
                        var e, f = a.xhr(), g = ++Cc;
                        if (f.open(a.type, a.url, a.async, a.username, a.password), a.xhrFields) for (e in a.xhrFields) {
                            f[e] = a.xhrFields[e];
                        }
                        a.mimeType && f.overrideMimeType && f.overrideMimeType(a.mimeType), a.crossDomain || c['X-Requested-With'] || (c['X-Requested-With'] = 'XMLHttpRequest');
                        for (e in c) {
                            f.setRequestHeader(e, c[e]);
                        }
                        _b3 = function b(a) {
                            return function() {
                                _b3 && (delete Dc[g], _b3 = f.onload = f.onerror = null, 'abort' === a ? f.abort() : 'error' === a ? d(f.status, f.statusText) : d(Ec[f.status] || f.status, f.statusText, 'string' == typeof f.responseText ? {
                                    text: f.responseText
                                } : void 0, f.getAllResponseHeaders()));
                            };
                        }, f.onload = _b3(), f.onerror = _b3('error'), _b3 = Dc[g] = _b3('abort');
                        try {
                            f.send(a.hasContent && a.data || null);
                        } catch (h) {
                            if (_b3) throw h;
                        }
                    },
                    abort: function abort() {
                        _b3 && _b3();
                    }
                } : void 0;
            }), n.ajaxSetup({
                accepts: {
                    script: 'text/javascript, application/javascript, application/ecmascript, application/x-ecmascript'
                },
                contents: {
                    script: /(?:java|ecma)script/
                },
                converters: {
                    'text script': function textScript(a) {
                        return n.globalEval(a), a;
                    }
                }
            }), n.ajaxPrefilter('script', function(a) {
                void 0 === a.cache && (a.cache = !1), a.crossDomain && (a.type = 'GET');
            }), n.ajaxTransport('script', function(a) {
                if (a.crossDomain) {
                    var b, _c;
                    return {
                        send: function send(d, e) {
                            b = n('<script>').prop({
                                async: !0,
                                charset: a.scriptCharset,
                                src: a.url
                            }).on('load error', _c = function c(a) {
                                b.remove(), _c = null, a && e('error' === a.type ? 404 : 200, a.type);
                            }), l.head.appendChild(b[0]);
                        },
                        abort: function abort() {
                            _c && _c();
                        }
                    };
                }
            });
            var Gc = [], Hc = /(=)\?(?=&|$)|\?\?/;
            n.ajaxSetup({
                jsonp: 'callback',
                jsonpCallback: function jsonpCallback() {
                    var a = Gc.pop() || n.expando + '_' + cc++;
                    return this[a] = !0, a;
                }
            }), n.ajaxPrefilter('json jsonp', function(b, c, d) {
                var e, f, g, h = b.jsonp !== !1 && (Hc.test(b.url) ? 'url' : 'string' == typeof b.data && !(b.contentType || '').indexOf('application/x-www-form-urlencoded') && Hc.test(b.data) && 'data');
                return h || 'jsonp' === b.dataTypes[0] ? (e = b.jsonpCallback = n.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, h ? b[h] = b[h].replace(Hc, '$1' + e) : b.jsonp !== !1 && (b.url += (dc.test(b.url) ? '&' : '?') + b.jsonp + '=' + e), 
                b.converters['script json'] = function() {
                    return g || n.error(e + ' was not called'), g[0];
                }, b.dataTypes[0] = 'json', f = a[e], a[e] = function() {
                    g = arguments;
                }, d.always(function() {
                    a[e] = f, b[e] && (b.jsonpCallback = c.jsonpCallback, Gc.push(e)), g && n.isFunction(f) && f(g[0]), g = f = void 0;
                }), 'script') : void 0;
            }), n.parseHTML = function(a, b, c) {
                if (!a || 'string' != typeof a) return null;
                'boolean' == typeof b && (c = b, b = !1), b = b || l;
                var d = v.exec(a), e = !c && [];
                return d ? [ b.createElement(d[1]) ] : (d = n.buildFragment([ a ], b, e), e && e.length && n(e).remove(), n.merge([], d.childNodes));
            };
            var Ic = n.fn.load;
            n.fn.load = function(a, b, c) {
                if ('string' != typeof a && Ic) return Ic.apply(this, arguments);
                var d, e, f, g = this, h = a.indexOf(' ');
                return h >= 0 && (d = n.trim(a.slice(h)), a = a.slice(0, h)), n.isFunction(b) ? (c = b, b = void 0) : b && 'object' == (typeof b === 'undefined' ? 'undefined' : _typeof(b)) && (e = 'POST'), 
                g.length > 0 && n.ajax({
                    url: a,
                    type: e,
                    dataType: 'html',
                    data: b
                }).done(function(a) {
                    f = arguments, g.html(d ? n('<div>').append(n.parseHTML(a)).find(d) : a);
                }).complete(c && function(a, b) {
                    g.each(c, f || [ a.responseText, b, a ]);
                }), this;
            }, n.expr.filters.animated = function(a) {
                return n.grep(n.timers, function(b) {
                    return a === b.elem;
                }).length;
            };
            var Jc = a.document.documentElement;
            function Kc(a) {
                return n.isWindow(a) ? a : 9 === a.nodeType && a.defaultView;
            }
            n.offset = {
                setOffset: function setOffset(a, b, c) {
                    var d, e, f, g, h, i, j, k = n.css(a, 'position'), l = n(a), m = {};
                    'static' === k && (a.style.position = 'relative'), h = l.offset(), f = n.css(a, 'top'), i = n.css(a, 'left'), j = ('absolute' === k || 'fixed' === k) && (f + i).indexOf('auto') > -1, 
                    j ? (d = l.position(), g = d.top, e = d.left) : (g = parseFloat(f) || 0, e = parseFloat(i) || 0), n.isFunction(b) && (b = b.call(a, c, h)), null != b.top && (m.top = b.top - h.top + g), 
                    null != b.left && (m.left = b.left - h.left + e), 'using' in b ? b.using.call(a, m) : l.css(m);
                }
            }, n.fn.extend({
                offset: function offset(a) {
                    if (arguments.length) return void 0 === a ? this : this.each(function(b) {
                        n.offset.setOffset(this, a, b);
                    });
                    var b, c, d = this[0], e = {
                        top: 0,
                        left: 0
                    }, f = d && d.ownerDocument;
                    if (f) return b = f.documentElement, n.contains(b, d) ? (_typeof(d.getBoundingClientRect) !== U && (e = d.getBoundingClientRect()), c = Kc(f), {
                        top: e.top + c.pageYOffset - b.clientTop,
                        left: e.left + c.pageXOffset - b.clientLeft
                    }) : e;
                },
                position: function position() {
                    if (this[0]) {
                        var a, b, c = this[0], d = {
                            top: 0,
                            left: 0
                        };
                        return 'fixed' === n.css(c, 'position') ? b = c.getBoundingClientRect() : (a = this.offsetParent(), b = this.offset(), n.nodeName(a[0], 'html') || (d = a.offset()), 
                        d.top += n.css(a[0], 'borderTopWidth', !0), d.left += n.css(a[0], 'borderLeftWidth', !0)), {
                            top: b.top - d.top - n.css(c, 'marginTop', !0),
                            left: b.left - d.left - n.css(c, 'marginLeft', !0)
                        };
                    }
                },
                offsetParent: function offsetParent() {
                    return this.map(function() {
                        var a = this.offsetParent || Jc;
                        while (a && !n.nodeName(a, 'html') && 'static' === n.css(a, 'position')) {
                            a = a.offsetParent;
                        }
                        return a || Jc;
                    });
                }
            }), n.each({
                scrollLeft: 'pageXOffset',
                scrollTop: 'pageYOffset'
            }, function(b, c) {
                var d = 'pageYOffset' === c;
                n.fn[b] = function(e) {
                    return J(this, function(b, e, f) {
                        var g = Kc(b);
                        return void 0 === f ? g ? g[c] : b[e] : void (g ? g.scrollTo(d ? a.pageXOffset : f, d ? f : a.pageYOffset) : b[e] = f);
                    }, b, e, arguments.length, null);
                };
            }), n.each([ 'top', 'left' ], function(a, b) {
                n.cssHooks[b] = yb(k.pixelPosition, function(a, c) {
                    return c ? (c = xb(a, b), vb.test(c) ? n(a).position()[b] + 'px' : c) : void 0;
                });
            }), n.each({
                Height: 'height',
                Width: 'width'
            }, function(a, b) {
                n.each({
                    padding: 'inner' + a,
                    content: b,
                    '': 'outer' + a
                }, function(c, d) {
                    n.fn[d] = function(d, e) {
                        var f = arguments.length && (c || 'boolean' != typeof d), g = c || (d === !0 || e === !0 ? 'margin' : 'border');
                        return J(this, function(b, c, d) {
                            var e;
                            return n.isWindow(b) ? b.document.documentElement['client' + a] : 9 === b.nodeType ? (e = b.documentElement, Math.max(b.body['scroll' + a], e['scroll' + a], b.body['offset' + a], e['offset' + a], e['client' + a])) : void 0 === d ? n.css(b, c, g) : n.style(b, c, d, g);
                        }, b, f ? d : void 0, f, null);
                    };
                });
            }), n.fn.size = function() {
                return this.length;
            }, n.fn.andSelf = n.fn.addBack, 'function' == 'function' && __webpack_require__(24) && !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
                return n;
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
            var Lc = a.jQuery, Mc = a.$;
            return n.noConflict = function(b) {
                return a.$ === n && (a.$ = Mc), b && a.jQuery === n && (a.jQuery = Lc), n;
            }, (typeof b === 'undefined' ? 'undefined' : _typeof(b)) === U && (a.jQuery = a.$ = n), n;
        });
    }).call(exports, __webpack_require__(5)(module));
}, function(module, exports) {
    var g;
    g = function() {
        return this;
    }();
    try {
        g = g || Function('return this')() || (1, eval)('this');
    } catch (e) {
        if (typeof window === 'object') g = window;
    }
    module.exports = g;
}, function(module, exports, __webpack_require__) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
        value: true
    });
    var _util = __webpack_require__(0);
    var _util2 = _interopRequireDefault(_util);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    var dau = {
        utcDateStringToMS: function utcDateStringToMS(txt) {
            if (!txt || !_util2.default.isString(txt)) return;
            if (txt.indexOf('T') > 0) return +Date.parse(txt);
            var arr = txt.split('-');
            if (arr.length === 6) {
                return Date.UTC(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]);
            }
        }
    };
    exports.default = dau;
}, function(module, exports, __webpack_require__) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
        value: true
    });
    var _domUtil = __webpack_require__(2);
    var _domUtil2 = _interopRequireDefault(_domUtil);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    var ku = {
        isCtrlKey: function isCtrlKey(e, isExclusive) {
            var exclusivityPredicate = isExclusive && !e.shiftKey && (!e.ctrlKey && !e.metaKey && _domUtil2.default.os === 'MacOS' || !e.altKey && _domUtil2.default.os !== 'MacOS');
            return (e.keyCode === 17 && _domUtil2.default.os !== 'MacOS' || e.keyCode === 18 && _domUtil2.default.os === 'MacOS') && (!isExclusive || exclusivityPredicate);
        },
        hasCtrlKeyModifier: function hasCtrlKeyModifier(e) {
            return e.ctrlKey && _domUtil2.default.os !== 'MacOS' || e.altKey && _domUtil2.default.os === 'MacOS';
        },
        hasAnyKeyModifier: function hasAnyKeyModifier(e) {
            return e.shiftKey || e.altKey || e.ctrlKey || e.metaKey;
        },
        isDeleteKey: function isDeleteKey(keyCode) {
            return keyCode === 46 && _domUtil2.default.os !== 'MacOS' || keyCode === 8 && _domUtil2.default.os === 'MacOS';
        },
        isKeyboardEventContentModifying: function isKeyboardEventContentModifying(e) {
            return !(e.keyCode > 36 && e.keyCode < 41) && !(e.keyCode > 15 && e.keyCode < 19) && !(e.keyCode > 34 && e.keyCode < 37) && !(e.keyCode > 32 && e.keyCode < 35) && e.keyCode !== 9 && e.keyCode !== 20 && e.keyCode !== 144 && e.keyCode !== 91 && e.keyCode !== 27 && e.keyCode !== 13;
        }
    };
    exports.default = ku;
}, , , , function(module, exports, __webpack_require__) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
        value: true
    });
    exports.default = sessionsPanel;
    var _domUtil = __webpack_require__(2);
    var _domUtil2 = _interopRequireDefault(_domUtil);
    var _util = __webpack_require__(0);
    var _util2 = _interopRequireDefault(_util);
    var _keyUtil = __webpack_require__(9);
    var _keyUtil2 = _interopRequireDefault(_keyUtil);
    var _dateUtil = __webpack_require__(8);
    var _dateUtil2 = _interopRequireDefault(_dateUtil);
    var _jquery = __webpack_require__(6);
    var _jquery2 = _interopRequireDefault(_jquery);
    var _browser = __webpack_require__(1);
    var _browser2 = _interopRequireDefault(_browser);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function sessionsPanel(db, app, inContainerElement, inNumberOfPreviousSessionsToShow, inIsKeyboardShortcutsEnabled, inSelectionChangedCallback, inSessionsRemovedCallback, inSessionsAddedCallback) {
        var sp = this;
        var q = _domUtil2.default.makeQueryFunction();
        var $containerEl = (0, _jquery2.default)(this.containerElement = inContainerElement);
        this.rootElement = null;
        this.selectionChangedCallback = inSelectionChangedCallback;
        this.sessionsRemovedCallback = inSessionsRemovedCallback;
        this.sessionsAddedCallback = inSessionsAddedCallback;
        this.numberOfPreviousSessionsToShow = _util2.default.isNumeric(inNumberOfPreviousSessionsToShow) && inNumberOfPreviousSessionsToShow > 0 && inNumberOfPreviousSessionsToShow || 0;
        this.isShowHiddenPreviousSessions = false;
        this.isKeyboardShortcutsEnabled = inIsKeyboardShortcutsEnabled !== false;
        this.isShowSessionCountsInNavigationPane = false;
        this.selectedSessionSummaryElement_Head = null;
        this.selectedSessionSummaryElements_All = null;
        this.sessionSummaryCaretElement = null;
        this.renderedSessionSummaryCount_Current = 0;
        this.renderedSessionSummaryCount_Previous = 0;
        this.renderedSessionSummaryCount_Saved = 0;
        this.totalSessionSummaryCount_Current = 0;
        this.totalSessionSummaryCount_Previous = 0;
        this.totalSessionSummaryCount_Saved = 0;
        this.disableSessionSelectionAction = false;
        this.startDragSessionSummaryElement = null;
        this.dragSessionSummaryElements = [];
        this.dragSessionSummaryHeadElement = null;
        this.sessionSummaryClicked = null;
        this.delayedSetDragSelectionsTimer = null;
        this.allowUserInteraction = true;
        this.rangeSelectAnchorSessionSummary = null;
        $containerEl.on('click mousedown', '.sessionsPanel_SessionSummary', function(e) {
            if (e.target.classList.contains('sessionsPanel_SessionSummaryDeleteGlyph')) {
                if (e.type === 'click' && e.which === 1 && !_keyUtil2.default.hasCtrlKeyModifier(e) && !e.shiftKey) {
                    (0, _jquery2.default)(e.target).qtip('destroy', true);
                    app.lockAction();
                    sp.removeSessionTiles([ this ], false, function(inIsRequestHonored, inRemovedSessionInfos, inPriorSelectedHeadInfo, inPriorSelectedTailInfos) {
                        if (sp.sessionsRemovedCallback) {
                            sp.sessionsRemovedCallback(inIsRequestHonored, inRemovedSessionInfos, inPriorSelectedHeadInfo, inPriorSelectedTailInfos);
                        }
                        app.unlockAction();
                    });
                }
            } else if (e.type === 'mousedown') {
                sp.sessionSummaryClicked = this;
                sp.requestSelectSessionSummary(this, sp.getSessionSummarySelectionTypeByKeyModifiers(_keyUtil2.default.hasCtrlKeyModifier(e), e.shiftKey), function(inIsSelectRequestHonored, inSelectedSessionInfo_Head, inSelectedSessionInfos_All, inOptimizeSessionCombine) {
                    if (_keyUtil2.default.hasCtrlKeyModifier(e) || e.shiftKey) {
                        sp.requestSetSessionSummaryCaret_SelectionHead();
                    } else {
                        sp.requestClearSessionSummaryCaret();
                    }
                    sp.selectionChangedCallback(inIsSelectRequestHonored, inSelectedSessionInfo_Head, inSelectedSessionInfos_All, inOptimizeSessionCombine);
                }, 'none', true);
            }
        });
        $containerEl.on('mousedown', '#sessionsPanel', function() {
            if (sp.sessionSummaryClicked) {
                sp.dragSessionSummaryElements.length = 0;
                sp.dragSessionSummaryElements.push(sp.dragSessionSummaryHeadElement = sp.startDragSessionSummaryElement = sp.sessionSummaryClicked);
                sp.sessionSummaryClicked = null;
            } else {
                sp.startDragSessionSummaryElement = null;
            }
        });
        $containerEl.on('mouseover', '#sessionsPanel', function(e) {
            if (sp.startDragSessionSummaryElement && e.target != sp.rootElement && e.which == 1 && !_keyUtil2.default.hasCtrlKeyModifier(e) && !e.shiftKey) {
                var isSearchBackwards = sp.startDragSessionSummaryElement.compareDocumentPosition(e.target) === Node.DOCUMENT_POSITION_PRECEDING;
                var el = sp.findSessionSummaryElement(sp.startDragSessionSummaryElement, isSearchBackwards, undefined, 'none', false);
                var selectedSessionSummaries = 0;
                while (el && (!isSearchBackwards && el.compareDocumentPosition(e.target) !== Node.DOCUMENT_POSITION_PRECEDING || isSearchBackwards && e.target.compareDocumentPosition(el) !== Node.DOCUMENT_POSITION_PRECEDING)) {
                    sp.styleSessionSummaryElement(el, 'head');
                    sp.dragSessionSummaryElements.push(el);
                    selectedSessionSummaries++;
                    sp.dragSessionSummaryHeadElement = el;
                    el = sp.findSessionSummaryElement(el, isSearchBackwards, undefined, 'none', false);
                }
                el = e.target;
                while (el !== sp.rootElement && el.parentNode !== sp.rootElement) {
                    el = el.parentNode;
                }
                if (el && el.parentNode === sp.rootElement) {
                    var thatElement = el;
                    if (isSessionTile(el)) {
                        sp.dragSessionSummaryHeadElement = el;
                    } else {
                        el = sp.findSessionSummaryElement(thatElement, !isSearchBackwards, undefined, 'head', false);
                        if (el) {
                            sp.dragSessionSummaryHeadElement = el;
                        }
                    }
                    el = sp.findSessionSummaryElement(thatElement, isSearchBackwards, undefined, 'head', false);
                    while (el) {
                        sp.styleSessionSummaryElement(el, 'none');
                        var thisIndex = sp.dragSessionSummaryElements.indexOf(el);
                        if (thisIndex > -1) {
                            sp.dragSessionSummaryElements.splice(thisIndex, 1);
                        }
                        selectedSessionSummaries--;
                        el = sp.findSessionSummaryElement(el, isSearchBackwards, undefined, 'head', false);
                    }
                    el = sp.findSessionSummaryElement(sp.startDragSessionSummaryElement, !isSearchBackwards, undefined, 'head', false);
                    while (el) {
                        sp.styleSessionSummaryElement(el, 'none');
                        var thisIndex = sp.dragSessionSummaryElements.indexOf(el);
                        if (thisIndex > -1) {
                            sp.dragSessionSummaryElements.splice(thisIndex, 1);
                        }
                        selectedSessionSummaries--;
                        el = sp.findSessionSummaryElement(el, !isSearchBackwards, undefined, 'head', false);
                    }
                }
                if (selectedSessionSummaries) {
                    clearTimeout(sp.delayedSetDragSelectionsTimer);
                    sp.delayedSetDragSelectionsTimer = setTimeout(function() {
                        sp.setHeadAndAllSelectedSessionSummaryElements(sp.dragSessionSummaryHeadElement, sp.dragSessionSummaryElements);
                    }, 200);
                }
            }
        });
        $containerEl.on('mouseup mouseleave', function() {
            if (sp.startDragSessionSummaryElement) {
                clearTimeout(sp.delayedSetDragSelectionsTimer);
                if (sp.dragSessionSummaryElements.length > 1) {
                    sp.setHeadAndAllSelectedSessionSummaryElements(sp.dragSessionSummaryHeadElement, sp.dragSessionSummaryElements);
                }
                sp.startDragSessionSummaryElement = null;
                sp.setNavState();
            }
        });
        $containerEl.on('mouseenter', '.sessionsPanel_SessionSummaryDeleteGlyph', function(e) {
            (0, _jquery2.default)(this).qtip({
                overwrite: false,
                show: {
                    delay: 500,
                    event: e.type,
                    ready: true
                },
                content: {
                    text: 'Delete session'
                },
                position: {
                    my: 'bottom right',
                    at: 'top center',
                    adjust: {
                        x: 5,
                        y: -9
                    }
                },
                style: {
                    tip: {
                        corner: true,
                        width: 12,
                        mimic: 'bottom center',
                        offset: 7
                    }
                }
            });
        });
        $containerEl.on('mouseleave', '.sessionsPanel_SessionSummaryDeleteGlyph', function() {
            (0, _jquery2.default)(this).qtip('destroy', true);
        });
        this.concludeSelect = function(how) {
            if (sp.startDragSessionSummaryElement) {
                clearTimeout(sp.delayedSetDragSelectionsTimer);
                if (sp.dragSessionSummaryElements.length > 1) {
                    sp.setHeadAndAllSelectedSessionSummaryElements(sp.dragSessionSummaryHeadElement, sp.dragSessionSummaryElements);
                }
                sp.startDragSessionSummaryElement = null;
            }
            sp.setNavState(how);
        };
        this.addSessionTiles = function(sessionInfos, cb, searchTermRegEx) {
            if (sessionInfos) {
                var el = void 0, newTile = void 0, el3 = void 0;
                var sessionTilesToInsertAnimate = [], sessionTilesToRemoveAnimate = [], sessionTilesToRemoveAnimateCSS = [], addedSessionInfos = [];
                for (var i = sessionInfos.length; i--; ) {
                    if (!this.getSessionSummaryElementByIdAndType(sessionInfos[i].id, sessionInfos[i].type)) {
                        if (sessionInfos[i].type === 'current') {
                            el = getGroupHeaderElement_Current();
                            this.renderedSessionSummaryCount_Current++;
                            this.totalSessionSummaryCount_Current++;
                            if (cb || this.sessionsAddedCallback) {
                                addedSessionInfos.push(sessionInfos[i]);
                            }
                        } else if (sessionInfos[i].type === 'previous') {
                            el = getGroupHeaderElement_Previous();
                            this.renderedSessionSummaryCount_Previous++;
                            this.totalSessionSummaryCount_Previous++;
                            if (cb || this.sessionsAddedCallback) {
                                addedSessionInfos.push(sessionInfos[i]);
                            }
                        } else if (sessionInfos[i].type === 'saved') {
                            el = getGroupHeaderElement_Saved();
                            this.renderedSessionSummaryCount_Saved++;
                            this.totalSessionSummaryCount_Saved++;
                            if (cb || this.sessionsAddedCallback) {
                                addedSessionInfos.push(sessionInfos[i]);
                            }
                        } else {
                            continue;
                        }
                        var previousSessionCount = 0, isHidden = false, dateMS;
                        while (el) {
                            dateMS = _dateUtil2.default.utcDateStringToMS(sessionInfos[i].updated || sessionInfos[i].created);
                            if (isSessionTile(el) && dateMS && dateMS <= +el.dataset.d) {
                                if (isPreviousSessionTile(el)) {
                                    previousSessionCount++;
                                }
                            } else if (isSessionTile(el) || isGroupFooter(el)) {
                                newTile = this.createSessionTile(sessionInfos[i].id, sessionInfos[i].type, sessionInfos[i].name, sessionInfos[i].created, sessionInfos[i].updated, sessionInfos[i].unfilteredWindowCount, sessionInfos[i].filteredWindowCount, sessionInfos[i].unfilteredTabCount, sessionInfos[i].filteredTabCount, 'none', false, true, searchTermRegEx);
                                if (sessionInfos[i].type === 'previous' && previousSessionCount >= this.numberOfPreviousSessionsToShow && !this.isShowHiddenPreviousSessions) {
                                    isHidden = true;
                                }
                                if (isGroupFooter(el) && isSessionTilePlaceholder(el.previousElementSibling)) {
                                    this.rootElement.removeChild(el.previousElementSibling);
                                }
                                this.rootElement.insertBefore(newTile, el);
                                if (isHidden) {
                                    this.styleSessionSummaryElement(newTile, undefined, true);
                                } else {
                                    sessionTilesToInsertAnimate.push(newTile);
                                    if (sessionInfos[i].type === 'previous' && !this.isShowHiddenPreviousSessions) {
                                        el3 = el;
                                        while (el3 && !isGroupFooter(el3)) {
                                            if (isPreviousSessionTile(el3)) {
                                                previousSessionCount++;
                                                if (previousSessionCount >= this.numberOfPreviousSessionsToShow) {
                                                    sessionTilesToRemoveAnimate.push(el3);
                                                    sessionTilesToRemoveAnimateCSS.push('sessionsPanel_SessionSummary_Hidden');
                                                    break;
                                                }
                                            }
                                            el3 = el3.nextElementSibling;
                                        }
                                    }
                                }
                                break;
                            }
                            el = el.nextElementSibling;
                        }
                    }
                }
                var spliceIdx = void 0;
                for (var i = sessionTilesToInsertAnimate.length; i--; ) {
                    if ((spliceIdx = sessionTilesToRemoveAnimate.indexOf(sessionTilesToInsertAnimate[i])) > -1) {
                        sessionTilesToInsertAnimate.splice(i, 1);
                        sessionTilesToRemoveAnimate.splice(spliceIdx, 1);
                    }
                }
                var that = this;
                var elementInsertionAnimationFunction = _domUtil2.default.getElementInsertionAnimationFunction([ sessionTilesToInsertAnimate ], this.rootElement, null, null, 'fade', false);
                var elementRemovalAnimationFunction = _domUtil2.default.getElementRemovalAnimationFunction([ sessionTilesToRemoveAnimate ], null, 'fade', true, sessionTilesToRemoveAnimateCSS);
                var insertRunning = elementInsertionAnimationFunction != null;
                var removeRunning = elementRemovalAnimationFunction != null;
                _domUtil2.default.animLoop(function(deltaT) {
                    if (insertRunning !== false) {
                        insertRunning = elementInsertionAnimationFunction(deltaT);
                    }
                    if (removeRunning !== false) {
                        removeRunning = elementRemovalAnimationFunction(deltaT);
                    }
                    return insertRunning !== false || removeRunning !== false;
                }, function() {
                    that.refreshControlState_SessionSummaryGroupFooter_Previous();
                    that.setSessionSummaryGroupHeaderAnnotationElementContent(q('previousSessionsAnnotation'), that.renderedSessionSummaryCount_Previous, that.totalSessionSummaryCount_Previous);
                    that.setSessionSummaryGroupHeaderAnnotationElementContent(q('savedSessionsAnnotation'), that.renderedSessionSummaryCount_Saved, that.totalSessionSummaryCount_Saved);
                    var triggerSelectionChangedCallback = false;
                    for (var i = that.selectedSessionSummaryElements_All.length - 1; i >= 0; i--) {
                        if (isHiddenSessionTile(that.selectedSessionSummaryElements_All[i])) {
                            that.styleSessionSummaryElement(that.selectedSessionSummaryElements_All[i], 'none');
                            that.selectedSessionSummaryElements_All.splice(i, 1);
                            triggerSelectionChangedCallback = true;
                        }
                    }
                    if (isHiddenSessionTile(that.selectedSessionSummaryElement_Head)) {
                        that.styleSessionSummaryElement(that.selectedSessionSummaryElement_Head, 'none');
                        if (that.selectedSessionSummaryElements_All.length > 0) {
                            that.selectedSessionSummaryElement_Head = that.selectedSessionSummaryElements_All[that.selectedSessionSummaryElements_All.length - 1];
                        } else {
                            that.selectedSessionSummaryElement_Head = that.findNextQualifyingSessionSummaryElement(that.selectedSessionSummaryElement_Head, undefined, undefined, false, null, false);
                        }
                        that.styleSessionSummaryElement(that.selectedSessionSummaryElement_Head, 'head');
                        triggerSelectionChangedCallback = true;
                    }
                    if (cb || that.sessionsAddedCallback) {
                        if (cb) {
                            if (!addedSessionInfos.length && sessionInfos.length) {
                                cb(false);
                            } else {
                                cb(true, addedSessionInfos);
                            }
                        } else if (that.sessionsAddedCallback) {
                            if (!addedSessionInfos.length && sessionInfos.length) {
                                that.sessionsAddedCallback(false);
                            } else {
                                that.sessionsAddedCallback(true, addedSessionInfos);
                            }
                        }
                    }
                    if (triggerSelectionChangedCallback && that.selectionChangedCallback) {
                        that.selectionChangedCallback(true, that.getSelectedSessionInfo_Head(), that.getSelectedSessionInfos_All(), false);
                        sp.concludeSelect();
                    }
                });
            }
        };
        this.requestRemoveSelectedSessionSummaries = function(doNotSelectNewTile, cb) {
            if (this.selectedSessionSummaryElements_All.length === 0) {
                this.removeSessionTiles([ this.selectedSessionSummaryElement_Head ], doNotSelectNewTile, cb);
            } else {
                this.removeSessionTiles(this.selectedSessionSummaryElements_All, doNotSelectNewTile, cb);
            }
        };
        this.requestRemoveSessionSummariesBySessionInfos = function(sessionInfos, doNotSelectNewTile, cb) {
            if (sessionInfos && sessionInfos.length > 0) {
                var sessionSummaryElementsToRemove = [];
                var el = null;
                for (var i = sessionInfos.length - 1; i >= 0; i--) {
                    if (el = this.getSessionSummaryElementBySessionInfo(sessionInfos[i])) {
                        sessionSummaryElementsToRemove.push(el);
                    }
                }
                this.removeSessionTiles(sessionSummaryElementsToRemove, doNotSelectNewTile, cb);
            }
        };
        this.removeSessionTiles = function(tiles, doNotSelectNewTile, cb) {
            if (!tiles) return;
            var priorSelectedHeadInfo = sp.getSelectedSessionInfo_Head(), priorSelectedTailInfos = sp.getSelectedSessionInfos_All(), tilesToRemove = tiles.filter(function(tile) {
                return isDeletableSessionTile(tile);
            });
            if (tilesToRemove.length) {
                var i, sessionTileToHeadSelect;
                var currentSessionTileCounts = getSessionTileCounts(getGroupHeaderElement_Current(), tilesToRemove), previousSessionTileCounts = getSessionTileCounts(getGroupHeaderElement_Previous(), tilesToRemove), savedSessionTileCounts = getSessionTileCounts(getGroupHeaderElement_Saved(), tilesToRemove);
                if (!doNotSelectNewTile && _util2.default.contains(tilesToRemove, this.selectedSessionSummaryElement_Head)) {
                    for (i = this.selectedSessionSummaryElements_All.length; i--; ) {
                        if (!_util2.default.contains(tilesToRemove, this.selectedSessionSummaryElements_All[i])) {
                            sessionTileToHeadSelect = this.selectedSessionSummaryElements_All[i];
                            break;
                        }
                    }
                    if (!sessionTileToHeadSelect) {
                        var firstHiddenElementToBecomeVisible = void 0;
                        if (previousSessionTileCounts.visibleParticipatingCount && previousSessionTileCounts.hiddenNonParticipatingCount) {
                            firstHiddenElementToBecomeVisible = this.findNextQualifyingSessionSummaryElement(getGroupHeaderElement_Previous(), 'previous', undefined, true, [ tilesToRemove ], false);
                        }
                        sessionTileToHeadSelect = this.findNextQualifyingSessionSummaryElement(this.selectedSessionSummaryElement_Head, undefined, undefined, false, [ tilesToRemove ], false, firstHiddenElementToBecomeVisible ? [ firstHiddenElementToBecomeVisible ] : undefined);
                    }
                }
                var that = this;
                var thisAnimationSpeed = tilesToRemove.length * 7 + 90;
                var elementInsertionAnimationFunction1 = null;
                if (previousSessionTileCounts.visibleParticipatingCount) {
                    var elementsToShow = [];
                    var el = that.findSessionSummaryElement(getGroupHeaderElement_Previous(), false, 'previous', undefined, true);
                    while (el && _util2.default.contains(tilesToRemove, el)) {
                        el = that.findSessionSummaryElement(el, false, 'previous', undefined, true);
                    }
                    for (i = 0; i < previousSessionTileCounts.visibleParticipatingCount && el; i++) {
                        elementsToShow.push(el);
                        this.styleSessionSummaryElement(el, undefined, false);
                        el = that.findSessionSummaryElement(el, false, 'previous', undefined, true);
                        while (el && _util2.default.contains(tilesToRemove, el)) {
                            el = that.findSessionSummaryElement(el, false, 'previous', undefined, true);
                        }
                    }
                    if (elementsToShow.length) {
                        elementInsertionAnimationFunction1 = _domUtil2.default.getElementInsertionAnimationFunction([ elementsToShow ], this.rootElement, thisAnimationSpeed, null, 'none', true);
                    }
                }
                var elementInsertionAnimationFunction2 = null;
                var elementInsertionAnimationFunction3 = null;
                var elementInsertionAnimationFunction4 = null;
                if (currentSessionTileCounts.hiddenNonParticipatingCount === 0 && currentSessionTileCounts.visibleNonParticipatingCount === 0 && (currentSessionTileCounts.hiddenParticipatingCount > 0 || currentSessionTileCounts.visibleParticipatingCount > 0)) {
                    elementInsertionAnimationFunction2 = _domUtil2.default.getElementInsertionAnimationFunction([ [ that.createSessionSummaryNonePlaceholderElement() ] ], this.rootElement, thisAnimationSpeed, [ getGroupFooterElement_Current() ], 'fade', true);
                }
                if (previousSessionTileCounts.hiddenNonParticipatingCount === 0 && previousSessionTileCounts.visibleNonParticipatingCount === 0 && (previousSessionTileCounts.hiddenParticipatingCount > 0 || previousSessionTileCounts.visibleParticipatingCount > 0)) {
                    elementInsertionAnimationFunction3 = _domUtil2.default.getElementInsertionAnimationFunction([ [ that.createSessionSummaryNonePlaceholderElement() ] ], this.rootElement, thisAnimationSpeed, [ getGroupFooterElement_Previous() ], 'fade', true);
                }
                if (savedSessionTileCounts.hiddenNonParticipatingCount === 0 && savedSessionTileCounts.visibleNonParticipatingCount === 0 && (savedSessionTileCounts.hiddenParticipatingCount > 0 || savedSessionTileCounts.visibleParticipatingCount > 0)) {
                    elementInsertionAnimationFunction4 = _domUtil2.default.getElementInsertionAnimationFunction([ [ that.createSessionSummaryNonePlaceholderElement() ] ], this.rootElement, thisAnimationSpeed, [ getGroupFooterElement_Saved() ], 'fade', true);
                }
                var previousSessionSummaryElementsToRemove = [];
                var nonPreviousSessionSummaryElementsToRemove = [];
                for (i = tilesToRemove.length; i--; ) {
                    if (isPreviousSessionTile(tilesToRemove[i])) {
                        previousSessionSummaryElementsToRemove.push(tilesToRemove[i]);
                    } else {
                        nonPreviousSessionSummaryElementsToRemove.push(tilesToRemove[i]);
                    }
                }
                var elementRemovalAnimationFunction1 = _domUtil2.default.getElementRemovalAnimationFunction([ previousSessionSummaryElementsToRemove ], thisAnimationSpeed, 'pop', true, null);
                var elementRemovalAnimationFunction2 = _domUtil2.default.getElementRemovalAnimationFunction([ nonPreviousSessionSummaryElementsToRemove ], thisAnimationSpeed, 'pop', false, null);
                setTimeout(function() {
                    var insertRunning1 = elementInsertionAnimationFunction1 != null;
                    var insertRunning2 = elementInsertionAnimationFunction2 != null;
                    var insertRunning3 = elementInsertionAnimationFunction3 != null;
                    var insertRunning4 = elementInsertionAnimationFunction4 != null;
                    var removeRunning1 = elementRemovalAnimationFunction1 != null;
                    var removeRunning2 = elementRemovalAnimationFunction2 != null;
                    _domUtil2.default.animLoop(function(deltaT) {
                        if (insertRunning1 !== false) {
                            insertRunning1 = elementInsertionAnimationFunction1(deltaT);
                        }
                        if (insertRunning2 !== false) {
                            insertRunning2 = elementInsertionAnimationFunction2(deltaT);
                        }
                        if (insertRunning3 !== false) {
                            insertRunning3 = elementInsertionAnimationFunction3(deltaT);
                        }
                        if (insertRunning4 !== false) {
                            insertRunning4 = elementInsertionAnimationFunction4(deltaT);
                        }
                        if (removeRunning1 !== false) {
                            removeRunning1 = elementRemovalAnimationFunction1(deltaT);
                        }
                        if (removeRunning2 !== false) {
                            removeRunning2 = elementRemovalAnimationFunction2(deltaT);
                        }
                        return insertRunning1 !== false || insertRunning2 !== false || insertRunning3 !== false || insertRunning4 !== false || removeRunning1 !== false || removeRunning2 !== false;
                    }, function() {
                        that.renderedSessionSummaryCount_Current -= currentSessionTileCounts.hiddenParticipatingCount + currentSessionTileCounts.visibleParticipatingCount;
                        that.renderedSessionSummaryCount_Previous -= previousSessionTileCounts.hiddenParticipatingCount + previousSessionTileCounts.visibleParticipatingCount;
                        that.renderedSessionSummaryCount_Saved -= savedSessionTileCounts.hiddenParticipatingCount + savedSessionTileCounts.visibleParticipatingCount;
                        that.totalSessionSummaryCount_Current -= currentSessionTileCounts.hiddenParticipatingCount + currentSessionTileCounts.visibleParticipatingCount;
                        that.totalSessionSummaryCount_Previous -= previousSessionTileCounts.hiddenParticipatingCount + previousSessionTileCounts.visibleParticipatingCount;
                        that.totalSessionSummaryCount_Saved -= savedSessionTileCounts.hiddenParticipatingCount + savedSessionTileCounts.visibleParticipatingCount;
                        that.refreshControlState_SessionSummaryGroupFooter_Previous();
                        that.setSessionSummaryGroupHeaderAnnotationElementContent(q('previousSessionsAnnotation'), that.renderedSessionSummaryCount_Previous, that.totalSessionSummaryCount_Previous);
                        that.setSessionSummaryGroupHeaderAnnotationElementContent(q('savedSessionsAnnotation'), that.renderedSessionSummaryCount_Saved, that.totalSessionSummaryCount_Saved);
                        var triggerSelectionChangedCallback = false;
                        for (i = that.selectedSessionSummaryElements_All.length; i--; ) {
                            if (_util2.default.contains(tilesToRemove, that.selectedSessionSummaryElements_All[i])) {
                                that.selectedSessionSummaryElements_All.splice(i, 1);
                                triggerSelectionChangedCallback = true;
                            }
                        }
                        if (sessionTileToHeadSelect) {
                            that.selectedSessionSummaryElement_Head = sessionTileToHeadSelect;
                            that.styleSessionSummaryElement(that.selectedSessionSummaryElement_Head, 'head');
                            triggerSelectionChangedCallback = true;
                        }
                        if (cb = cb || sp.sessionsRemovedCallback) {
                            var outRemovedSessionInfos = [];
                            for (i = 0; i < tilesToRemove.length; i++) {
                                outRemovedSessionInfos.push(app.createSessionInfo(that.getSessionTileType(tilesToRemove[i]), that.getSessionTileId(tilesToRemove[i])));
                            }
                            cb(true, outRemovedSessionInfos, priorSelectedHeadInfo, priorSelectedTailInfos);
                        }
                        if (!doNotSelectNewTile && triggerSelectionChangedCallback && that.selectionChangedCallback) {
                            that.selectionChangedCallback(true, that.getSelectedSessionInfo_Head(), that.getSelectedSessionInfos_All(), false);
                            sp.concludeSelect();
                        }
                    });
                }, 150);
            } else if (tiles.length && sp.sessionsRemovedCallback) {
                (cb = cb || sp.sessionsRemovedCallback) && cb(false);
            }
        };
        this.requestSelectSessionSummaryByIdAndType = function(id, type, selectionActionType, cb, setNavStateHow) {
            sp.requestSelectSessionSummary(sp.getSessionSummaryElementByIdAndType(id, type), selectionActionType, cb, setNavStateHow);
        };
        this.requestSelectSessionSummary = function(inElement, inSelectionActionType, cb, setNavStateHow, dontConclude) {
            if (inSelectionActionType === 'single' && !sp.getSelectedSessionInfos_All().length) {
                if (app.compareSessionInfos(sp.createSessionInfoFromSessionSummaryElement(inElement), sp.getSelectedSessionInfo_Head())) {
                    return;
                }
            }
            cb = cb || sp.selectionChangedCallback;
            var optimizeMerge, isSelectRequestHonored = false;
            if (!sp.disableSessionSelectionAction) {
                if (!inElement && sp.selectedSessionSummaryElements_All.length) {
                    inElement = sp.selectedSessionSummaryElement_Head;
                }
                if (inElement && inElement.parentNode == sp.rootElement && isSessionTile(inElement) && !isHiddenSessionTile(inElement)) {
                    isSelectRequestHonored = true;
                    optimizeMerge = false;
                    if (inSelectionActionType && inSelectionActionType.startsWith('cumulative')) {
                        if (sp.selectedSessionSummaryElement_Head) {
                            var indexOfRequestedElementInSelectedSessionSummaryElements_All = sp.selectedSessionSummaryElements_All.indexOf(inElement);
                            if (indexOfRequestedElementInSelectedSessionSummaryElements_All === -1) {
                                if (sp.selectedSessionSummaryElements_All.length === 0) {
                                    sp.selectedSessionSummaryElements_All.push(sp.selectedSessionSummaryElement_Head);
                                }
                                if (inElement != sp.selectedSessionSummaryElement_Head) {
                                    sp.selectedSessionSummaryElements_All.push(inElement);
                                    sp.styleSessionSummaryElement(sp.selectedSessionSummaryElement_Head, 'tail');
                                    sp.styleSessionSummaryElement(sp.selectedSessionSummaryElement_Head = inElement, 'head');
                                }
                                if (sp.selectedSessionSummaryElements_All.length > 2) {
                                    optimizeMerge = true;
                                }
                            } else {
                                if (inElement == sp.selectedSessionSummaryElement_Head) {
                                    sp.selectedSessionSummaryElements_All.splice(indexOfRequestedElementInSelectedSessionSummaryElements_All, 1);
                                    if (sp.selectedSessionSummaryElements_All.length > 0) {
                                        sp.styleSessionSummaryElement(inElement, 'none');
                                        sp.styleSessionSummaryElement(sp.selectedSessionSummaryElement_Head = sp.selectedSessionSummaryElements_All[sp.selectedSessionSummaryElements_All.length - 1], 'head');
                                    }
                                } else {
                                    sp.selectedSessionSummaryElements_All.splice(indexOfRequestedElementInSelectedSessionSummaryElements_All, 1);
                                    sp.styleSessionSummaryElement(inElement, 'none');
                                }
                            }
                        }
                    } else if (inSelectionActionType === 'rangecumulative') {
                        if (sp.selectedSessionSummaryElement_Head && sp.selectedSessionSummaryElement_Head != inElement) {
                            var isRangeDirectionBackwards = sp.selectedSessionSummaryElement_Head.compareDocumentPosition(inElement) === Node.DOCUMENT_POSITION_PRECEDING;
                            var thisSummaryElement = sp.selectedSessionSummaryElement_Head;
                            sp.styleSessionSummaryElement(thisSummaryElement, 'tail');
                            while (thisSummaryElement && thisSummaryElement != inElement) {
                                if (sp.selectedSessionSummaryElements_All.indexOf(thisSummaryElement) == -1) {
                                    sp.selectedSessionSummaryElements_All.push(thisSummaryElement);
                                    sp.styleSessionSummaryElement(thisSummaryElement, 'tail');
                                }
                                thisSummaryElement = sp.findSessionSummaryElement(thisSummaryElement, isRangeDirectionBackwards, undefined, undefined, false);
                            }
                            sp.styleSessionSummaryElement(sp.selectedSessionSummaryElement_Head = thisSummaryElement, 'head');
                            if (sp.selectedSessionSummaryElements_All.indexOf(thisSummaryElement) == -1) {
                                sp.selectedSessionSummaryElements_All.push(thisSummaryElement);
                            }
                            if (sp.rangeSelectAnchorSessionSummary) {
                                sp.requestSetSessionSummaryCaret(sp.selectedSessionSummaryElement_Head);
                            }
                        }
                    } else if (inSelectionActionType === 'range') {
                        var effectiveAnchor = sp.rangeSelectAnchorSessionSummary || sp.selectedSessionSummaryElement_Head;
                        var isRangeDirectionBackwards = effectiveAnchor.compareDocumentPosition(inElement) === Node.DOCUMENT_POSITION_PRECEDING;
                        var thisElement;
                        sp.selectedSessionSummaryElements_All.length = 0;
                        thisElement = sp.findSessionSummaryElement(inElement, isRangeDirectionBackwards, null, 'headortail', false);
                        while (thisElement) {
                            sp.styleSessionSummaryElement(thisElement, 'none');
                            thisElement = sp.findSessionSummaryElement(thisElement, isRangeDirectionBackwards, null, 'headortail', false);
                        }
                        thisElement = sp.findSessionSummaryElement(effectiveAnchor, !isRangeDirectionBackwards, null, 'headortail', false);
                        while (thisElement) {
                            sp.styleSessionSummaryElement(thisElement, 'none');
                            thisElement = sp.findSessionSummaryElement(thisElement, !isRangeDirectionBackwards, null, 'headortail', false);
                        }
                        thisElement = effectiveAnchor;
                        while (thisElement && thisElement != inElement) {
                            sp.styleSessionSummaryElement(thisElement, 'tail');
                            sp.selectedSessionSummaryElements_All.push(thisElement);
                            thisElement = sp.findSessionSummaryElement(thisElement, isRangeDirectionBackwards, null, null, false);
                        }
                        sp.styleSessionSummaryElement(thisElement, 'head');
                        sp.requestSetSessionSummaryCaret(thisElement);
                        if (sp.selectedSessionSummaryElements_All.indexOf(thisElement) === -1) {
                            sp.selectedSessionSummaryElements_All.push(thisElement);
                        }
                        sp.selectedSessionSummaryElement_Head = thisElement;
                    } else {
                        if (sp.selectedSessionSummaryElements_All.length > 0) {
                            for (var i = sp.selectedSessionSummaryElements_All.length - 1; i >= 0; i--) {
                                if (inElement != sp.selectedSessionSummaryElements_All[i]) {
                                    sp.styleSessionSummaryElement(sp.selectedSessionSummaryElements_All[i], 'none');
                                }
                            }
                            sp.selectedSessionSummaryElements_All.length = 0;
                        }
                        if (inElement != sp.selectedSessionSummaryElement_Head) {
                            sp.styleSessionSummaryElement(sp.selectedSessionSummaryElement_Head, 'none');
                            sp.styleSessionSummaryElement(sp.selectedSessionSummaryElement_Head = inElement, 'head');
                        }
                    }
                }
            }
            if (cb) {
                cb.call(sp, isSelectRequestHonored, sp.getSelectedSessionInfo_Head(), sp.getSelectedSessionInfos_All(), optimizeMerge);
            }
            if (!dontConclude && isSelectRequestHonored) {
                sp.concludeSelect(setNavStateHow);
            }
        };
        this.requestSelectSessionSummariesBySessionInfos = function(inSessionInfo_Head, inSessionInfos_All, cb, setNavStateHow) {
            cb = cb || sp.selectionChangedCallback;
            var i, el, selectedTiles_All = [], isSelectRequestHonored = false;
            if (!sp.disableSessionSelectionAction) {
                if (inSessionInfos_All && inSessionInfos_All.length) {
                    for (i = 0; i < inSessionInfos_All.length; i++) {
                        el = sp.getSessionSummaryElementBySessionInfo(inSessionInfos_All[i]);
                        if (el && el.parentNode === sp.rootElement && isSessionTile(el) && !isHiddenSessionTile(el)) {
                            selectedTiles_All.push(el);
                        }
                    }
                    if (selectedTiles_All.length) {
                        isSelectRequestHonored = true;
                        sp.styleSessionSummaryElement(sp.selectedSessionSummaryElement_Head, 'none');
                        for (i = sp.selectedSessionSummaryElements_All.length; i--; ) {
                            sp.styleSessionSummaryElement(sp.selectedSessionSummaryElements_All[i], 'none');
                        }
                        sp.selectedSessionSummaryElements_All = selectedTiles_All;
                        sp.selectedSessionSummaryElement_Head = selectedTiles_All[selectedTiles_All.length - 1];
                        for (i = sp.selectedSessionSummaryElements_All.length; i--; ) {
                            sp.styleSessionSummaryElement(sp.selectedSessionSummaryElements_All[i], sp.selectedSessionSummaryElements_All[i] === sp.selectedSessionSummaryElement_Head ? 'head' : 'tail');
                        }
                    }
                } else {
                    el = sp.getSessionSummaryElementBySessionInfo(inSessionInfo_Head);
                    if (el && el.parentNode === sp.rootElement && isSessionTile(el)) {
                        if (isHiddenSessionTile(el)) {
                            el = sp.findSessionSummaryElement(el, true, undefined, undefined, false);
                        }
                        if (el) {
                            isSelectRequestHonored = true;
                            sp.styleSessionSummaryElement(sp.selectedSessionSummaryElement_Head, 'none');
                            for (i = sp.selectedSessionSummaryElements_All.length; i--; ) {
                                sp.styleSessionSummaryElement(sp.selectedSessionSummaryElements_All[i], 'none');
                            }
                            sp.selectedSessionSummaryElements_All.length = 0;
                            sp.selectedSessionSummaryElement_Head = el;
                            sp.styleSessionSummaryElement(sp.selectedSessionSummaryElement_Head, 'head');
                        }
                    }
                }
            }
            if (cb) {
                cb.call(sp, isSelectRequestHonored, sp.getSelectedSessionInfo_Head(), sp.getSelectedSessionInfos_All(), false);
            }
            if (isSelectRequestHonored) {
                sp.concludeSelect(setNavStateHow);
            }
        };
        this.requestSelectSessionSummary_Caret = function(inSelectionActionType) {
            if (sp.sessionSummaryCaretElement) {
                sp.requestSelectSessionSummary(sp.sessionSummaryCaretElement, inSelectionActionType);
            }
        };
        this.requestSelectSessionSummary_Forwards = function(inIsRangeSelect, cb) {
            sp.requestSelectSessionSummary_ForwardsOrBackwards(false, inIsRangeSelect, cb);
        };
        this.requestSelectSessionSummary_Backwards = function(inIsRangeSelect, cb) {
            sp.requestSelectSessionSummary_ForwardsOrBackwards(true, inIsRangeSelect, cb);
        };
        this.requestSelectSessionSummary_ForwardsOrBackwards = function(inIsBackwards, inIsRangeSelect, cb) {
            cb = cb || sp.selectionChangedCallback;
            sp.requestSelectSessionSummary(sp.findSessionSummaryElement(sp.selectedSessionSummaryElement_Head, inIsBackwards, undefined, undefined, false), inIsRangeSelect ? 'range' : '', function(inIsSelectRequestHonored, inSelectedSessionInfo_Head, inSelectedSessionInfos_All, inOptimizeSessionCombine) {
                if (cb) {
                    cb.call(sp, inIsSelectRequestHonored, inSelectedSessionInfo_Head, inSelectedSessionInfos_All, inOptimizeSessionCombine);
                }
                if (inIsSelectRequestHonored) {
                    sp.getSessionSummaryElementBySessionInfo(inSelectedSessionInfo_Head).scrollIntoViewIfNeeded(false);
                    sp.concludeSelect();
                }
            }, 'none', true);
        };
        this.requestSelectSessionSummary_FirstInList = function(cb, inIsDontScrollIntoView, inSelectionActionType, setNavStateHow) {
            cb = cb || sp.selectionChangedCallback;
            var thisElement = sp.findSessionSummaryElement(sp.rootElement.firstChild, false, undefined, undefined, false);
            if (sp.isSessionSummaryElement_SelectionMode_None(thisElement) || inSelectionActionType !== 'cumulative') {
                sp.requestSelectSessionSummary(thisElement, inSelectionActionType || '', function(inIsSelectRequestHonored, inSelectedSessionInfo_Head, inSelectedSessionInfos_All, inOptimizeSessionCombine) {
                    if (cb) {
                        cb.call(sp, inIsSelectRequestHonored, inSelectedSessionInfo_Head, inSelectedSessionInfos_All, inOptimizeSessionCombine);
                    }
                    if (inIsSelectRequestHonored) {
                        if (!inIsDontScrollIntoView) {
                            sp.getSessionSummaryElementBySessionInfo(inSelectedSessionInfo_Head).scrollIntoViewIfNeeded(false);
                        }
                        sp.concludeSelect(setNavStateHow);
                    }
                }, 'none', true);
            } else if (!sp.isSessionSummaryElement_SelectionMode_Head(thisElement)) {
                _util2.default.move(sp.selectedSessionSummaryElements_All, sp.selectedSessionSummaryElement_Head = thisElement);
                if (cb) {
                    cb.call(sp, true, sp.getSelectedSessionInfo_Head(), sp.getSelectedSessionInfos_All(), false);
                }
                sp.concludeSelect(setNavStateHow);
            }
        };
        this.requestSelectSessionSummary_LastInList = function(cb, inIsDontScrollIntoView, inSelectionActionType) {
            cb = cb || sp.selectionChangedCallback;
            var thisElement = sp.findSessionSummaryElement(sp.rootElement.children[sp.rootElement.children.length - 1], true, undefined, undefined, false);
            if (sp.isSessionSummaryElement_SelectionMode_None(thisElement) || inSelectionActionType !== 'cumulative') {
                sp.requestSelectSessionSummary(thisElement, inSelectionActionType || '', function(inIsSelectRequestHonored, inSelectedSessionInfo_Head, inSelectedSessionInfos_All, inOptimizeSessionCombine) {
                    if (cb) {
                        cb.call(sp, inIsSelectRequestHonored, inSelectedSessionInfo_Head, inSelectedSessionInfos_All, inOptimizeSessionCombine);
                    }
                    if (inIsSelectRequestHonored) {
                        if (!inIsDontScrollIntoView) {
                            sp.getSessionSummaryElementBySessionInfo(inSelectedSessionInfo_Head).scrollIntoViewIfNeeded(false);
                        }
                        sp.concludeSelect();
                    }
                }, 'none', true);
            } else if (!sp.isSessionSummaryElement_SelectionMode_Head(thisElement)) {
                _util2.default.move(sp.selectedSessionSummaryElements_All, sp.selectedSessionSummaryElement_Head = thisElement);
                if (cb) {
                    cb.call(sp, true, sp.getSelectedSessionInfo_Head(), sp.getSelectedSessionInfos_All(), false);
                }
                sp.concludeSelect();
            }
        };
        this.requestToggleShowHideHiddenSessions_Previous = function() {
            this.isShowHiddenPreviousSessions = !this.isShowHiddenPreviousSessions;
            this.refreshShownHiddenSessionSummaries_Previous();
        };
        this.refreshSessionTileDate = function(el) {
            var d = el.dataset.d, type = sp.getSessionTileType(el);
            if (!d || !type) return;
            app.updateSessionElWithDate(type === 'saved' ? el.getElementsByClassName('sessionsPanel_SessionSummaryAnnotation_Date')[0] : el.getElementsByClassName('sessionsPanel_SessionSummaryLabel')[0], new Date(+d), type, el.dataset.u);
        };
        this.updateSessionTileName = function(id, type, name, searchTermRegEx) {
            if (type === 'saved') {
                var el = this.getSessionSummaryElementByIdAndType(id, type);
                if (!el) return;
                updateSessionElWithName(el.getElementsByClassName('sessionsPanel_SessionSummaryLabel')[0], name, searchTermRegEx);
            }
        };
        this.updateSessionTileDate = function(id, type, createdDate, updatedDate, cb) {
            this.updateSessionTileElDate(this.getSessionSummaryElementByIdAndType(id, type), createdDate, updatedDate, type, cb);
        };
        this.updateSessionTileElDate = function(el, createdDate, updatedDate, sessionType, cb) {
            if (!el || !updatedDate) return cb && cb();
            if (createdDate || updatedDate) {
                el.dataset.d = +updatedDate || +createdDate;
                if (!createdDate || updatedDate && +createdDate < +updatedDate) {
                    el.dataset.u = true;
                } else {
                    el.removeAttribute('data-u');
                }
            } else {
                el.removeAttribute('data-u');
            }
            if (sessionType === 'saved') {
                app.updateSessionElWithDate(el.getElementsByClassName('sessionsPanel_SessionSummaryAnnotation_Date')[0], updatedDate, sessionType, !createdDate || +createdDate < +updatedDate);
            } else {
                app.updateSessionElWithDate(el.getElementsByClassName('sessionsPanel_SessionSummaryLabel')[0], updatedDate, sessionType);
            }
            var moveRequired = void 0;
            var prevTileOfType = this.findSessionSummaryElement(el, true, this.getSessionTileType(el));
            if (prevTileOfType && +prevTileOfType.dataset.d < +el.dataset.d) {
                moveRequired = true;
            } else {
                var nextTileOfType = this.findSessionSummaryElement(el, false, this.getSessionTileType(el));
                if (nextTileOfType && +nextTileOfType.dataset.d > +el.dataset.d) {
                    moveRequired = true;
                }
            }
            if (moveRequired) {
                var navEl = getGroupHeaderElement(this.getSessionTileType(el));
                var sessionTilesToInsertAnimate = [];
                while (navEl) {
                    if (isSessionTile(navEl) && +el.dataset.d > +navEl.dataset.d || isGroupFooter(navEl)) {
                        this.rootElement.insertBefore(el, navEl);
                        sessionTilesToInsertAnimate.push(el);
                        break;
                    }
                    navEl = navEl.nextElementSibling;
                }
                getGroupHeaderElement_Saved().scrollIntoViewIfNeeded(false);
                var elementInsertionAnimationFunction = _domUtil2.default.getElementInsertionAnimationFunction([ sessionTilesToInsertAnimate ], this.rootElement, null, null, 'fade', false);
                var insertRunning = elementInsertionAnimationFunction != null;
                return _domUtil2.default.animLoop(function(deltaT) {
                    if (insertRunning !== false) {
                        insertRunning = elementInsertionAnimationFunction(deltaT);
                    }
                    return insertRunning !== false;
                }, function() {
                    cb && cb();
                });
            }
            cb && cb();
        };
        this.requestUpdateSessionSummaryFilterCountsByIdAndType = function(inId, inType, inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount) {
            this.requestUpdateSessionSummaryFilterCounts(this.getSessionSummaryElementByIdAndType(inId, inType), inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount);
        };
        this.requestUpdateSessionSummaryFilterCounts = function(el, inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount) {
            if (el) {
                el = el.getElementsByClassName('sessionsPanel_SessionSummaryAnnotation');
                if (el.length > 0) {
                    var subElements = el[0].getElementsByClassName('sessionsPanel_SessionSummaryAnnotation_FilterCounts');
                    if (subElements.length > 0) {
                        subElements[0].innerHTML = app.getTabFilteringDescriptionHTML(inUnfilteredTabCount, inFilteredTabCount);
                    } else {
                        el[0].appendChild(_domUtil2.default.createElement('div', undefined, 'sessionsPanel_SessionSummaryAnnotation_FilterCounts', app.getTabFilteringDescriptionHTML(inUnfilteredTabCount, inFilteredTabCount)));
                    }
                }
            }
        };
        this.requestUpdateNumberOfPreviousSessionsToShow = function(inNumberOfPreviousSessionsToShow) {
            if (_util2.default.isNumeric(inNumberOfPreviousSessionsToShow)) {
                if (inNumberOfPreviousSessionsToShow < 0) {
                    inNumberOfPreviousSessionsToShow = 0;
                }
                this.numberOfPreviousSessionsToShow = inNumberOfPreviousSessionsToShow;
                this.refreshShownHiddenSessionSummaries_Previous();
            }
        };
        this.requestSetSessionSummaryCaretByIdAndType = function(inId, inType) {
            this.requestSetSessionSummaryCaret(this.getSessionSummaryElementByIdAndType(inId, inType));
        };
        this.requestSetSessionSummaryCaret = function(el) {
            if (el) {
                if (el !== this.sessionSummaryCaretElement) {
                    this.styleSessionSummaryElement(this.sessionSummaryCaretElement, undefined, undefined, false);
                    this.styleSessionSummaryElement(el, undefined, undefined, true);
                    this.sessionSummaryCaretElement = el;
                }
            }
        };
        this.requestSetSessionSummaryCaret_SelectionHead = function() {
            if (this.selectedSessionSummaryElement_Head) {
                if (this.selectedSessionSummaryElement_Head !== this.sessionSummaryCaretElement) {
                    this.styleSessionSummaryElement(this.sessionSummaryCaretElement, undefined, undefined, false);
                    this.styleSessionSummaryElement(this.selectedSessionSummaryElement_Head, undefined, undefined, true);
                    this.sessionSummaryCaretElement = this.selectedSessionSummaryElement_Head;
                }
            }
        };
        this.requestClearSessionSummaryCaret = function() {
            if (this.sessionSummaryCaretElement) {
                this.styleSessionSummaryElement(this.sessionSummaryCaretElement, undefined, undefined, false);
                this.sessionSummaryCaretElement = null;
            }
        };
        this.requestSetSessionSummaryCaret_Forwards = function() {
            if (this.sessionSummaryCaretElement) {
                this.requestSetSessionSummaryCaret(this.findSessionSummaryElement(this.sessionSummaryCaretElement, false, undefined, undefined, false));
                this.sessionSummaryCaretElement.scrollIntoViewIfNeeded(false);
            }
        };
        this.requestSetSessionSummaryCaret_Backwards = function() {
            if (this.sessionSummaryCaretElement) {
                this.requestSetSessionSummaryCaret(this.findSessionSummaryElement(this.sessionSummaryCaretElement, true, undefined, undefined, false));
                this.sessionSummaryCaretElement.scrollIntoViewIfNeeded(false);
            }
        };
        this.requestEnableKeyboardShortcuts = function() {
            this.isKeyboardShortcutsEnabled = true;
        };
        this.requestDisableKeyboardShortcuts = function() {
            this.isKeyboardShortcutsEnabled = false;
        };
        this.getSelectedSessionInfo_Head = function() {
            return this.createSessionInfoFromSessionSummaryElement(this.selectedSessionSummaryElement_Head);
        };
        this.getSelectedSessionInfos_All = function() {
            var returnArray = [];
            if (this.selectedSessionSummaryElements_All) {
                for (var i = 0; i < this.selectedSessionSummaryElements_All.length; i++) {
                    returnArray.push(this.createSessionInfoFromSessionSummaryElement(this.selectedSessionSummaryElements_All[i]));
                }
            }
            return returnArray;
        };
        this.renderMessage = function(inMessage) {
            var newRoot = this.createSessionSummaryRootElement();
            newRoot.appendChild(this.createSessionSummaryGroupHeaderElement('', 'misc_sessions'));
            newRoot.appendChild(_domUtil2.default.createElement('div', undefined, 'padding:3px 0px 1px 8px;color:#888;', inMessage || _browser2.default.getI18nMessage('misc_loading')));
            if (this.rootElement) {
                this.containerElement.replaceChild(newRoot, this.rootElement);
            } else {
                this.containerElement.appendChild(newRoot);
            }
            this.rootElement = newRoot;
            this.selectedSessionSummaryElement_Head = null;
            this.selectedSessionSummaryElements_All = null;
        };
        this.render = function(inSessionSummaries_Current, inSessionSummaries_Previous, inSessionSummaries_Saved, inTotalSessionSummaryCount_Current, inTotalSessionSummaryCount_Previous, inTotalSessionSummaryCount_Saved, inSelectedSessionInfo_Head, inSelectedSessionInfos_All, inNumberOfPreviousSessionsToShow, inIsKeyboardShortcutsEnabled, inIsShowSessionCountsInNavigationPane, cb, prevCount, savedCount, searchTerms) {
            var initialSelectedSessionInfo_Head = this.getSelectedSessionInfo_Head(), initialSelectedSessionInfos_All = this.getSelectedSessionInfos_All();
            if (_util2.default.isNumeric(inNumberOfPreviousSessionsToShow)) {
                if (inNumberOfPreviousSessionsToShow < 0) {
                    inNumberOfPreviousSessionsToShow = 0;
                }
                this.numberOfPreviousSessionsToShow = inNumberOfPreviousSessionsToShow;
            }
            if (typeof inIsKeyboardShortcutsEnabled === 'boolean') {
                this.isKeyboardShortcutsEnabled = inIsKeyboardShortcutsEnabled;
            }
            if (typeof inIsShowSessionCountsInNavigationPane === 'boolean') {
                this.isShowSessionCountsInNavigationPane = inIsShowSessionCountsInNavigationPane;
            }
            this.renderedSessionSummaryCount_Current = 0;
            this.renderedSessionSummaryCount_Previous = 0;
            this.renderedSessionSummaryCount_Saved = 0;
            this.totalSessionSummaryCount_Current = inTotalSessionSummaryCount_Current || inSessionSummaries_Current && inSessionSummaries_Current.length || 0;
            this.totalSessionSummaryCount_Previous = inTotalSessionSummaryCount_Previous || inSessionSummaries_Previous && inSessionSummaries_Previous.length || 0;
            this.totalSessionSummaryCount_Saved = inTotalSessionSummaryCount_Saved || inSessionSummaries_Saved && inSessionSummaries_Saved.length || 0;
            var thisElement = null;
            var thisSelectionMode = null;
            var thisIndex = -1;
            var thisSelectedSessionSummaryElement_Head = null;
            var hiddenHeadElement = null;
            var newRoot = this.createSessionSummaryRootElement();
            if (!inSelectedSessionInfo_Head) {
                inSelectedSessionInfo_Head = this.getSelectedSessionInfo_Head();
            }
            if (inSelectedSessionInfos_All) {
                for (var i = inSelectedSessionInfos_All.length - 1; i >= 0; i--) {
                    inSelectedSessionInfos_All[i].element = null;
                }
            } else {
                inSelectedSessionInfos_All = this.getSelectedSessionInfos_All();
            }
            if (inSelectedSessionInfos_All && inSelectedSessionInfos_All.length > 0 && inSelectedSessionInfo_Head && app.getIndexOfSessionInfo(inSelectedSessionInfo_Head, inSelectedSessionInfos_All) == -1) {
                inSelectedSessionInfos_All.push(app.createSessionInfo(inSelectedSessionInfo_Head.type, inSelectedSessionInfo_Head.id));
            }
            if (inSessionSummaries_Current) {
                newRoot.appendChild(this.createSessionSummaryGroupHeaderElement('sessionSummaryHeader_Current', 'linkset_type_currentSession', 'currentSessionsAnnotation', inIsShowSessionCountsInNavigationPane ? null : 'element_Hidden'));
                for (var i = 0; i < this.totalSessionSummaryCount_Current; i++) {
                    thisSelectionMode = this.getSessionSummaryInfoSelectionMode(inSessionSummaries_Current[i].id, 'current', inSelectedSessionInfo_Head, inSelectedSessionInfos_All);
                    thisElement = this.createSessionTile(-13, 'current', undefined, null, new Date().toJSON(), inSessionSummaries_Current[i].unfilteredWindowCount, inSessionSummaries_Current[i].filteredWindowCount, inSessionSummaries_Current[i].unfilteredTabCount, inSessionSummaries_Current[i].filteredTabCount, thisSelectionMode, false, false);
                    if (thisSelectionMode !== 'none') {
                        if (!thisSelectedSessionSummaryElement_Head && thisSelectionMode === 'head') {
                            thisSelectedSessionSummaryElement_Head = thisElement;
                        }
                        thisIndex = app.getIndexOfSessionInfoByIdAndType(inSessionSummaries_Current[i].id, 'current', inSelectedSessionInfos_All);
                        if (thisIndex > -1) {
                            inSelectedSessionInfos_All[thisIndex].element = thisElement;
                        }
                    }
                    newRoot.appendChild(thisElement);
                    this.renderedSessionSummaryCount_Current++;
                }
                if (this.renderedSessionSummaryCount_Current === 0) {
                    newRoot.appendChild(this.createSessionSummaryNonePlaceholderElement());
                }
                newRoot.appendChild(this.createSessionSummaryGroupFooterElement('SessionSummaryGroupFooter_Current', 0));
            }
            if (inSessionSummaries_Previous) {
                newRoot.appendChild(this.createSessionSummaryGroupHeaderElement('sessionSummaryHeader_Previous', 'linkset_type_previousSessions', 'previousSessionsAnnotation', inIsShowSessionCountsInNavigationPane ? null : 'element_Hidden'));
                var isHideSessionSummaryElement = false;
                for (var i = 0; i < this.totalSessionSummaryCount_Previous; i++) {
                    isHideSessionSummaryElement = !this.isShowHiddenPreviousSessions && i >= this.numberOfPreviousSessionsToShow;
                    if (isHideSessionSummaryElement) {
                        thisSelectionMode = 'none';
                    } else {
                        thisSelectionMode = this.getSessionSummaryInfoSelectionMode(inSessionSummaries_Previous[i].id, 'previous', inSelectedSessionInfo_Head, inSelectedSessionInfos_All);
                    }
                    thisElement = this.createSessionTile(inSessionSummaries_Previous[i].id, 'previous', undefined, inSessionSummaries_Previous[i].creationDateTime, inSessionSummaries_Previous[i].recordingDateTime, inSessionSummaries_Previous[i].unfilteredWindowCount, inSessionSummaries_Previous[i].filteredWindowCount, inSessionSummaries_Previous[i].unfilteredTabCount, inSessionSummaries_Previous[i].filteredTabCount, thisSelectionMode, isHideSessionSummaryElement, true);
                    if (isHideSessionSummaryElement && !thisSelectedSessionSummaryElement_Head && this.getSessionSummaryInfoSelectionMode(inSessionSummaries_Previous[i].id, 'previous', inSelectedSessionInfo_Head, inSelectedSessionInfos_All) === 'head') {
                        hiddenHeadElement = thisElement;
                    }
                    if (thisSelectionMode !== 'none') {
                        if (!thisSelectedSessionSummaryElement_Head && thisSelectionMode === 'head') {
                            thisSelectedSessionSummaryElement_Head = thisElement;
                        }
                        thisIndex = app.getIndexOfSessionInfoByIdAndType(inSessionSummaries_Previous[i].id, 'previous', inSelectedSessionInfos_All);
                        if (thisIndex > -1) {
                            inSelectedSessionInfos_All[thisIndex].element = thisElement;
                        }
                    }
                    newRoot.appendChild(thisElement);
                    this.renderedSessionSummaryCount_Previous++;
                }
                if (this.renderedSessionSummaryCount_Previous === 0) {
                    newRoot.appendChild(this.createSessionSummaryNonePlaceholderElement());
                }
                newRoot.appendChild(this.createSessionSummaryGroupFooterElement('SessionSummaryGroupFooter_Previous', this.renderedSessionSummaryCount_Previous - this.numberOfPreviousSessionsToShow, this.isShowHiddenPreviousSessions));
                this.setSessionSummaryGroupHeaderAnnotationElementContent(q('previousSessionsAnnotation', newRoot), this.renderedSessionSummaryCount_Previous, this.totalSessionSummaryCount_Previous, prevCount);
            }
            if (inSessionSummaries_Saved) {
                newRoot.appendChild(this.createSessionSummaryGroupHeaderElement('sessionSummaryHeader_Saved', 'linkset_type_savedLinksets', 'savedSessionsAnnotation', inIsShowSessionCountsInNavigationPane ? null : 'element_Hidden'));
                for (var i = 0; i < this.totalSessionSummaryCount_Saved; i++) {
                    thisSelectionMode = this.getSessionSummaryInfoSelectionMode(inSessionSummaries_Saved[i].id, 'saved', inSelectedSessionInfo_Head, inSelectedSessionInfos_All);
                    var searchTermRegEx = searchTerms ? new RegExp(_util2.default.regExEscape(searchTerms), 'gi') : null;
                    thisElement = this.createSessionTile(inSessionSummaries_Saved[i].id, 'saved', inSessionSummaries_Saved[i].name, inSessionSummaries_Saved[i].creationDateTime, inSessionSummaries_Saved[i].modificationDateTime, inSessionSummaries_Saved[i].unfilteredWindowCount, inSessionSummaries_Saved[i].filteredWindowCount, inSessionSummaries_Saved[i].unfilteredTabCount, inSessionSummaries_Saved[i].filteredTabCount, thisSelectionMode, false, true, searchTermRegEx);
                    if (thisSelectionMode !== 'none') {
                        if (!thisSelectedSessionSummaryElement_Head && thisSelectionMode === 'head') {
                            thisSelectedSessionSummaryElement_Head = thisElement;
                        }
                        thisIndex = app.getIndexOfSessionInfoByIdAndType(inSessionSummaries_Saved[i].id, 'saved', inSelectedSessionInfos_All);
                        if (thisIndex > -1) {
                            inSelectedSessionInfos_All[thisIndex].element = thisElement;
                        }
                    }
                    newRoot.appendChild(thisElement);
                    this.renderedSessionSummaryCount_Saved++;
                }
                if (this.renderedSessionSummaryCount_Saved === 0) {
                    newRoot.appendChild(this.createSessionSummaryNonePlaceholderElement());
                }
                newRoot.appendChild(this.createSessionSummaryGroupFooterElement('SessionSummaryGroupFooter_Saved', 0));
                this.setSessionSummaryGroupHeaderAnnotationElementContent(q('savedSessionsAnnotation', newRoot), this.renderedSessionSummaryCount_Saved, this.totalSessionSummaryCount_Saved, savedCount);
            }
            this.selectedSessionSummaryElements_All = [];
            for (var i = 0; i < inSelectedSessionInfos_All.length; i++) {
                if (inSelectedSessionInfos_All[i].element) {
                    sp.selectedSessionSummaryElements_All.push(inSelectedSessionInfos_All[i].element);
                }
            }
            var thisResetFocus = document.activeElement === sp.rootElement;
            if (sp.rootElement) {
                (0, _jquery2.default)('.sessionsPanel_SessionSummaryDeleteGlyph').qtip('destroy', true);
                sp.containerElement.replaceChild(newRoot, sp.rootElement);
            } else {
                sp.containerElement.appendChild(newRoot);
            }
            sp.rootElement = newRoot;
            if (thisResetFocus) {
                sp.rootElement.focus();
            }
            var finish = function finish(el) {
                sp.styleSessionSummaryElement(sp.selectedSessionSummaryElement_Head = el, 'head');
                cb && cb();
                if (sp.selectionChangedCallback) {
                    var isTriggerSelectionChangedCallback = !app.compareSessionInfos(initialSelectedSessionInfo_Head, sp.getSelectedSessionInfo_Head());
                    var thisAllSelectedSessionInfos_All = sp.getSelectedSessionInfos_All();
                    if (!isTriggerSelectionChangedCallback) {
                        if (thisAllSelectedSessionInfos_All.length === initialSelectedSessionInfos_All.length) {
                            for (var i = 0; i < thisAllSelectedSessionInfos_All.length; i++) {
                                if (!app.compareSessionInfos(initialSelectedSessionInfos_All[i], thisAllSelectedSessionInfos_All[i])) {
                                    isTriggerSelectionChangedCallback = true;
                                    break;
                                }
                            }
                        } else {
                            isTriggerSelectionChangedCallback = true;
                        }
                    }
                    if (isTriggerSelectionChangedCallback) {
                        sp.selectionChangedCallback(true, sp.getSelectedSessionInfo_Head(), thisAllSelectedSessionInfos_All, false);
                        sp.setNavState('replace');
                    }
                }
            };
            if (thisSelectedSessionSummaryElement_Head) {
                finish(thisSelectedSessionSummaryElement_Head);
            } else if (sp.selectedSessionSummaryElements_All.length) {
                finish(sp.selectedSessionSummaryElements_All[sp.selectedSessionSummaryElements_All.length - 1]);
            } else if (hiddenHeadElement) {
                finish(sp.findNextQualifyingSessionSummaryElement(hiddenHeadElement, undefined, undefined, false, null, true));
            } else {
                sp.getSessionTileFromUrl(function(st) {
                    if (st) {
                        finish(st);
                    } else if (newRoot.firstElementChild) {
                        if (isSessionTile(newRoot.firstElementChild) && !isHiddenSessionTile(newRoot.firstElementChild)) {
                            finish(newRoot.firstElementChild);
                        } else {
                            finish(sp.findSessionSummaryElement(newRoot.firstElementChild, false, undefined, undefined, false));
                        }
                    } else {
                        finish(null);
                    }
                });
            }
        };
        this.getSessionTileFromUrl = function(cb) {
            var arr = /#(?:(?:lx|c)\/)?([^/]+)/.exec(location.hash);
            if (arr) {
                db.getSessionSummaryByGid(arr[1], function(s) {
                    if (s) {
                        cb(sp.getSessionSummaryElementByIdAndType(s.id, s.type), s.id, s.type);
                    } else {
                        cb();
                    }
                });
            } else {
                cb();
            }
        };
        this.refreshShownHiddenSessionSummaries_Previous = function() {
            var sessionSummaryCount = 0;
            var el = getGroupHeaderElement_Previous();
            if (el) {
                el = el.nextElementSibling;
                while (sessionSummaryCount < this.numberOfPreviousSessionsToShow || this.isShowHiddenPreviousSessions) {
                    if (!isSessionTile(el)) break;
                    this.styleSessionSummaryElement(el, undefined, false);
                    sessionSummaryCount += 1;
                    el = el.nextElementSibling;
                }
                if (sessionSummaryCount == this.numberOfPreviousSessionsToShow) {
                    var indexOfHidingElementInSelectedSessionSummaryElements_All = -1;
                    var isHeadGotHidden = false;
                    var isTriggerSelectionChangedCallback = false;
                    while (el) {
                        if (!isSessionTile(el)) break;
                        indexOfHidingElementInSelectedSessionSummaryElements_All = this.selectedSessionSummaryElements_All.indexOf(el);
                        if (indexOfHidingElementInSelectedSessionSummaryElements_All >= 0) {
                            this.selectedSessionSummaryElements_All.splice(indexOfHidingElementInSelectedSessionSummaryElements_All, 1);
                            isTriggerSelectionChangedCallback = true;
                        }
                        if (el == this.selectedSessionSummaryElement_Head) {
                            isHeadGotHidden = true;
                            isTriggerSelectionChangedCallback = true;
                        }
                        if (indexOfHidingElementInSelectedSessionSummaryElements_All >= 0 && el !== this.selectedSessionSummaryElement_Head) {
                            this.styleSessionSummaryElement(el, 'none', true);
                        } else {
                            this.styleSessionSummaryElement(el, undefined, true);
                        }
                        el = el.nextElementSibling;
                    }
                    if (isHeadGotHidden) {
                        this.styleSessionSummaryElement(this.selectedSessionSummaryElement_Head, 'none');
                        if (this.selectedSessionSummaryElements_All.length > 0) {
                            this.selectedSessionSummaryElement_Head = this.selectedSessionSummaryElements_All[this.selectedSessionSummaryElements_All.length - 1];
                        } else {
                            this.selectedSessionSummaryElement_Head = this.findNextQualifyingSessionSummaryElement(this.selectedSessionSummaryElement_Head, undefined, undefined, false, null, true);
                        }
                        this.styleSessionSummaryElement(this.selectedSessionSummaryElement_Head, 'head');
                    }
                    if (isTriggerSelectionChangedCallback && this.selectionChangedCallback) {
                        this.selectionChangedCallback(true, this.getSelectedSessionInfo_Head(), this.getSelectedSessionInfos_All(), false);
                        sp.concludeSelect();
                    }
                }
            }
            this.refreshControlState_SessionSummaryGroupFooter_Previous();
        };
        this.refreshControlState_SessionSummaryGroupFooter_Previous = function() {
            this.setSessionSummaryGroupFooterElementState(getGroupFooterElement_Previous(), this.renderedSessionSummaryCount_Previous - this.numberOfPreviousSessionsToShow, this.isShowHiddenPreviousSessions, this.numberOfPreviousSessionsToShow < 1);
        };
        this.createSessionSummaryRootElement = function() {
            var returnElement = _domUtil2.default.createElement('div', 'sessionsPanel', 'sessionsPanel_Root');
            var that = this;
            returnElement.setAttribute('tabIndex', 0);
            returnElement.addEventListener('focus', function() {
                that.adjustSessionsPanelFocusStyle.call(that);
            });
            returnElement.addEventListener('blur', function() {
                that.adjustSessionsPanelFocusStyle.call(that);
                that.requestClearSessionSummaryCaret();
            });
            returnElement.onselectstart = function() {
                return false;
            };
            if (this.allowUserInteraction) {
                returnElement.addEventListener('keyup', function() {
                    if (event.keyCode == 16) {
                        if (!event.shiftKey) {
                            that.requestClearSessionSummaryCaret();
                            that.rangeSelectAnchorSessionSummary = null;
                        }
                    } else if (_keyUtil2.default.isCtrlKey(event) && that.sessionSummaryCaretElement && !event.shiftKey) {
                        if (!_keyUtil2.default.hasCtrlKeyModifier(event)) {
                            that.requestClearSessionSummaryCaret();
                        }
                    }
                });
                returnElement.addEventListener('keydown', function() {
                    if (!event.shiftKey) {
                        that.rangeSelectAnchorSessionSummary = null;
                    }
                    if (_keyUtil2.default.isDeleteKey(event.keyCode)) {
                        app.lockAction();
                        that.requestRemoveSelectedSessionSummaries(false, function(inIsRequestHonored, inRemovedSessionInfos, inPriorSelectedHeadInfo, inPriorSelectedTailInfos) {
                            if (that.sessionsRemovedCallback) {
                                that.sessionsRemovedCallback(inIsRequestHonored, inRemovedSessionInfos, inPriorSelectedHeadInfo, inPriorSelectedTailInfos);
                            }
                            app.unlockAction();
                        });
                        event.preventDefault();
                        event.stopPropagation();
                    } else if (event.keyCode == 16) {
                        if (!that.sessionSummaryCaretElement) {
                            that.requestSetSessionSummaryCaret(that.selectedSessionSummaryElement_Head);
                        }
                        if (!that.rangeSelectAnchorSessionSummary) {
                            that.rangeSelectAnchorSessionSummary = that.selectedSessionSummaryElement_Head;
                        }
                    } else if (_keyUtil2.default.isCtrlKey(event, true) && !event.shiftKey) {
                        if (!that.sessionSummaryCaretElement) {
                            that.requestSetSessionSummaryCaret(that.selectedSessionSummaryElement_Head);
                        }
                    } else if (event.keyCode == 40 || that.isKeyboardShortcutsEnabled && event.keyCode == 68 && (event.shiftKey || _keyUtil2.default.hasCtrlKeyModifier(event) || !_keyUtil2.default.hasAnyKeyModifier(event))) {
                        if (_keyUtil2.default.hasCtrlKeyModifier(event) && !event.shiftKey) {
                            that.requestSetSessionSummaryCaret_Forwards();
                        } else {
                            that.requestSelectSessionSummary_Forwards(event.shiftKey);
                            if (event.shiftKey) {
                                that.requestSetSessionSummaryCaret_SelectionHead();
                            }
                        }
                        event.preventDefault();
                        event.stopPropagation();
                    } else if (event.keyCode === 38 || that.isKeyboardShortcutsEnabled && event.keyCode === 69 && (event.shiftKey || _keyUtil2.default.hasCtrlKeyModifier(event) || !_keyUtil2.default.hasAnyKeyModifier(event))) {
                        if (!event.shiftKey) {
                            that.rangeSelectAnchorSessionSummary = null;
                        }
                        if (_keyUtil2.default.hasCtrlKeyModifier(event) && !event.shiftKey) {
                            that.requestSetSessionSummaryCaret_Backwards();
                        } else {
                            that.requestSelectSessionSummary_Backwards(event.shiftKey);
                            if (event.shiftKey) {
                                that.requestSetSessionSummaryCaret_SelectionHead();
                            }
                        }
                        event.preventDefault();
                        event.stopPropagation();
                    } else if (event.keyCode === 32) {
                        if (that.sessionSummaryCaretElement) {
                            that.requestSelectSessionSummary_Caret(that.getSessionSummarySelectionTypeByKeyModifiers(_keyUtil2.default.hasCtrlKeyModifier(event), event.shiftKey));
                        }
                        event.preventDefault();
                        event.stopPropagation();
                    } else if (event.keyCode === 27) {
                        event.preventDefault();
                    } else if (event.keyCode === 36 && _domUtil2.default.os != 'MacOS') {
                        if (event.shiftKey) {
                            if (!that.rangeSelectAnchorSessionSummary) {
                                that.rangeSelectAnchorSessionSummary = that.selectedSessionSummaryElement_Head;
                            }
                            that.requestSelectSessionSummary_FirstInList(undefined, undefined, 'range');
                        } else if (_keyUtil2.default.hasCtrlKeyModifier(event)) {
                            that.rangeSelectAnchorSessionSummary = null;
                            that.requestSelectSessionSummary_FirstInList(undefined, undefined, 'cumulative');
                            that.requestSetSessionSummaryCaret_SelectionHead();
                        } else {
                            that.requestSelectSessionSummary_FirstInList();
                            that.rangeSelectAnchorSessionSummary = null;
                        }
                        q('sessionsPanelContainer').scrollTop = 0;
                        event.stopPropagation();
                    } else if (event.keyCode === 35 && _domUtil2.default.os != 'MacOS') {
                        if (event.shiftKey) {
                            if (!that.rangeSelectAnchorSessionSummary) {
                                that.rangeSelectAnchorSessionSummary = that.selectedSessionSummaryElement_Head;
                            }
                            that.requestSelectSessionSummary_LastInList(undefined, undefined, 'range');
                        } else if (_keyUtil2.default.hasCtrlKeyModifier(event)) {
                            that.rangeSelectAnchorSessionSummary = null;
                            that.requestSelectSessionSummary_LastInList(undefined, undefined, 'cumulative');
                            that.requestSetSessionSummaryCaret_SelectionHead();
                        } else {
                            that.requestSelectSessionSummary_LastInList();
                            that.rangeSelectAnchorSessionSummary = null;
                        }
                        event.stopPropagation();
                    }
                });
            }
            return returnElement;
        };
        this.createSessionSummaryGroupHeaderElement = function(id, inI18nId, inAnnotationId, inAnnotationClass) {
            var el = _domUtil2.default.createElement('div', id, 'sessionsPanel_GroupHeader');
            el.dataset.i = inI18nId;
            el.appendChild(_domUtil2.default.createElement('span', null, null, _browser2.default.getI18nMessage(inI18nId) + ''));
            if (inAnnotationId) {
                el.appendChild(_domUtil2.default.createElement('span', inAnnotationId, inAnnotationClass ? inAnnotationClass : 'sessionsPanel_GroupHeader_Annotation'));
            }
            return el;
        };
        this.createSessionSummaryNonePlaceholderElement = function() {
            var el = _domUtil2.default.createElement('div', 'sessionSummary_Placeholder', 'padding-left:7px;color:hsl(0,0%,58%);padding-top:2px;');
            el.textContent = '(none)';
            return el;
        };
        this.createSessionTile = function(inSessionId, inSessionType, name, creationUTCDateString, modificationUTCDateString, inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount, inSelectionMode, inIsHidden, allowDelete, searchTermRegEx) {
            var createdDateMS = _dateUtil2.default.utcDateStringToMS(creationUTCDateString), createdDate = createdDateMS && new Date(createdDateMS), updatedDateMS = _dateUtil2.default.utcDateStringToMS(modificationUTCDateString), updatedDate = updatedDateMS && new Date(updatedDateMS);
            var el = document.createElement('div');
            el.id = inSessionType === 'current' ? 'sessionSummary_current' : 'sessionSummary_' + inSessionType + '_' + inSessionId;
            if (createdDateMS || updatedDateMS) {
                el.dataset.d = updatedDateMS || createdDateMS;
                if (!createdDateMS || updatedDateMS && createdDateMS < updatedDateMS) {
                    el.dataset.u = true;
                }
            }
            var el2 = void 0;
            var labelEl = el.appendChild(document.createElement('div'));
            labelEl.className = 'sessionsPanel_SessionSummaryLabel';
            if (allowDelete) {
                el2 = document.createElement('div');
                el2.className = 'sessionsPanel_SessionSummaryDeleteGlyph';
                el.appendChild(el2).setAttribute('draggable', 'false');
            }
            var detailEl = el.appendChild(document.createElement('div'));
            detailEl.className = 'sessionsPanel_SessionSummaryAnnotation';
            if (inSessionType === 'saved') {
                updateSessionElWithName(labelEl, name, searchTermRegEx);
                el2 = document.createElement('div');
                el2.className = 'sessionsPanel_SessionSummaryAnnotation_Date';
                app.updateSessionElWithDate(detailEl.appendChild(el2), updatedDate, inSessionType, !createdDate || +createdDate < +updatedDate);
            } else {
                app.updateSessionElWithDate(labelEl, updatedDate, inSessionType);
            }
            el2 = document.createElement('div');
            el2.className = 'sessionsPanel_SessionSummaryAnnotation_FilterCounts';
            el2.innerHTML = app.getTabFilteringDescriptionHTML(inUnfilteredTabCount, inFilteredTabCount);
            detailEl.appendChild(el2);
            if (app.isDebug) {
                el.appendChild(_domUtil2.default.createElement('span', undefined, 'debugValue debugValue_Right', inSessionId));
            }
            this.styleSessionSummaryElement(el, inSelectionMode, inIsHidden);
            return el;
        };
        this.createSessionSummaryGroupFooterElement = function(id, count, inIsLabel_Less) {
            var _this = this;
            var el = _domUtil2.default.createElement('div', id);
            el.style.minWidth = '20px';
            el.style.minHeight = '12px';
            this.setSessionSummaryGroupFooterElementState(el, count, inIsLabel_Less, this.numberOfPreviousSessionsToShow < 1);
            el.addEventListener('click', function() {
                return _this.requestToggleShowHideHiddenSessions_Previous();
            });
            return el;
        };
        this.styleSessionSummaryElement = function(el, inSelectionMode, inIsHidden, inIsCaret) {
            if (el) {
                el.classList.add('sessionsPanel_SessionSummary');
                if (inIsHidden === true) {
                    el.classList.add('sessionsPanel_SessionSummary_Hidden');
                } else if (inIsHidden === false) {
                    el.classList.remove('sessionsPanel_SessionSummary_Hidden');
                }
                if (inIsCaret === true) {
                    el.classList.add('sessionsPanel_SessionSummary_Caret');
                } else if (inIsCaret === false) {
                    el.classList.remove('sessionsPanel_SessionSummary_Caret');
                }
                if (_util2.default.isString(inSelectionMode)) {
                    var thisAnnotation = el.getElementsByClassName('sessionsPanel_SessionSummaryAnnotation');
                    var thisLabel = el.getElementsByClassName('sessionsPanel_SessionSummaryLabel');
                    if (inSelectionMode === 'head') {
                        el.classList.add('sessionsPanel_SessionSummary_SelectionHead');
                        el.classList.remove('sessionsPanel_SessionSummary_SelectionTail');
                        if (document.activeElement === this.rootElement) {
                            el.classList.remove('sessionsPanel_SessionSummary_Blurred');
                            if (thisAnnotation.length > 0) {
                                (0, _jquery2.default)(thisAnnotation[0]).css('color', '#fff').css('opacity', '0.7');
                            }
                        } else {
                            el.classList.add('sessionsPanel_SessionSummary_Blurred');
                            if (thisAnnotation.length > 0) {
                                (0, _jquery2.default)(thisAnnotation[0]).css('color', 'hsl(0, 0%, 81%)').css('opacity', '');
                            }
                        }
                        thisLabel[0].style.setProperty('color', '');
                    } else if (inSelectionMode === 'tail') {
                        el.classList.add('sessionsPanel_SessionSummary_SelectionTail');
                        el.classList.remove('sessionsPanel_SessionSummary_SelectionHead');
                        if (document.activeElement === this.rootElement) {
                            el.classList.remove('sessionsPanel_SessionSummary_Blurred');
                            if (thisAnnotation.length > 0) {
                                (0, _jquery2.default)(thisAnnotation[0]).css('color', '#fff').css('opacity', '0.7');
                            }
                        } else {
                            el.classList.add('sessionsPanel_SessionSummary_Blurred');
                            if (thisAnnotation.length > 0) {
                                (0, _jquery2.default)(thisAnnotation[0]).css('color', 'hsl(0, 0%, 81%)').css('opacity', '');
                            }
                        }
                        thisLabel[0].style.setProperty('color', '');
                    } else {
                        el.classList.remove('sessionsPanel_SessionSummary_SelectionTail');
                        el.classList.remove('sessionsPanel_SessionSummary_SelectionHead');
                        el.classList.remove('sessionsPanel_SessionSummary_Blurred');
                        if (thisAnnotation.length > 0) {
                            (0, _jquery2.default)(thisAnnotation[0]).css('color', '').css('opacity', '');
                        }
                    }
                }
            }
        };
        this.setSessionSummaryGroupHeaderAnnotationElementContent = function(el, inRenderedSessionSummaryCount, inTotalSessionSummaryCount, count) {
            if (el) {
                if (_util2.default.isNumeric(inRenderedSessionSummaryCount)) {
                    if (inRenderedSessionSummaryCount < 0) {
                        inRenderedSessionSummaryCount = 0;
                    }
                    if (count) {
                        el.textContent = '(' + count + ')';
                    } else if (_util2.default.isNumeric(inTotalSessionSummaryCount) && inRenderedSessionSummaryCount < inTotalSessionSummaryCount) {
                        el.textContent = '(' + inRenderedSessionSummaryCount + ' of ' + inTotalSessionSummaryCount + ')';
                    } else if (inRenderedSessionSummaryCount > 0) {
                        el.textContent = '(' + inRenderedSessionSummaryCount + ')';
                    } else {
                        el.textContent = '';
                    }
                } else {
                    el.textContent = '';
                }
            }
        };
        this.setSessionSummaryGroupFooterElementState = function(el, inCount, inIsLabel_Less, inIsNoText) {
            if (el) {
                if (inCount > 0) {
                    if (inIsLabel_Less) {
                        el.className = 'sessionsPanel_GroupFooter sessionsPanel_GroupFooter_Less';
                        el.innerHTML = inIsNoText ? '' : 'Hide ' + inCount + (inCount === 1 ? ' session' : ' sessions');
                    } else {
                        el.className = 'sessionsPanel_GroupFooter sessionsPanel_GroupFooter_More';
                        el.innerHTML = inIsNoText ? '' : inCount + ' more';
                    }
                } else {
                    el.className = 'sessionsPanel_GroupFooter sessionsPanel_GroupFooter_Hidden';
                }
            }
        };
        this.adjustSessionsPanelFocusStyle = function() {
            this.styleSessionSummaryElement(this.selectedSessionSummaryElement_Head, 'head');
            for (var i = this.selectedSessionSummaryElements_All.length - 1; i >= 0; i--) {
                if (this.selectedSessionSummaryElement_Head != this.selectedSessionSummaryElements_All[i]) {
                    this.styleSessionSummaryElement(this.selectedSessionSummaryElements_All[i], 'tail');
                }
            }
        };
        this.isSessionSummaryElement_SelectionMode_Head = function(el, inAssessViaStyle) {
            if (inAssessViaStyle) {
                return el.classList.contains('sessionsPanel_SessionSummary_SelectionHead');
            } else {
                return el === this.selectedSessionSummaryElement_Head;
            }
        };
        this.isSessionSummaryElement_SelectionMode_Tail = function(el, inAssessViaStyle) {
            if (inAssessViaStyle) {
                return el.classList.contains('sessionsPanel_SessionSummary_SelectionTail');
            } else {
                return el !== this.selectedSessionSummaryElement_Head && this.selectedSessionSummaryElements_All.indexOf(el) > -1;
            }
        };
        this.isSessionSummaryElement_SelectionMode_None = function(el, inAssessViaStyle) {
            return isSessionTile(el) && !this.isSessionSummaryElement_SelectionMode_Head(el, inAssessViaStyle) && !this.isSessionSummaryElement_SelectionMode_Tail(el, inAssessViaStyle);
        };
        this.getSessionSummaryElementSelectionMode = function(el, inAssessViaStyle) {
            if (this.isSessionSummaryElement_SelectionMode_None(el, inAssessViaStyle)) return 'none';
            if (this.isSessionSummaryElement_SelectionMode_Head(el, inAssessViaStyle)) return 'head';
            if (this.isSessionSummaryElement_SelectionMode_Tail(el, inAssessViaStyle)) return 'tail';
        };
        this.getSessionTileType = function(el) {
            if (isCurrentSessionTile(el)) return 'current';
            if (isPreviousSessionTile(el)) return 'previous';
            if (isSavedSessionTile(el)) return 'saved';
        };
        this.getSessionTileId = function(el) {
            if (isCurrentSessionTile(el)) return -13;
            if (isPreviousSessionTile(el)) return el.id.substring('sessionSummary_previous_'.length);
            if (isSavedSessionTile(el)) return el.id.substring('sessionSummary_saved_'.length);
        };
        this.getSessionSummaryElement_Current = function(parent) {
            return q('sessionSummary_current', parent || this.rootElement);
        };
        this.getSessionSummaryElementByIdAndType = function(id, type, parent) {
            parent = parent || this.rootElement;
            if (type === 'current') {
                return this.getSessionSummaryElement_Current(parent);
            } else if (id && type) {
                return q('sessionSummary_' + type + '_' + id, parent);
            }
            return null;
        };
        this.getSessionSummaryElementBySessionInfo = function(inSessionInfo, inParentHTMLElement) {
            return this.getSessionSummaryElementByIdAndType(inSessionInfo.id, inSessionInfo.type, inParentHTMLElement);
        };
        this.findSessionSummaryElement = function(inStartSessionSummaryElement, inIsSearchDirectionBackwards, inType, inSelectionMode, inIsHidden, inArrayOfQualifiedSessionSummaryElements) {
            if (!inStartSessionSummaryElement) {
                inStartSessionSummaryElement = this.selectedSessionSummaryElement_Head;
            }
            if (inStartSessionSummaryElement) {
                if (inIsSearchDirectionBackwards) {
                    inStartSessionSummaryElement = inStartSessionSummaryElement.previousElementSibling;
                } else {
                    inStartSessionSummaryElement = inStartSessionSummaryElement.nextElementSibling;
                }
                while (inStartSessionSummaryElement && (!isSessionTile(inStartSessionSummaryElement) || !(inArrayOfQualifiedSessionSummaryElements && _util2.default.contains(inArrayOfQualifiedSessionSummaryElements, inStartSessionSummaryElement)) && (_util2.default.isString(inType) && (inType !== 'current' || !isCurrentSessionTile(inStartSessionSummaryElement)) && (inType !== 'previous' || !isPreviousSessionTile(inStartSessionSummaryElement)) && (inType !== 'saved' || !isSavedSessionTile(inStartSessionSummaryElement)) && (inType.toLowerCase() !== 'previousorsaved' && inType.toLowerCase() !== 'savedorprevious' || !isPreviousSessionTile(inStartSessionSummaryElement) && !isSavedSessionTile(inStartSessionSummaryElement)) || _util2.default.isString(inSelectionMode) && (inSelectionMode !== 'head' || !this.isSessionSummaryElement_SelectionMode_Head(inStartSessionSummaryElement, true)) && (inSelectionMode !== 'tail' || !this.isSessionSummaryElement_SelectionMode_Tail(inStartSessionSummaryElement, true)) && (inSelectionMode !== 'none' || !this.isSessionSummaryElement_SelectionMode_None(inStartSessionSummaryElement, true)) && (inSelectionMode.toLowerCase() !== 'headortail' && inSelectionMode.toLowerCase() !== 'tailorhead' || !this.isSessionSummaryElement_SelectionMode_Head(inStartSessionSummaryElement, true) && !this.isSessionSummaryElement_SelectionMode_Tail(inStartSessionSummaryElement, true)) || !(inIsHidden == null || (isHiddenSessionTile(inStartSessionSummaryElement) ? inIsHidden : !inIsHidden))))) {
                    if (inIsSearchDirectionBackwards) {
                        inStartSessionSummaryElement = inStartSessionSummaryElement.previousElementSibling;
                    } else {
                        inStartSessionSummaryElement = inStartSessionSummaryElement.nextElementSibling;
                    }
                }
            }
            return inStartSessionSummaryElement;
        };
        this.findNextQualifyingSessionSummaryElement = function(inStartElement, inType, inSelectionMode, inIsHidden, inArrayofArraysOfDisqualifiedSessionSummaryElements, inIsStartDirectionBackwards, inArrayOfQualifiedSessionSummaryElements) {
            var isSessionSummaryElementDisqualified = function isSessionSummaryElementDisqualified(inElement) {
                if (inArrayOfQualifiedSessionSummaryElements && _util2.default.contains(inArrayOfQualifiedSessionSummaryElements, inElement)) {
                    return false;
                }
                if (inArrayofArraysOfDisqualifiedSessionSummaryElements) {
                    for (var i = inArrayofArraysOfDisqualifiedSessionSummaryElements.length - 1; i >= 0; i--) {
                        if (inArrayofArraysOfDisqualifiedSessionSummaryElements[i].indexOf(inElement) > -1) {
                            return true;
                        }
                    }
                }
                return false;
            };
            var thisElement = this.findSessionSummaryElement(inStartElement, inIsStartDirectionBackwards, inType, inSelectionMode, inIsHidden, inArrayOfQualifiedSessionSummaryElements);
            while (thisElement && isSessionSummaryElementDisqualified(thisElement)) {
                thisElement = this.findSessionSummaryElement(thisElement, inIsStartDirectionBackwards, inType, inSelectionMode, inIsHidden, inArrayOfQualifiedSessionSummaryElements);
            }
            if (!thisElement) {
                thisElement = this.findSessionSummaryElement(inStartElement, !inIsStartDirectionBackwards, inType, inSelectionMode, inIsHidden, inArrayOfQualifiedSessionSummaryElements);
                while (thisElement && isSessionSummaryElementDisqualified(thisElement)) {
                    thisElement = this.findSessionSummaryElement(thisElement, !inIsStartDirectionBackwards, inType, inSelectionMode, inIsHidden, inArrayOfQualifiedSessionSummaryElements);
                }
            }
            return thisElement;
        };
        this.createSessionInfoFromSessionSummaryElement = function(inSessionSummaryElement, inIncludeSeqProperty, inIncludeElementProperty) {
            if (inIncludeSeqProperty) {
                inIncludeSeqProperty = _util2.default.getIndexOfChildElement(inSessionSummaryElement);
            } else {
                inIncludeSeqProperty = undefined;
            }
            if (inIncludeElementProperty) {
                inIncludeElementProperty = inSessionSummaryElement;
            } else {
                inIncludeElementProperty = undefined;
            }
            if (inSessionSummaryElement && isSessionTile(inSessionSummaryElement)) {
                if (isCurrentSessionTile(inSessionSummaryElement)) {
                    return app.createSessionInfo_Current(inIncludeSeqProperty, inIncludeElementProperty);
                } else {
                    var sessionSummaryIdComponents = inSessionSummaryElement.id.split('_');
                    return app.createSessionInfo(sessionSummaryIdComponents[1], sessionSummaryIdComponents[2], inIncludeSeqProperty, inIncludeElementProperty);
                }
            }
            return null;
        };
        this.getSessionSummaryInfoSelectionMode = function(inSessionId, inSessionType, inSelectedSessionInfo_Head, inSelectedSessionInfos_All) {
            if (!inSelectedSessionInfo_Head) {
                inSelectedSessionInfo_Head = this.getSelectedSessionInfo_Head();
            }
            if (!inSelectedSessionInfos_All) {
                inSelectedSessionInfos_All = this.getSelectedSessionInfos_All();
            }
            if (inSelectedSessionInfo_Head && inSelectedSessionInfo_Head.id + '' == inSessionId + '' && inSelectedSessionInfo_Head.type == inSessionType) {
                return 'head';
            } else if (app.getIndexOfSessionInfoByIdAndType(inSessionId, inSessionType, inSelectedSessionInfos_All) > -1) {
                if (inSelectedSessionInfos_All.length > 1) {
                    return 'tail';
                } else {
                    return 'head';
                }
            } else {
                return 'none';
            }
        };
        this.getSessionSummarySelectionTypeByKeyModifiers = function(inIsCtrl, inIsShift) {
            return inIsShift ? 'range' : inIsCtrl ? 'cumulative' : 'single';
        };
        this.setHeadAndAllSelectedSessionSummaryElements = function(inSelectedSessionSummaryElements_Head, inSelectedSessionSummaryElements_All) {
            if (this.selectedSessionSummaryElement_Head != inSelectedSessionSummaryElements_Head || !_util2.default.compare(this.selectedSessionSummaryElements_All, inSelectedSessionSummaryElements_All)) {
                this.selectedSessionSummaryElement_Head = inSelectedSessionSummaryElements_Head;
                this.selectedSessionSummaryElements_All = inSelectedSessionSummaryElements_All.slice();
                if (this.selectionChangedCallback) {
                    this.selectionChangedCallback(true, this.getSelectedSessionInfo_Head(), this.getSelectedSessionInfos_All(), false);
                }
            }
        };
        this.isSelectionStateNew = function(inSelectionState) {
            if (inSelectionState && inSelectionState.data) {
                var s = history.state;
                if (!s) {
                    return true;
                }
                if (s.data) {
                    return !app.compareSessionInfos(s.data.head, inSelectionState.data.head) || !app.compareSessionInfoArrays(s.data.all, inSelectionState.data.all);
                }
            }
        };
        this.setThePageTitle = function(sessionInfo_Head, sessionInfos_All) {
            var title;
            if (sessionInfos_All && sessionInfos_All.length) {
                title = sessionInfos_All.length + ' Session' + (sessionInfos_All.length !== 1 ? 's' : '');
            } else if (sessionInfo_Head.type === 'current') {
                title = 'Current Session';
            } else if (sessionInfo_Head.type === 'previous') {
                title = 'Previous Session';
            } else if (sessionInfo_Head.type === 'saved') {
                if (sessionInfo_Head.name) {
                    title = sessionInfo_Head.name;
                } else {
                    title = 'Unnamed session';
                }
            }
            if (title) {
                document.title = title + ' - Session Buddy';
            }
        };
        this.augmentSelectionState = function(o, cb) {
            if (o.data.head.type === 'saved' && !o.data.all.length) {
                db.getSavedSessionSummary(o.data.head.id, function(inRow) {
                    if (inRow.name) {
                        o.data.head.name = inRow.name;
                    }
                    if (inRow.gid) {
                        o.data.head.gid = inRow.gid;
                    }
                    cb(o);
                });
            } else if (o.data.head.type === 'previous' && !o.data.all.length) {
                db.getPreviousSessionSummary(o.data.head.id, function(inRow) {
                    if (inRow.gid) {
                        o.data.head.gid = inRow.gid;
                    }
                    cb(o);
                });
            } else {
                cb(o);
            }
        };
        this.setNavState = function(how, type) {
            how = how || 'push';
            type = type || 'selection';
            if (how === 'none') {
                return;
            }
            if (type === 'selection') {
                var o = {
                    type: type,
                    data: {
                        head: sp.getSelectedSessionInfo_Head(),
                        all: sp.getSelectedSessionInfos_All()
                    }
                };
                sp.augmentSelectionState(o, function(o) {
                    if (sp.isSelectionStateNew(o) && how !== 'title') {
                        (how === 'replace' ? history.replaceState : history.pushState).call(history, o, '', 'main.html' + (o.data.head.gid ? '#' + o.data.head.gid : ''));
                    }
                    sp.setThePageTitle(o.data.head, o.data.all);
                });
            }
        };
        function updateSessionElWithName(el, name, searchTermRegEx) {
            if (!el) return;
            if (name = name && name.trim()) {
                var matches = void 0;
                if (searchTermRegEx && (matches = _util2.default.findMatches(name, searchTermRegEx))) {
                    el.innerHTML = _util2.default.wrapMatches(name, matches, 'sessionTitleHighlight');
                } else {
                    el.textContent = name;
                }
            } else {
                el.textContent = 'Unnamed session';
            }
        }
        function isCurrentSessionTile(el) {
            return el && el.id === 'sessionSummary_current';
        }
        function isPreviousSessionTile(el) {
            return el && el.id.startsWith('sessionSummary_previous_');
        }
        function isSavedSessionTile(el) {
            return el && el.id.startsWith('sessionSummary_saved_');
        }
        function getSessionTileCounts(el, participatingTiles) {
            if (!el) {
                return {
                    hiddenParticipatingCount: 0,
                    visibleParticipatingCount: 0,
                    hiddenNonParticipatingCount: 0,
                    visibleNonParticipatingCount: 0
                };
            }
            var visibleParticipatingCount = 0, hiddenParticipatingCount = 0, visibleNonParticipatingCount = 0, hiddenNonParticipatingCount = 0;
            el = el.nextElementSibling;
            while (el) {
                if (!isSessionTile(el)) break;
                if (_util2.default.contains(participatingTiles, el)) {
                    if (isHiddenSessionTile(el)) {
                        hiddenParticipatingCount++;
                    } else {
                        visibleParticipatingCount++;
                    }
                } else {
                    if (isHiddenSessionTile(el)) {
                        hiddenNonParticipatingCount++;
                    } else {
                        visibleNonParticipatingCount++;
                    }
                }
                el = el.nextElementSibling;
            }
            return {
                hiddenParticipatingCount: hiddenParticipatingCount,
                visibleParticipatingCount: visibleParticipatingCount,
                hiddenNonParticipatingCount: hiddenNonParticipatingCount,
                visibleNonParticipatingCount: visibleNonParticipatingCount
            };
        }
        function isSessionTilePlaceholder(el) {
            return el.id === 'sessionSummary_Placeholder';
        }
        function isSessionTile(el) {
            return el.classList.contains('sessionsPanel_SessionSummary');
        }
        function isHiddenSessionTile(el) {
            return el.classList.contains('sessionsPanel_SessionSummary_Hidden');
        }
        function isDeletableSessionTile(el) {
            return !!el.getElementsByClassName('sessionsPanel_SessionSummaryDeleteGlyph').length;
        }
        function isGroupFooter(el) {
            return el.classList.contains('sessionsPanel_GroupFooter');
        }
        function getGroupHeaderElement(type) {
            switch (type) {
              case 'current':
                return getGroupHeaderElement_Current();

              case 'previous':
                return getGroupHeaderElement_Previous();

              case 'saved':
                return getGroupHeaderElement_Saved();
            }
        }
        function getGroupHeaderElement_Current(parent) {
            return q('sessionSummaryHeader_Current', parent);
        }
        function getGroupHeaderElement_Previous(parent) {
            return q('sessionSummaryHeader_Previous', parent);
        }
        function getGroupHeaderElement_Saved(parent) {
            return q('sessionSummaryHeader_Saved', parent);
        }
        function getGroupFooterElement_Current() {
            return q('SessionSummaryGroupFooter_Current');
        }
        function getGroupFooterElement_Previous() {
            return q('SessionSummaryGroupFooter_Previous');
        }
        function getGroupFooterElement_Saved() {
            return q('SessionSummaryGroupFooter_Saved');
        }
    }
}, , function(module, exports, __webpack_require__) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
        value: true
    });
    var uu = {
        truncateURL: function truncateURL(url) {
            return url.split(/[#?]/)[0];
        },
        isURL: function isURL(txt) {
            return /^[a-z](?:[-a-z0-9\+\.])*:(?:\/\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\._~\uA0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF\u10000-\u1FFFD\u20000-\u2FFFD\u30000-\u3FFFD\u40000-\u4FFFD\u50000-\u5FFFD\u60000-\u6FFFD\u70000-\u7FFFD\u80000-\u8FFFD\u90000-\u9FFFD\uA0000-\uAFFFD\uB0000-\uBFFFD\uC0000-\uCFFFD\uD0000-\uDFFFD\uE1000-\uEFFFD!\$&'\(\)\*\+,;=:])*@)?(?:\[(?:(?:(?:[0-9a-f]{1,4}:){6}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|::(?:[0-9a-f]{1,4}:){5}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4}:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|v[0-9a-f]+[-a-z0-9\._~!\$&'\(\)\*\+,;=:]+)\]|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}|(?:%[0-9a-f][0-9a-f]|[-a-z0-9\._~\uA0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF\u10000-\u1FFFD\u20000-\u2FFFD\u30000-\u3FFFD\u40000-\u4FFFD\u50000-\u5FFFD\u60000-\u6FFFD\u70000-\u7FFFD\u80000-\u8FFFD\u90000-\u9FFFD\uA0000-\uAFFFD\uB0000-\uBFFFD\uC0000-\uCFFFD\uD0000-\uDFFFD\uE1000-\uEFFFD!\$&'\(\)\*\+,;=@])*)(?::[0-9]*)?(?:\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\._~\uA0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF\u10000-\u1FFFD\u20000-\u2FFFD\u30000-\u3FFFD\u40000-\u4FFFD\u50000-\u5FFFD\u60000-\u6FFFD\u70000-\u7FFFD\u80000-\u8FFFD\u90000-\u9FFFD\uA0000-\uAFFFD\uB0000-\uBFFFD\uC0000-\uCFFFD\uD0000-\uDFFFD\uE1000-\uEFFFD!\$&'\(\)\*\+,;=:@]))*)*|\/(?:(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\._~\uA0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF\u10000-\u1FFFD\u20000-\u2FFFD\u30000-\u3FFFD\u40000-\u4FFFD\u50000-\u5FFFD\u60000-\u6FFFD\u70000-\u7FFFD\u80000-\u8FFFD\u90000-\u9FFFD\uA0000-\uAFFFD\uB0000-\uBFFFD\uC0000-\uCFFFD\uD0000-\uDFFFD\uE1000-\uEFFFD!\$&'\(\)\*\+,;=:@]))+)(?:\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\._~\uA0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF\u10000-\u1FFFD\u20000-\u2FFFD\u30000-\u3FFFD\u40000-\u4FFFD\u50000-\u5FFFD\u60000-\u6FFFD\u70000-\u7FFFD\u80000-\u8FFFD\u90000-\u9FFFD\uA0000-\uAFFFD\uB0000-\uBFFFD\uC0000-\uCFFFD\uD0000-\uDFFFD\uE1000-\uEFFFD!\$&'\(\)\*\+,;=:@]))*)*)?|(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\._~\uA0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF\u10000-\u1FFFD\u20000-\u2FFFD\u30000-\u3FFFD\u40000-\u4FFFD\u50000-\u5FFFD\u60000-\u6FFFD\u70000-\u7FFFD\u80000-\u8FFFD\u90000-\u9FFFD\uA0000-\uAFFFD\uB0000-\uBFFFD\uC0000-\uCFFFD\uD0000-\uDFFFD\uE1000-\uEFFFD!\$&'\(\)\*\+,;=:@]))+)(?:\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\._~\uA0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF\u10000-\u1FFFD\u20000-\u2FFFD\u30000-\u3FFFD\u40000-\u4FFFD\u50000-\u5FFFD\u60000-\u6FFFD\u70000-\u7FFFD\u80000-\u8FFFD\u90000-\u9FFFD\uA0000-\uAFFFD\uB0000-\uBFFFD\uC0000-\uCFFFD\uD0000-\uDFFFD\uE1000-\uEFFFD!\$&'\(\)\*\+,;=:@]))*)*|(?!(?:%[0-9a-f][0-9a-f]|[-a-z0-9\._~\uA0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF\u10000-\u1FFFD\u20000-\u2FFFD\u30000-\u3FFFD\u40000-\u4FFFD\u50000-\u5FFFD\u60000-\u6FFFD\u70000-\u7FFFD\u80000-\u8FFFD\u90000-\u9FFFD\uA0000-\uAFFFD\uB0000-\uBFFFD\uC0000-\uCFFFD\uD0000-\uDFFFD\uE1000-\uEFFFD!\$&'\(\)\*\+,;=:@])))(?:\?(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\._~\uA0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF\u10000-\u1FFFD\u20000-\u2FFFD\u30000-\u3FFFD\u40000-\u4FFFD\u50000-\u5FFFD\u60000-\u6FFFD\u70000-\u7FFFD\u80000-\u8FFFD\u90000-\u9FFFD\uA0000-\uAFFFD\uB0000-\uBFFFD\uC0000-\uCFFFD\uD0000-\uDFFFD\uE1000-\uEFFFD!\$&'\(\)\*\+,;=:@])|[\uE000-\uF8FF\uF0000-\uFFFFD|\u100000-\u10FFFD\/\?])*)?(?:\#(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\._~\uA0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF\u10000-\u1FFFD\u20000-\u2FFFD\u30000-\u3FFFD\u40000-\u4FFFD\u50000-\u5FFFD\u60000-\u6FFFD\u70000-\u7FFFD\u80000-\u8FFFD\u90000-\u9FFFD\uA0000-\uAFFFD\uB0000-\uBFFFD\uC0000-\uCFFFD\uD0000-\uDFFFD\uE1000-\uEFFFD!\$&'\(\)\*\+,;=:@])|[\/\?])*)?$/i.test(txt);
        }
    };
    exports.default = uu;
}, , function(module, exports, __webpack_require__) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
        value: true
    });
    var saveAs = saveAs || function(view) {
        'use strict';
        if (typeof view === 'undefined' || typeof navigator !== 'undefined' && /MSIE [1-9]\./.test(navigator.userAgent)) {
            return;
        }
        var doc = view.document, get_URL = function get_URL() {
            return view.URL || view.webkitURL || view;
        }, save_link = doc.createElementNS('http://www.w3.org/1999/xhtml', 'a'), can_use_save_link = 'download' in save_link, click = function click(node) {
            var event = new MouseEvent('click');
            node.dispatchEvent(event);
        }, is_safari = /constructor/i.test(view.HTMLElement) || view.safari, is_chrome_ios = /CriOS\/[\d]+/.test(navigator.userAgent), throw_outside = function throw_outside(ex) {
            (view.setImmediate || view.setTimeout)(function() {
                throw ex;
            }, 0);
        }, force_saveable_type = 'application/octet-stream', arbitrary_revoke_timeout = 1e3 * 40, revoke = function revoke(file) {
            var revoker = function revoker() {
                if (typeof file === 'string') {
                    get_URL().revokeObjectURL(file);
                } else {
                    file.remove();
                }
            };
            setTimeout(revoker, arbitrary_revoke_timeout);
        }, dispatch = function dispatch(filesaver, event_types, event) {
            event_types = [].concat(event_types);
            var i = event_types.length;
            while (i--) {
                var listener = filesaver['on' + event_types[i]];
                if (typeof listener === 'function') {
                    try {
                        listener.call(filesaver, event || filesaver);
                    } catch (ex) {
                        throw_outside(ex);
                    }
                }
            }
        }, auto_bom = function auto_bom(blob) {
            if (/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
                return new Blob([ String.fromCharCode(65279), blob ], {
                    type: blob.type
                });
            }
            return blob;
        }, FileSaver = function FileSaver(blob, name, no_auto_bom) {
            if (!no_auto_bom) {
                blob = auto_bom(blob);
            }
            var filesaver = this, type = blob.type, force = type === force_saveable_type, object_url, dispatch_all = function dispatch_all() {
                dispatch(filesaver, 'writestart progress write writeend'.split(' '));
            }, fs_error = function fs_error() {
                if ((is_chrome_ios || force && is_safari) && view.FileReader) {
                    var reader = new FileReader();
                    reader.onloadend = function() {
                        var url = is_chrome_ios ? reader.result : reader.result.replace(/^data:[^;]*;/, 'data:attachment/file;');
                        var popup = view.open(url, '_blank');
                        if (!popup) view.location.href = url;
                        url = undefined;
                        filesaver.readyState = filesaver.DONE;
                        dispatch_all();
                    };
                    reader.readAsDataURL(blob);
                    filesaver.readyState = filesaver.INIT;
                    return;
                }
                if (!object_url) {
                    object_url = get_URL().createObjectURL(blob);
                }
                if (force) {
                    view.location.href = object_url;
                } else {
                    var opened = view.open(object_url, '_blank');
                    if (!opened) {
                        view.location.href = object_url;
                    }
                }
                filesaver.readyState = filesaver.DONE;
                dispatch_all();
                revoke(object_url);
            };
            filesaver.readyState = filesaver.INIT;
            if (can_use_save_link) {
                object_url = get_URL().createObjectURL(blob);
                setTimeout(function() {
                    save_link.href = object_url;
                    save_link.download = name;
                    click(save_link);
                    dispatch_all();
                    revoke(object_url);
                    filesaver.readyState = filesaver.DONE;
                });
                return;
            }
            fs_error();
        }, FS_proto = FileSaver.prototype, saveAs = function saveAs(blob, name, no_auto_bom) {
            return new FileSaver(blob, name || blob.name || 'download', no_auto_bom);
        };
        if (typeof navigator !== 'undefined' && navigator.msSaveOrOpenBlob) {
            return function(blob, name, no_auto_bom) {
                name = name || blob.name || 'download';
                if (!no_auto_bom) {
                    blob = auto_bom(blob);
                }
                return navigator.msSaveOrOpenBlob(blob, name);
            };
        }
        FS_proto.abort = function() {};
        FS_proto.readyState = FS_proto.INIT = 0;
        FS_proto.WRITING = 1;
        FS_proto.DONE = 2;
        FS_proto.error = FS_proto.onwritestart = FS_proto.onprogress = FS_proto.onwrite = FS_proto.onabort = FS_proto.onerror = FS_proto.onwriteend = null;
        return saveAs;
    }(typeof self !== 'undefined' && self || typeof window !== 'undefined' && window || undefined);
    exports.default = saveAs;
}, function(module, exports, __webpack_require__) {
    'use strict';
    var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function(obj) {
        return typeof obj;
    } : function(obj) {
        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
    };
    var _jquery = __webpack_require__(6);
    var _jquery2 = _interopRequireDefault(_jquery);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    (function(window, document, undefined) {
        (function(factory) {
            'use strict';
            if (_jquery2.default && !_jquery2.default.fn.qtip) {
                factory(_jquery2.default);
            }
        })(function($) {
            'use strict';
            var TRUE = true, FALSE = false, NULL = null, X = 'x', Y = 'y', WIDTH = 'width', HEIGHT = 'height', TOP = 'top', LEFT = 'left', BOTTOM = 'bottom', RIGHT = 'right', CENTER = 'center', FLIP = 'flip', FLIPINVERT = 'flipinvert', SHIFT = 'shift', QTIP, PROTOTYPE, CORNER, CHECKS, PLUGINS = {}, NAMESPACE = 'qtip', ATTR_HAS = 'data-hasqtip', ATTR_ID = 'data-qtip-id', WIDGET = [ 'ui-widget', 'ui-tooltip' ], SELECTOR = '.' + NAMESPACE, INACTIVE_EVENTS = 'click dblclick mousedown mouseup mousemove mouseleave mouseenter'.split(' '), CLASS_FIXED = NAMESPACE + '-fixed', CLASS_DEFAULT = NAMESPACE + '-default', CLASS_FOCUS = NAMESPACE + '-focus', CLASS_HOVER = NAMESPACE + '-hover', CLASS_DISABLED = NAMESPACE + '-disabled', replaceSuffix = '_replacedByqTip', oldtitle = 'oldtitle', trackingBound, BROWSER = {
                ie: function() {
                    var v, i;
                    for (v = 4, i = document.createElement('div'); (i.innerHTML = '\x3c!--[if gt IE ' + v + ']><i></i><![endif]--\x3e') && i.getElementsByTagName('i')[0]; v += 1) {}
                    return v > 4 ? v : NaN;
                }(),
                iOS: parseFloat(('' + (/CPU.*OS ([0-9_]{1,5})|(CPU like).*AppleWebKit.*Mobile/i.exec(navigator.userAgent) || [ 0, '' ])[1]).replace('undefined', '3_2').replace('_', '.').replace('_', '')) || FALSE
            };
            function QTip(target, options, id, attr) {
                this.id = id;
                this.target = target;
                this.tooltip = NULL;
                this.elements = {
                    target: target
                };
                this._id = NAMESPACE + '-' + id;
                this.timers = {
                    img: {}
                };
                this.options = options;
                this.plugins = {};
                this.cache = {
                    event: {},
                    target: $(),
                    disabled: FALSE,
                    attr: attr,
                    onTooltip: FALSE,
                    lastClass: ''
                };
                this.rendered = this.destroyed = this.disabled = this.waiting = this.hiddenDuringWait = this.positioning = this.triggering = FALSE;
            }
            PROTOTYPE = QTip.prototype;
            PROTOTYPE._when = function(deferreds) {
                return $.when.apply($, deferreds);
            };
            PROTOTYPE.render = function(show) {
                if (this.rendered || this.destroyed) {
                    return this;
                }
                var self = this, options = this.options, cache = this.cache, elements = this.elements, text = options.content.text, title = options.content.title, button = options.content.button, posOptions = options.position, deferreds = [];
                $.attr(this.target[0], 'aria-describedby', this._id);
                cache.posClass = this._createPosClass((this.position = {
                    my: posOptions.my,
                    at: posOptions.at
                }).my);
                this.tooltip = elements.tooltip = $('<div/>', {
                    id: this._id,
                    class: [ NAMESPACE, CLASS_DEFAULT, options.style.classes, cache.posClass ].join(' '),
                    width: options.style.width || '',
                    height: options.style.height || '',
                    tracking: posOptions.target === 'mouse' && posOptions.adjust.mouse,
                    role: 'alert',
                    'aria-live': 'polite',
                    'aria-atomic': FALSE,
                    'aria-describedby': this._id + '-content',
                    'aria-hidden': TRUE
                }).toggleClass(CLASS_DISABLED, this.disabled).attr(ATTR_ID, this.id).data(NAMESPACE, this).appendTo(posOptions.container).append(elements.content = $('<div />', {
                    class: NAMESPACE + '-content',
                    id: this._id + '-content',
                    'aria-atomic': TRUE
                }));
                this.rendered = -1;
                this.positioning = TRUE;
                if (title) {
                    this._createTitle();
                    if (!$.isFunction(title)) {
                        deferreds.push(this._updateTitle(title, FALSE));
                    }
                }
                if (button) {
                    this._createButton();
                }
                if (!$.isFunction(text)) {
                    deferreds.push(this._updateContent(text, FALSE));
                }
                this.rendered = TRUE;
                this._setWidget();
                $.each(PLUGINS, function(name) {
                    var instance;
                    if (this.initialize === 'render' && (instance = this(self))) {
                        self.plugins[name] = instance;
                    }
                });
                this._unassignEvents();
                this._assignEvents();
                this._when(deferreds).then(function() {
                    self._trigger('render');
                    self.positioning = FALSE;
                    if (!self.hiddenDuringWait && (options.show.ready || show)) {
                        self.toggle(TRUE, cache.event, FALSE);
                    }
                    self.hiddenDuringWait = FALSE;
                });
                QTIP.api[this.id] = this;
                return this;
            };
            PROTOTYPE.destroy = function(immediate) {
                if (this.destroyed) {
                    return this.target;
                }
                function process() {
                    if (this.destroyed) {
                        return;
                    }
                    this.destroyed = TRUE;
                    var target = this.target, title = target.attr(oldtitle), timer;
                    if (this.rendered) {
                        this.tooltip.stop(1, 0).find('*').remove().end().remove();
                    }
                    $.each(this.plugins, function() {
                        this.destroy && this.destroy();
                    });
                    for (timer in this.timers) {
                        if (this.timers.hasOwnProperty(timer)) {
                            clearTimeout(this.timers[timer]);
                        }
                    }
                    target.removeData(NAMESPACE).removeAttr(ATTR_ID).removeAttr(ATTR_HAS).removeAttr('aria-describedby');
                    if (this.options.suppress && title) {
                        target.attr('title', title).removeAttr(oldtitle);
                    }
                    this._unassignEvents();
                    this.options = this.elements = this.cache = this.timers = this.plugins = this.mouse = NULL;
                    delete QTIP.api[this.id];
                }
                if ((immediate !== TRUE || this.triggering === 'hide') && this.rendered) {
                    this.tooltip.one('tooltiphidden', $.proxy(process, this));
                    !this.triggering && this.hide();
                } else {
                    process.call(this);
                }
                return this.target;
            };
            function invalidOpt(a) {
                return a === NULL || $.type(a) !== 'object';
            }
            function invalidContent(c) {
                return !($.isFunction(c) || c && c.attr || c.length || $.type(c) === 'object' && (c.jquery || c.then));
            }
            function sanitizeOptions(opts) {
                var content, text, ajax, once;
                if (invalidOpt(opts)) {
                    return FALSE;
                }
                if (invalidOpt(opts.metadata)) {
                    opts.metadata = {
                        type: opts.metadata
                    };
                }
                if ('content' in opts) {
                    content = opts.content;
                    if (invalidOpt(content) || content.jquery || content.done) {
                        text = invalidContent(content) ? FALSE : content;
                        content = opts.content = {
                            text: text
                        };
                    } else {
                        text = content.text;
                    }
                    if ('ajax' in content) {
                        ajax = content.ajax;
                        once = ajax && ajax.once !== FALSE;
                        delete content.ajax;
                        content.text = function(event, api) {
                            var loading = text || $(this).attr(api.options.content.attr) || 'Loading...', deferred = $.ajax($.extend({}, ajax, {
                                context: api
                            })).then(ajax.success, NULL, ajax.error).then(function(newContent) {
                                if (newContent && once) {
                                    api.set('content.text', newContent);
                                }
                                return newContent;
                            }, function(xhr, status, error) {
                                if (api.destroyed || xhr.status === 0) {
                                    return;
                                }
                                api.set('content.text', status + ': ' + error);
                            });
                            return !once ? (api.set('content.text', loading), deferred) : loading;
                        };
                    }
                    if ('title' in content) {
                        if ($.isPlainObject(content.title)) {
                            content.button = content.title.button;
                            content.title = content.title.text;
                        }
                        if (invalidContent(content.title || FALSE)) {
                            content.title = FALSE;
                        }
                    }
                }
                if ('position' in opts && invalidOpt(opts.position)) {
                    opts.position = {
                        my: opts.position,
                        at: opts.position
                    };
                }
                if ('show' in opts && invalidOpt(opts.show)) {
                    opts.show = opts.show.jquery ? {
                        target: opts.show
                    } : opts.show === TRUE ? {
                        ready: TRUE
                    } : {
                        event: opts.show
                    };
                }
                if ('hide' in opts && invalidOpt(opts.hide)) {
                    opts.hide = opts.hide.jquery ? {
                        target: opts.hide
                    } : {
                        event: opts.hide
                    };
                }
                if ('style' in opts && invalidOpt(opts.style)) {
                    opts.style = {
                        classes: opts.style
                    };
                }
                $.each(PLUGINS, function() {
                    this.sanitize && this.sanitize(opts);
                });
                return opts;
            }
            CHECKS = PROTOTYPE.checks = {
                builtin: {
                    '^id$': function id$(obj, o, v, prev) {
                        var id = v === TRUE ? QTIP.nextid : v, newId = NAMESPACE + '-' + id;
                        if (id !== FALSE && id.length > 0 && !$('#' + newId).length) {
                            this._id = newId;
                            if (this.rendered) {
                                this.tooltip[0].id = this._id;
                                this.elements.content[0].id = this._id + '-content';
                                this.elements.title[0].id = this._id + '-title';
                            }
                        } else {
                            obj[o] = prev;
                        }
                    },
                    '^prerender': function prerender(obj, o, v) {
                        v && !this.rendered && this.render(this.options.show.ready);
                    },
                    '^content.text$': function contentText$(obj, o, v) {
                        this._updateContent(v);
                    },
                    '^content.attr$': function contentAttr$(obj, o, v, prev) {
                        if (this.options.content.text === this.target.attr(prev)) {
                            this._updateContent(this.target.attr(v));
                        }
                    },
                    '^content.title$': function contentTitle$(obj, o, v) {
                        if (!v) {
                            return this._removeTitle();
                        }
                        v && !this.elements.title && this._createTitle();
                        this._updateTitle(v);
                    },
                    '^content.button$': function contentButton$(obj, o, v) {
                        this._updateButton(v);
                    },
                    '^content.title.(text|button)$': function contentTitleTextButton$(obj, o, v) {
                        this.set('content.' + o, v);
                    },
                    '^position.(my|at)$': function positionMyAt$(obj, o, v) {
                        if ('string' === typeof v) {
                            this.position[o] = obj[o] = new CORNER(v, o === 'at');
                        }
                    },
                    '^position.container$': function positionContainer$(obj, o, v) {
                        this.rendered && this.tooltip.appendTo(v);
                    },
                    '^show.ready$': function showReady$(obj, o, v) {
                        v && (!this.rendered && this.render(TRUE) || this.toggle(TRUE));
                    },
                    '^style.classes$': function styleClasses$(obj, o, v, p) {
                        this.rendered && this.tooltip.removeClass(p).addClass(v);
                    },
                    '^style.(width|height)': function styleWidthHeight(obj, o, v) {
                        this.rendered && this.tooltip.css(o, v);
                    },
                    '^style.widget|content.title': function styleWidgetContentTitle() {
                        this.rendered && this._setWidget();
                    },
                    '^style.def': function styleDef(obj, o, v) {
                        this.rendered && this.tooltip.toggleClass(CLASS_DEFAULT, !!v);
                    },
                    '^events.(render|show|move|hide|focus|blur)$': function eventsRenderShowMoveHideFocusBlur$(obj, o, v) {
                        this.rendered && this.tooltip[($.isFunction(v) ? '' : 'un') + 'bind']('tooltip' + o, v);
                    },
                    '^(show|hide|position).(event|target|fixed|inactive|leave|distance|viewport|adjust)': function showHidePositionEventTargetFixedInactiveLeaveDistanceViewportAdjust() {
                        if (!this.rendered) {
                            return;
                        }
                        var posOptions = this.options.position;
                        this.tooltip.attr('tracking', posOptions.target === 'mouse' && posOptions.adjust.mouse);
                        this._unassignEvents();
                        this._assignEvents();
                    }
                }
            };
            function convertNotation(options, notation) {
                var i = 0, obj, option = options, levels = notation.split('.');
                while (option = option[levels[i++]]) {
                    if (i < levels.length) {
                        obj = option;
                    }
                }
                return [ obj || options, levels.pop() ];
            }
            PROTOTYPE.get = function(notation) {
                if (this.destroyed) {
                    return this;
                }
                var o = convertNotation(this.options, notation.toLowerCase()), result = o[0][o[1]];
                return result.precedance ? result.string() : result;
            };
            function setCallback(notation, args) {
                var category, rule, match;
                for (category in this.checks) {
                    if (!this.checks.hasOwnProperty(category)) {
                        continue;
                    }
                    for (rule in this.checks[category]) {
                        if (!this.checks[category].hasOwnProperty(rule)) {
                            continue;
                        }
                        if (match = new RegExp(rule, 'i').exec(notation)) {
                            args.push(match);
                            if (category === 'builtin' || this.plugins[category]) {
                                this.checks[category][rule].apply(this.plugins[category] || this, args);
                            }
                        }
                    }
                }
            }
            var rmove = /^position\.(my|at|adjust|target|container|viewport)|style|content|show\.ready/i, rrender = /^prerender|show\.ready/i;
            PROTOTYPE.set = function(option, value) {
                if (this.destroyed) {
                    return this;
                }
                var rendered = this.rendered, reposition = FALSE, options = this.options, name;
                if ('string' === typeof option) {
                    name = option;
                    option = {};
                    option[name] = value;
                } else {
                    option = $.extend({}, option);
                }
                $.each(option, function(notation, val) {
                    if (rendered && rrender.test(notation)) {
                        delete option[notation];
                        return;
                    }
                    var obj = convertNotation(options, notation.toLowerCase()), previous;
                    previous = obj[0][obj[1]];
                    obj[0][obj[1]] = val && val.nodeType ? $(val) : val;
                    reposition = rmove.test(notation) || reposition;
                    option[notation] = [ obj[0], obj[1], val, previous ];
                });
                sanitizeOptions(options);
                this.positioning = TRUE;
                $.each(option, $.proxy(setCallback, this));
                this.positioning = FALSE;
                if (this.rendered && this.tooltip[0].offsetWidth > 0 && reposition) {
                    this.reposition(options.position.target === 'mouse' ? NULL : this.cache.event);
                }
                return this;
            };
            PROTOTYPE._update = function(content, element) {
                var self = this, cache = this.cache;
                if (!this.rendered || !content) {
                    return FALSE;
                }
                if ($.isFunction(content)) {
                    content = content.call(this.elements.target, cache.event, this) || '';
                }
                if ($.isFunction(content.then)) {
                    cache.waiting = TRUE;
                    return content.then(function(c) {
                        cache.waiting = FALSE;
                        return self._update(c, element);
                    }, NULL, function(e) {
                        return self._update(e, element);
                    });
                }
                if (content === FALSE || !content && content !== '') {
                    return FALSE;
                }
                if (content.jquery && content.length > 0) {
                    element.empty().append(content.css({
                        display: 'block',
                        visibility: 'visible'
                    }));
                } else {
                    element.html(content);
                }
                return this._waitForContent(element).then(function(images) {
                    if (self.rendered && self.tooltip[0].offsetWidth > 0) {
                        self.reposition(cache.event, !images.length);
                    }
                });
            };
            PROTOTYPE._waitForContent = function(element) {
                var cache = this.cache;
                cache.waiting = TRUE;
                return ($.fn.imagesLoaded ? element.imagesLoaded() : new $.Deferred().resolve([])).done(function() {
                    cache.waiting = FALSE;
                }).promise();
            };
            PROTOTYPE._updateContent = function(content, reposition) {
                this._update(content, this.elements.content, reposition);
            };
            PROTOTYPE._updateTitle = function(content, reposition) {
                if (this._update(content, this.elements.title, reposition) === FALSE) {
                    this._removeTitle(FALSE);
                }
            };
            PROTOTYPE._createTitle = function() {
                var elements = this.elements, id = this._id + '-title';
                if (elements.titlebar) {
                    this._removeTitle();
                }
                elements.titlebar = $('<div />', {
                    class: NAMESPACE + '-titlebar ' + (this.options.style.widget ? createWidgetClass('header') : '')
                }).append(elements.title = $('<div />', {
                    id: id,
                    class: NAMESPACE + '-title',
                    'aria-atomic': TRUE
                })).insertBefore(elements.content).delegate('.qtip-close', 'mousedown keydown mouseup keyup mouseout', function(event) {
                    $(this).toggleClass('ui-state-active ui-state-focus', event.type.substr(-4) === 'down');
                }).delegate('.qtip-close', 'mouseover mouseout', function(event) {
                    $(this).toggleClass('ui-state-hover', event.type === 'mouseover');
                });
                if (this.options.content.button) {
                    this._createButton();
                }
            };
            PROTOTYPE._removeTitle = function(reposition) {
                var elements = this.elements;
                if (elements.title) {
                    elements.titlebar.remove();
                    elements.titlebar = elements.title = elements.button = NULL;
                    if (reposition !== FALSE) {
                        this.reposition();
                    }
                }
            };
            PROTOTYPE._createPosClass = function(my) {
                return NAMESPACE + '-pos-' + (my || this.options.position.my).abbrev();
            };
            PROTOTYPE.reposition = function(event, effect) {
                if (!this.rendered || this.positioning || this.destroyed) {
                    return this;
                }
                this.positioning = TRUE;
                var cache = this.cache, tooltip = this.tooltip, posOptions = this.options.position, target = posOptions.target, my = posOptions.my, at = posOptions.at, viewport = posOptions.viewport, container = posOptions.container, adjust = posOptions.adjust, method = adjust.method.split(' '), tooltipWidth = tooltip.outerWidth(FALSE), tooltipHeight = tooltip.outerHeight(FALSE), targetWidth = 0, targetHeight = 0, type = tooltip.css('position'), position = {
                    left: 0,
                    top: 0
                }, visible = tooltip[0].offsetWidth > 0, isScroll = event && event.type === 'scroll', win = $(window), doc = container[0].ownerDocument, mouse = this.mouse, pluginCalculations, offset, adjusted, newClass;
                if ($.isArray(target) && target.length === 2) {
                    at = {
                        x: LEFT,
                        y: TOP
                    };
                    position = {
                        left: target[0],
                        top: target[1]
                    };
                } else if (target === 'mouse') {
                    at = {
                        x: LEFT,
                        y: TOP
                    };
                    if ((!adjust.mouse || this.options.hide.distance) && cache.origin && cache.origin.pageX) {
                        event = cache.origin;
                    } else if (!event || event && (event.type === 'resize' || event.type === 'scroll')) {
                        event = cache.event;
                    } else if (mouse && mouse.pageX) {
                        event = mouse;
                    }
                    if (type !== 'static') {
                        position = container.offset();
                    }
                    if (doc.body.offsetWidth !== (window.innerWidth || doc.documentElement.clientWidth)) {
                        offset = $(document.body).offset();
                    }
                    position = {
                        left: event.pageX - position.left + (offset && offset.left || 0),
                        top: event.pageY - position.top + (offset && offset.top || 0)
                    };
                    if (adjust.mouse && isScroll && mouse) {
                        position.left -= (mouse.scrollX || 0) - win.scrollLeft();
                        position.top -= (mouse.scrollY || 0) - win.scrollTop();
                    }
                } else {
                    if (target === 'event') {
                        if (event && event.target && event.type !== 'scroll' && event.type !== 'resize') {
                            cache.target = $(event.target);
                        } else if (!event.target) {
                            cache.target = this.elements.target;
                        }
                    } else if (target !== 'event') {
                        cache.target = $(target.jquery ? target : this.elements.target);
                    }
                    target = cache.target;
                    target = $(target).eq(0);
                    if (target.length === 0) {
                        return this;
                    } else if (target[0] === document || target[0] === window) {
                        targetWidth = BROWSER.iOS ? window.innerWidth : target.width();
                        targetHeight = BROWSER.iOS ? window.innerHeight : target.height();
                        if (target[0] === window) {
                            position = {
                                top: (viewport || target).scrollTop(),
                                left: (viewport || target).scrollLeft()
                            };
                        }
                    } else if (PLUGINS.imagemap && target.is('area')) {
                        pluginCalculations = PLUGINS.imagemap(this, target, at, PLUGINS.viewport ? method : FALSE);
                    } else if (PLUGINS.svg && target && target[0].ownerSVGElement) {
                        pluginCalculations = PLUGINS.svg(this, target, at, PLUGINS.viewport ? method : FALSE);
                    } else {
                        targetWidth = target.outerWidth(FALSE);
                        targetHeight = target.outerHeight(FALSE);
                        position = target.offset();
                    }
                    if (pluginCalculations) {
                        targetWidth = pluginCalculations.width;
                        targetHeight = pluginCalculations.height;
                        offset = pluginCalculations.offset;
                        position = pluginCalculations.position;
                    }
                    position = this.reposition.offset(target, position, container);
                    if (BROWSER.iOS > 3.1 && BROWSER.iOS < 4.1 || BROWSER.iOS >= 4.3 && BROWSER.iOS < 4.33 || !BROWSER.iOS && type === 'fixed') {
                        position.left -= win.scrollLeft();
                        position.top -= win.scrollTop();
                    }
                    if (!pluginCalculations || pluginCalculations && pluginCalculations.adjustable !== FALSE) {
                        position.left += at.x === RIGHT ? targetWidth : at.x === CENTER ? targetWidth / 2 : 0;
                        position.top += at.y === BOTTOM ? targetHeight : at.y === CENTER ? targetHeight / 2 : 0;
                    }
                }
                position.left += adjust.x + (my.x === RIGHT ? -tooltipWidth : my.x === CENTER ? -tooltipWidth / 2 : 0);
                position.top += adjust.y + (my.y === BOTTOM ? -tooltipHeight : my.y === CENTER ? -tooltipHeight / 2 : 0);
                if (PLUGINS.viewport) {
                    adjusted = position.adjusted = PLUGINS.viewport(this, position, posOptions, targetWidth, targetHeight, tooltipWidth, tooltipHeight);
                    if (offset && adjusted.left) {
                        position.left += offset.left;
                    }
                    if (offset && adjusted.top) {
                        position.top += offset.top;
                    }
                    if (adjusted.my) {
                        this.position.my = adjusted.my;
                    }
                } else {
                    position.adjusted = {
                        left: 0,
                        top: 0
                    };
                }
                if (cache.posClass !== (newClass = this._createPosClass(this.position.my))) {
                    cache.posClass = newClass;
                    tooltip.removeClass(cache.posClass).addClass(newClass);
                }
                if (!this._trigger('move', [ position, viewport.elem || viewport ], event)) {
                    return this;
                }
                delete position.adjusted;
                if (effect === FALSE || !visible || isNaN(position.left) || isNaN(position.top) || target === 'mouse' || !$.isFunction(posOptions.effect)) {
                    tooltip.css(position);
                } else if ($.isFunction(posOptions.effect)) {
                    posOptions.effect.call(tooltip, this, $.extend({}, position));
                    tooltip.queue(function(next) {
                        $(this).css({
                            opacity: '',
                            height: ''
                        });
                        if (BROWSER.ie) {
                            this.style.removeAttribute('filter');
                        }
                        next();
                    });
                }
                this.positioning = FALSE;
                return this;
            };
            PROTOTYPE.reposition.offset = function(elem, pos, container) {
                if (!container[0]) {
                    return pos;
                }
                var ownerDocument = $(elem[0].ownerDocument), quirks = !!BROWSER.ie && document.compatMode !== 'CSS1Compat', parent = container[0], scrolled, position, parentOffset, overflow;
                function scroll(e, i) {
                    pos.left += i * e.scrollLeft();
                    pos.top += i * e.scrollTop();
                }
                do {
                    if ((position = $.css(parent, 'position')) !== 'static') {
                        if (position === 'fixed') {
                            parentOffset = parent.getBoundingClientRect();
                            scroll(ownerDocument, -1);
                        } else {
                            parentOffset = $(parent).position();
                            parentOffset.left += parseFloat($.css(parent, 'borderLeftWidth')) || 0;
                            parentOffset.top += parseFloat($.css(parent, 'borderTopWidth')) || 0;
                        }
                        pos.left -= parentOffset.left + (parseFloat($.css(parent, 'marginLeft')) || 0);
                        pos.top -= parentOffset.top + (parseFloat($.css(parent, 'marginTop')) || 0);
                        if (!scrolled && (overflow = $.css(parent, 'overflow')) !== 'hidden' && overflow !== 'visible') {
                            scrolled = $(parent);
                        }
                    }
                } while (parent = parent.offsetParent);
                if (scrolled && (scrolled[0] !== ownerDocument[0] || quirks)) {
                    scroll(scrolled, 1);
                }
                return pos;
            };
            var C = (CORNER = PROTOTYPE.reposition.Corner = function(corner, forceY) {
                corner = ('' + corner).replace(/([A-Z])/, ' $1').replace(/middle/gi, CENTER).toLowerCase();
                this.x = (corner.match(/left|right/i) || corner.match(/center/) || [ 'inherit' ])[0].toLowerCase();
                this.y = (corner.match(/top|bottom|center/i) || [ 'inherit' ])[0].toLowerCase();
                this.forceY = !!forceY;
                var f = corner.charAt(0);
                this.precedance = f === 't' || f === 'b' ? Y : X;
            }).prototype;
            C.invert = function(z, center) {
                this[z] = this[z] === LEFT ? RIGHT : this[z] === RIGHT ? LEFT : center || this[z];
            };
            C.string = function(join) {
                var x = this.x, y = this.y;
                var result = x !== y ? x === 'center' || y !== 'center' && (this.precedance === Y || this.forceY) ? [ y, x ] : [ x, y ] : [ x ];
                return join !== false ? result.join(' ') : result;
            };
            C.abbrev = function() {
                var result = this.string(false);
                return result[0].charAt(0) + (result[1] && result[1].charAt(0) || '');
            };
            C.clone = function() {
                return new CORNER(this.string(), this.forceY);
            };
            PROTOTYPE.toggle = function(state, event) {
                var cache = this.cache, options = this.options, tooltip = this.tooltip;
                if (event) {
                    if (/over|enter/.test(event.type) && cache.event && /out|leave/.test(cache.event.type) && options.show.target.add(event.target).length === options.show.target.length && tooltip.has(event.relatedTarget).length) {
                        return this;
                    }
                    cache.event = $.event.fix(event);
                }
                this.waiting && !state && (this.hiddenDuringWait = TRUE);
                if (!this.rendered) {
                    return state ? this.render(1) : this;
                } else if (this.destroyed || this.disabled) {
                    return this;
                }
                var type = state ? 'show' : 'hide', opts = this.options[type], posOptions = this.options.position, contentOptions = this.options.content, width = this.tooltip.css('width'), visible = this.tooltip.is(':visible'), animate = state || opts.target.length === 1, sameTarget = !event || opts.target.length < 2 || cache.target[0] === event.target, identicalState, allow, after;
                if ((typeof state === 'undefined' ? 'undefined' : _typeof(state)).search('boolean|number')) {
                    state = !visible;
                }
                identicalState = !tooltip.is(':animated') && visible === state && sameTarget;
                allow = !identicalState ? !!this._trigger(type, [ 90 ]) : NULL;
                if (this.destroyed) {
                    return this;
                }
                if (allow !== FALSE && state) {
                    this.focus(event);
                }
                if (!allow || identicalState) {
                    return this;
                }
                $.attr(tooltip[0], 'aria-hidden', !!!state);
                if (state) {
                    this.mouse && (cache.origin = $.event.fix(this.mouse));
                    if ($.isFunction(contentOptions.text)) {
                        this._updateContent(contentOptions.text, FALSE);
                    }
                    if ($.isFunction(contentOptions.title)) {
                        this._updateTitle(contentOptions.title, FALSE);
                    }
                    if (!trackingBound && posOptions.target === 'mouse' && posOptions.adjust.mouse) {
                        $(document).bind('mousemove.' + NAMESPACE, this._storeMouse);
                        trackingBound = TRUE;
                    }
                    if (!width) {
                        tooltip.css('width', tooltip.outerWidth(FALSE));
                    }
                    this.reposition(event, arguments[2]);
                    if (!width) {
                        tooltip.css('width', '');
                    }
                    if (!!opts.solo) {
                        (typeof opts.solo === 'string' ? $(opts.solo) : $(SELECTOR, opts.solo)).not(tooltip).not(opts.target).qtip('hide', new $.Event('tooltipsolo'));
                    }
                } else {
                    clearTimeout(this.timers.show);
                    delete cache.origin;
                    if (trackingBound && !$(SELECTOR + '[tracking="true"]:visible', opts.solo).not(tooltip).length) {
                        $(document).unbind('mousemove.' + NAMESPACE);
                        trackingBound = FALSE;
                    }
                    this.blur(event);
                }
                after = $.proxy(function() {
                    if (state) {
                        if (BROWSER.ie) {
                            tooltip[0].style.removeAttribute('filter');
                        }
                        tooltip.css('overflow', '');
                        if ('string' === typeof opts.autofocus) {
                            $(this.options.show.autofocus, tooltip).focus();
                        }
                        this.options.show.target.trigger('qtip-' + this.id + '-inactive');
                    } else {
                        tooltip.css({
                            display: '',
                            visibility: '',
                            opacity: '',
                            left: '',
                            top: ''
                        });
                    }
                    this._trigger(state ? 'visible' : 'hidden');
                }, this);
                if (opts.effect === FALSE || animate === FALSE) {
                    tooltip[type]();
                    after();
                } else if ($.isFunction(opts.effect)) {
                    tooltip.stop(1, 1);
                    opts.effect.call(tooltip, this);
                    tooltip.queue('fx', function(n) {
                        after();
                        n();
                    });
                } else {
                    tooltip.fadeTo(90, state ? 1 : 0, after);
                }
                if (state) {
                    opts.target.trigger('qtip-' + this.id + '-inactive');
                }
                return this;
            };
            PROTOTYPE.show = function(event) {
                return this.toggle(TRUE, event);
            };
            PROTOTYPE.hide = function(event) {
                return this.toggle(FALSE, event);
            };
            PROTOTYPE.focus = function(event) {
                if (!this.rendered || this.destroyed) {
                    return this;
                }
                var qtips = $(SELECTOR), tooltip = this.tooltip, curIndex = parseInt(tooltip[0].style.zIndex, 10), newIndex = QTIP.zindex + qtips.length;
                if (!tooltip.hasClass(CLASS_FOCUS)) {
                    if (this._trigger('focus', [ newIndex ], event)) {
                        if (curIndex !== newIndex) {
                            qtips.each(function() {
                                if (this.style.zIndex > curIndex) {
                                    this.style.zIndex = this.style.zIndex - 1;
                                }
                            });
                            qtips.filter('.' + CLASS_FOCUS).qtip('blur', event);
                        }
                        tooltip.addClass(CLASS_FOCUS)[0].style.zIndex = newIndex;
                    }
                }
                return this;
            };
            PROTOTYPE.blur = function(event) {
                if (!this.rendered || this.destroyed) {
                    return this;
                }
                this.tooltip.removeClass(CLASS_FOCUS);
                this._trigger('blur', [ this.tooltip.css('zIndex') ], event);
                return this;
            };
            PROTOTYPE.disable = function(state) {
                if (this.destroyed) {
                    return this;
                }
                if (state === 'toggle') {
                    state = !(this.rendered ? this.tooltip.hasClass(CLASS_DISABLED) : this.disabled);
                } else if ('boolean' !== typeof state) {
                    state = TRUE;
                }
                if (this.rendered) {
                    this.tooltip.toggleClass(CLASS_DISABLED, state).attr('aria-disabled', state);
                }
                this.disabled = !!state;
                return this;
            };
            PROTOTYPE.enable = function() {
                return this.disable(FALSE);
            };
            PROTOTYPE._createButton = function() {
                var self = this, elements = this.elements, tooltip = elements.tooltip, button = this.options.content.button, isString = typeof button === 'string', close = isString ? button : 'Close tooltip';
                if (elements.button) {
                    elements.button.remove();
                }
                if (button.jquery) {
                    elements.button = button;
                } else {
                    elements.button = $('<a />', {
                        class: 'qtip-close ' + (this.options.style.widget ? '' : NAMESPACE + '-icon'),
                        title: close,
                        'aria-label': close
                    }).prepend($('<span />', {
                        class: 'ui-icon ui-icon-close',
                        html: '&times;'
                    }));
                }
                elements.button.appendTo(elements.titlebar || tooltip).attr('role', 'button').click(function(event) {
                    if (!tooltip.hasClass(CLASS_DISABLED)) {
                        self.hide(event);
                    }
                    return FALSE;
                });
            };
            PROTOTYPE._updateButton = function(button) {
                if (!this.rendered) {
                    return FALSE;
                }
                var elem = this.elements.button;
                if (button) {
                    this._createButton();
                } else {
                    elem.remove();
                }
            };
            function createWidgetClass(cls) {
                return WIDGET.concat('').join(cls ? '-' + cls + ' ' : ' ');
            }
            PROTOTYPE._setWidget = function() {
                var on = this.options.style.widget, elements = this.elements, tooltip = elements.tooltip, disabled = tooltip.hasClass(CLASS_DISABLED);
                tooltip.removeClass(CLASS_DISABLED);
                CLASS_DISABLED = on ? 'ui-state-disabled' : 'qtip-disabled';
                tooltip.toggleClass(CLASS_DISABLED, disabled);
                tooltip.toggleClass('ui-helper-reset ' + createWidgetClass(), on).toggleClass(CLASS_DEFAULT, this.options.style.def && !on);
                if (elements.content) {
                    elements.content.toggleClass(createWidgetClass('content'), on);
                }
                if (elements.titlebar) {
                    elements.titlebar.toggleClass(createWidgetClass('header'), on);
                }
                if (elements.button) {
                    elements.button.toggleClass(NAMESPACE + '-icon', !on);
                }
            };
            function delay(callback, duration) {
                if (duration > 0) {
                    return setTimeout($.proxy(callback, this), duration);
                } else {
                    callback.call(this);
                }
            }
            function showMethod(event) {
                if (this.tooltip.hasClass(CLASS_DISABLED)) {
                    return;
                }
                clearTimeout(this.timers.show);
                clearTimeout(this.timers.hide);
                this.timers.show = delay.call(this, function() {
                    this.toggle(TRUE, event);
                }, this.options.show.delay);
            }
            function hideMethod(event) {
                if (this.tooltip.hasClass(CLASS_DISABLED) || this.destroyed) {
                    return;
                }
                var relatedTarget = $(event.relatedTarget), ontoTooltip = relatedTarget.closest(SELECTOR)[0] === this.tooltip[0], ontoTarget = relatedTarget[0] === this.options.show.target[0];
                clearTimeout(this.timers.show);
                clearTimeout(this.timers.hide);
                if (this !== relatedTarget[0] && this.options.position.target === 'mouse' && ontoTooltip || this.options.hide.fixed && /mouse(out|leave|move)/.test(event.type) && (ontoTooltip || ontoTarget)) {
                    try {
                        event.preventDefault();
                        event.stopImmediatePropagation();
                    } catch (e) {}
                    return;
                }
                this.timers.hide = delay.call(this, function() {
                    this.toggle(FALSE, event);
                }, this.options.hide.delay, this);
            }
            function inactiveMethod(event) {
                if (this.tooltip.hasClass(CLASS_DISABLED) || !this.options.hide.inactive) {
                    return;
                }
                clearTimeout(this.timers.inactive);
                this.timers.inactive = delay.call(this, function() {
                    this.hide(event);
                }, this.options.hide.inactive);
            }
            function repositionMethod(event) {
                if (this.rendered && this.tooltip[0].offsetWidth > 0) {
                    this.reposition(event);
                }
            }
            PROTOTYPE._storeMouse = function(event) {
                (this.mouse = $.event.fix(event)).type = 'mousemove';
                return this;
            };
            PROTOTYPE._bind = function(targets, events, method, suffix, context) {
                if (!targets || !method || !events.length) {
                    return;
                }
                var ns = '.' + this._id + (suffix ? '-' + suffix : '');
                $(targets).bind((events.split ? events : events.join(ns + ' ')) + ns, $.proxy(method, context || this));
                return this;
            };
            PROTOTYPE._unbind = function(targets, suffix) {
                targets && $(targets).unbind('.' + this._id + (suffix ? '-' + suffix : ''));
                return this;
            };
            function delegate(selector, events, method) {
                $(document.body).delegate(selector, (events.split ? events : events.join('.' + NAMESPACE + ' ')) + '.' + NAMESPACE, function() {
                    var api = QTIP.api[$.attr(this, ATTR_ID)];
                    api && !api.disabled && method.apply(api, arguments);
                });
            }
            PROTOTYPE._trigger = function(type, args, event) {
                var callback = new $.Event('tooltip' + type);
                callback.originalEvent = event && $.extend({}, event) || this.cache.event || NULL;
                this.triggering = type;
                this.tooltip.trigger(callback, [ this ].concat(args || []));
                this.triggering = FALSE;
                return !callback.isDefaultPrevented();
            };
            PROTOTYPE._bindEvents = function(showEvents, hideEvents, showTargets, hideTargets, showCallback, hideCallback) {
                var similarTargets = showTargets.filter(hideTargets).add(hideTargets.filter(showTargets)), toggleEvents = [];
                if (similarTargets.length) {
                    $.each(hideEvents, function(i, type) {
                        var showIndex = $.inArray(type, showEvents);
                        showIndex > -1 && toggleEvents.push(showEvents.splice(showIndex, 1)[0]);
                    });
                    if (toggleEvents.length) {
                        this._bind(similarTargets, toggleEvents, function(event) {
                            var state = this.rendered ? this.tooltip[0].offsetWidth > 0 : false;
                            (state ? hideCallback : showCallback).call(this, event);
                        });
                        showTargets = showTargets.not(similarTargets);
                        hideTargets = hideTargets.not(similarTargets);
                    }
                }
                this._bind(showTargets, showEvents, showCallback);
                this._bind(hideTargets, hideEvents, hideCallback);
            };
            PROTOTYPE._assignInitialEvents = function(event) {
                var options = this.options, showTarget = options.show.target, hideTarget = options.hide.target, showEvents = options.show.event ? $.trim('' + options.show.event).split(' ') : [], hideEvents = options.hide.event ? $.trim('' + options.hide.event).split(' ') : [];
                this._bind(this.elements.target, [ 'remove', 'removeqtip' ], function() {
                    this.destroy(true);
                }, 'destroy');
                if (/mouse(over|enter)/i.test(options.show.event) && !/mouse(out|leave)/i.test(options.hide.event)) {
                    hideEvents.push('mouseleave');
                }
                this._bind(showTarget, 'mousemove', function(moveEvent) {
                    this._storeMouse(moveEvent);
                    this.cache.onTarget = TRUE;
                });
                function hoverIntent(hoverEvent) {
                    if (this.disabled || this.destroyed) {
                        return FALSE;
                    }
                    this.cache.event = hoverEvent && $.event.fix(hoverEvent);
                    this.cache.target = hoverEvent && $(hoverEvent.target);
                    clearTimeout(this.timers.show);
                    this.timers.show = delay.call(this, function() {
                        this.render((typeof hoverEvent === 'undefined' ? 'undefined' : _typeof(hoverEvent)) === 'object' || options.show.ready);
                    }, options.prerender ? 0 : options.show.delay);
                }
                this._bindEvents(showEvents, hideEvents, showTarget, hideTarget, hoverIntent, function() {
                    if (!this.timers) {
                        return FALSE;
                    }
                    clearTimeout(this.timers.show);
                });
                if (options.show.ready || options.prerender) {
                    hoverIntent.call(this, event);
                }
            };
            PROTOTYPE._assignEvents = function() {
                var self = this, options = this.options, posOptions = options.position, tooltip = this.tooltip, showTarget = options.show.target, hideTarget = options.hide.target, containerTarget = posOptions.container, viewportTarget = posOptions.viewport, documentTarget = $(document), windowTarget = $(window), showEvents = options.show.event ? $.trim('' + options.show.event).split(' ') : [], hideEvents = options.hide.event ? $.trim('' + options.hide.event).split(' ') : [];
                $.each(options.events, function(name, callback) {
                    self._bind(tooltip, name === 'toggle' ? [ 'tooltipshow', 'tooltiphide' ] : [ 'tooltip' + name ], callback, null, tooltip);
                });
                if (/mouse(out|leave)/i.test(options.hide.event) && options.hide.leave === 'window') {
                    this._bind(documentTarget, [ 'mouseout', 'blur' ], function(event) {
                        if (!/select|option/.test(event.target.nodeName) && !event.relatedTarget) {
                            this.hide(event);
                        }
                    });
                }
                if (options.hide.fixed) {
                    hideTarget = hideTarget.add(tooltip.addClass(CLASS_FIXED));
                } else if (/mouse(over|enter)/i.test(options.show.event)) {
                    this._bind(hideTarget, 'mouseleave', function() {
                        clearTimeout(this.timers.show);
                    });
                }
                if (('' + options.hide.event).indexOf('unfocus') > -1) {
                    this._bind(containerTarget.closest('html'), [ 'mousedown', 'touchstart' ], function(event) {
                        var elem = $(event.target), enabled = this.rendered && !this.tooltip.hasClass(CLASS_DISABLED) && this.tooltip[0].offsetWidth > 0, isAncestor = elem.parents(SELECTOR).filter(this.tooltip[0]).length > 0;
                        if (elem[0] !== this.target[0] && elem[0] !== this.tooltip[0] && !isAncestor && !this.target.has(elem[0]).length && enabled) {
                            this.hide(event);
                        }
                    });
                }
                if ('number' === typeof options.hide.inactive) {
                    this._bind(showTarget, 'qtip-' + this.id + '-inactive', inactiveMethod, 'inactive');
                    this._bind(hideTarget.add(tooltip), QTIP.inactiveEvents, inactiveMethod);
                }
                this._bindEvents(showEvents, hideEvents, showTarget, hideTarget, showMethod, hideMethod);
                this._bind(showTarget.add(tooltip), 'mousemove', function(event) {
                    if ('number' === typeof options.hide.distance) {
                        var origin = this.cache.origin || {}, limit = this.options.hide.distance, abs = Math.abs;
                        if (abs(event.pageX - origin.pageX) >= limit || abs(event.pageY - origin.pageY) >= limit) {
                            this.hide(event);
                        }
                    }
                    this._storeMouse(event);
                });
                if (posOptions.target === 'mouse') {
                    if (posOptions.adjust.mouse) {
                        if (options.hide.event) {
                            this._bind(showTarget, [ 'mouseenter', 'mouseleave' ], function(event) {
                                if (!this.cache) {
                                    return FALSE;
                                }
                                this.cache.onTarget = event.type === 'mouseenter';
                            });
                        }
                        this._bind(documentTarget, 'mousemove', function(event) {
                            if (this.rendered && this.cache.onTarget && !this.tooltip.hasClass(CLASS_DISABLED) && this.tooltip[0].offsetWidth > 0) {
                                this.reposition(event);
                            }
                        });
                    }
                }
                if (posOptions.adjust.resize || viewportTarget.length) {
                    this._bind($.event.special.resize ? viewportTarget : windowTarget, 'resize', repositionMethod);
                }
                if (posOptions.adjust.scroll) {
                    this._bind(windowTarget.add(posOptions.container), 'scroll', repositionMethod);
                }
            };
            PROTOTYPE._unassignEvents = function() {
                var options = this.options, showTargets = options.show.target, hideTargets = options.hide.target, targets = $.grep([ this.elements.target[0], this.rendered && this.tooltip[0], options.position.container[0], options.position.viewport[0], options.position.container.closest('html')[0], window, document ], function(i) {
                    return (typeof i === 'undefined' ? 'undefined' : _typeof(i)) === 'object';
                });
                if (showTargets && showTargets.toArray) {
                    targets = targets.concat(showTargets.toArray());
                }
                if (hideTargets && hideTargets.toArray) {
                    targets = targets.concat(hideTargets.toArray());
                }
                this._unbind(targets)._unbind(targets, 'destroy')._unbind(targets, 'inactive');
            };
            $(function() {
                delegate(SELECTOR, [ 'mouseenter', 'mouseleave' ], function(event) {
                    var state = event.type === 'mouseenter', tooltip = $(event.currentTarget), target = $(event.relatedTarget || event.target), options = this.options;
                    if (state) {
                        this.focus(event);
                        tooltip.hasClass(CLASS_FIXED) && !tooltip.hasClass(CLASS_DISABLED) && clearTimeout(this.timers.hide);
                    } else {
                        if (options.position.target === 'mouse' && options.position.adjust.mouse && options.hide.event && options.show.target && !target.closest(options.show.target[0]).length) {
                            this.hide(event);
                        }
                    }
                    tooltip.toggleClass(CLASS_HOVER, state);
                });
                delegate('[' + ATTR_ID + ']', INACTIVE_EVENTS, inactiveMethod);
            });
            function init(elem, id, opts) {
                var obj, posOptions, attr, config, title, docBody = $(document.body), newTarget = elem[0] === document ? docBody : elem, metadata = elem.metadata ? elem.metadata(opts.metadata) : NULL, metadata5 = opts.metadata.type === 'html5' && metadata ? metadata[opts.metadata.name] : NULL, html5 = elem.data(opts.metadata.name || 'qtipopts');
                try {
                    html5 = typeof html5 === 'string' ? $.parseJSON(html5) : html5;
                } catch (e) {}
                config = $.extend(TRUE, {}, QTIP.defaults, opts, (typeof html5 === 'undefined' ? 'undefined' : _typeof(html5)) === 'object' ? sanitizeOptions(html5) : NULL, sanitizeOptions(metadata5 || metadata));
                posOptions = config.position;
                config.id = id;
                if ('boolean' === typeof config.content.text) {
                    attr = elem.attr(config.content.attr);
                    if (config.content.attr !== FALSE && attr) {
                        config.content.text = attr;
                    } else {
                        return FALSE;
                    }
                }
                if (!posOptions.container.length) {
                    posOptions.container = docBody;
                }
                if (posOptions.target === FALSE) {
                    posOptions.target = newTarget;
                }
                if (config.show.target === FALSE) {
                    config.show.target = newTarget;
                }
                if (config.show.solo === TRUE) {
                    config.show.solo = posOptions.container.closest('body');
                }
                if (config.hide.target === FALSE) {
                    config.hide.target = newTarget;
                }
                if (config.position.viewport === TRUE) {
                    config.position.viewport = posOptions.container;
                }
                posOptions.container = posOptions.container.eq(0);
                posOptions.at = new CORNER(posOptions.at, TRUE);
                posOptions.my = new CORNER(posOptions.my);
                if (elem.data(NAMESPACE)) {
                    if (config.overwrite) {
                        elem.qtip('destroy', true);
                    } else if (config.overwrite === FALSE) {
                        return FALSE;
                    }
                }
                elem.attr(ATTR_HAS, id);
                if (config.suppress && (title = elem.attr('title'))) {
                    elem.removeAttr('title').attr(oldtitle, title).attr('title', '');
                }
                obj = new QTip(elem, config, id, !!attr);
                elem.data(NAMESPACE, obj);
                return obj;
            }
            QTIP = $.fn.qtip = function(options, notation, newValue) {
                var command = ('' + options).toLowerCase(), returned = NULL, args = $.makeArray(arguments).slice(1), event = args[args.length - 1], opts = this[0] ? $.data(this[0], NAMESPACE) : NULL;
                if (!arguments.length && opts || command === 'api') {
                    return opts;
                } else if ('string' === typeof options) {
                    this.each(function() {
                        var api = $.data(this, NAMESPACE);
                        if (!api) {
                            return TRUE;
                        }
                        if (event && event.timeStamp) {
                            api.cache.event = event;
                        }
                        if (notation && (command === 'option' || command === 'options')) {
                            if (newValue !== undefined || $.isPlainObject(notation)) {
                                api.set(notation, newValue);
                            } else {
                                returned = api.get(notation);
                                return FALSE;
                            }
                        } else if (api[command]) {
                            api[command].apply(api, args);
                        }
                    });
                    return returned !== NULL ? returned : this;
                } else if ('object' === (typeof options === 'undefined' ? 'undefined' : _typeof(options)) || !arguments.length) {
                    opts = sanitizeOptions($.extend(TRUE, {}, options));
                    return this.each(function(i) {
                        var api, id;
                        id = $.isArray(opts.id) ? opts.id[i] : opts.id;
                        id = !id || id === FALSE || id.length < 1 || QTIP.api[id] ? QTIP.nextid++ : id;
                        api = init($(this), id, opts);
                        if (api === FALSE) {
                            return TRUE;
                        } else {
                            QTIP.api[id] = api;
                        }
                        $.each(PLUGINS, function() {
                            if (this.initialize === 'initialize') {
                                this(api);
                            }
                        });
                        api._assignInitialEvents(event);
                    });
                }
            };
            $.qtip = QTip;
            QTIP.api = {};
            $.each({
                attr: function attr(_attr, val) {
                    if (this.length) {
                        var self = this[0], title = 'title', api = $.data(self, 'qtip');
                        if (_attr === title && api && api.options && 'object' === (typeof api === 'undefined' ? 'undefined' : _typeof(api)) && 'object' === _typeof(api.options) && api.options.suppress) {
                            if (arguments.length < 2) {
                                return $.attr(self, oldtitle);
                            }
                            if (api && api.options.content.attr === title && api.cache.attr) {
                                api.set('content.text', val);
                            }
                            return this.attr(oldtitle, val);
                        }
                    }
                    return $.fn['attr' + replaceSuffix].apply(this, arguments);
                },
                clone: function clone(keepData) {
                    var elems = $.fn['clone' + replaceSuffix].apply(this, arguments);
                    if (!keepData) {
                        elems.filter('[' + oldtitle + ']').attr('title', function() {
                            return $.attr(this, oldtitle);
                        }).removeAttr(oldtitle);
                    }
                    return elems;
                }
            }, function(name, func) {
                if (!func || $.fn[name + replaceSuffix]) {
                    return TRUE;
                }
                var old = $.fn[name + replaceSuffix] = $.fn[name];
                $.fn[name] = function() {
                    return func.apply(this, arguments) || old.apply(this, arguments);
                };
            });
            if (!$.ui) {
                $['cleanData' + replaceSuffix] = $.cleanData;
                $.cleanData = function(elems) {
                    for (var i = 0, elem; (elem = $(elems[i])).length; i++) {
                        if (elem.attr(ATTR_HAS)) {
                            try {
                                elem.triggerHandler('removeqtip');
                            } catch (e) {}
                        }
                    }
                    $['cleanData' + replaceSuffix].apply(this, arguments);
                };
            }
            QTIP.version = '3.0.3';
            QTIP.nextid = 0;
            QTIP.inactiveEvents = INACTIVE_EVENTS;
            QTIP.zindex = 15e3;
            QTIP.defaults = {
                prerender: FALSE,
                id: FALSE,
                overwrite: TRUE,
                suppress: TRUE,
                content: {
                    text: TRUE,
                    attr: 'title',
                    title: FALSE,
                    button: FALSE
                },
                position: {
                    my: 'top left',
                    at: 'bottom right',
                    target: FALSE,
                    container: FALSE,
                    viewport: FALSE,
                    adjust: {
                        x: 0,
                        y: 0,
                        mouse: TRUE,
                        scroll: TRUE,
                        resize: TRUE,
                        method: 'flipinvert flipinvert'
                    },
                    effect: function effect(api, pos) {
                        $(this).animate(pos, {
                            duration: 200,
                            queue: FALSE
                        });
                    }
                },
                show: {
                    target: FALSE,
                    event: 'mouseenter',
                    effect: TRUE,
                    delay: 90,
                    solo: FALSE,
                    ready: FALSE,
                    autofocus: FALSE
                },
                hide: {
                    target: FALSE,
                    event: 'mouseleave',
                    effect: FALSE,
                    delay: 0,
                    fixed: FALSE,
                    inactive: FALSE,
                    leave: 'window',
                    distance: FALSE
                },
                style: {
                    classes: '',
                    widget: FALSE,
                    width: FALSE,
                    height: FALSE,
                    def: TRUE
                },
                events: {
                    render: NULL,
                    move: NULL,
                    show: NULL,
                    hide: NULL,
                    toggle: NULL,
                    visible: NULL,
                    hidden: NULL,
                    focus: NULL,
                    blur: NULL
                }
            };
            var TIP, createVML, SCALE, PIXEL_RATIO, BACKING_STORE_RATIO, MARGIN = 'margin', BORDER = 'border', COLOR = 'color', BG_COLOR = 'background-color', TRANSPARENT = 'transparent', IMPORTANT = ' !important', HASCANVAS = !!document.createElement('canvas').getContext, INVALID = /rgba?\(0, 0, 0(, 0)?\)|transparent|#123456/i;
            function camel(s) {
                return s.charAt(0).toUpperCase() + s.slice(1);
            }
            var cssProps = {}, cssPrefixes = [ 'Webkit', 'O', 'Moz', 'ms' ];
            function vendorCss(elem, prop) {
                var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1), props = (prop + ' ' + cssPrefixes.join(ucProp + ' ') + ucProp).split(' '), cur, val, i = 0;
                if (cssProps[prop]) {
                    return elem.css(cssProps[prop]);
                }
                while (cur = props[i++]) {
                    if ((val = elem.css(cur)) !== undefined) {
                        cssProps[prop] = cur;
                        return val;
                    }
                }
            }
            function intCss(elem, prop) {
                return Math.ceil(parseFloat(vendorCss(elem, prop)));
            }
            if (!HASCANVAS) {
                createVML = function createVML(tag, props, style) {
                    return '<qtipvml:' + tag + ' xmlns="urn:schemas-microsoft.com:vml" class="qtip-vml" ' + (props || '') + ' style="behavior: url(#default#VML); ' + (style || '') + '" />';
                };
            } else {
                PIXEL_RATIO = window.devicePixelRatio || 1;
                BACKING_STORE_RATIO = function() {
                    var context = document.createElement('canvas').getContext('2d');
                    return context.backingStorePixelRatio || context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || 1;
                }();
                SCALE = PIXEL_RATIO / BACKING_STORE_RATIO;
            }
            function Tip(qtip, options) {
                this._ns = 'tip';
                this.options = options;
                this.offset = options.offset;
                this.size = [ options.width, options.height ];
                this.qtip = qtip;
                this.init(qtip);
            }
            $.extend(Tip.prototype, {
                init: function init(qtip) {
                    var context, tip;
                    tip = this.element = qtip.elements.tip = $('<div />', {
                        class: NAMESPACE + '-tip'
                    }).prependTo(qtip.tooltip);
                    if (HASCANVAS) {
                        context = $('<canvas />').appendTo(this.element)[0].getContext('2d');
                        context.lineJoin = 'miter';
                        context.miterLimit = 1e5;
                        context.save();
                    } else {
                        context = createVML('shape', 'coordorigin="0,0"', 'position:absolute;');
                        this.element.html(context + context);
                        qtip._bind($('*', tip).add(tip), [ 'click', 'mousedown' ], function(event) {
                            event.stopPropagation();
                        }, this._ns);
                    }
                    qtip._bind(qtip.tooltip, 'tooltipmove', this.reposition, this._ns, this);
                    this.create();
                },
                _swapDimensions: function _swapDimensions() {
                    this.size[0] = this.options.height;
                    this.size[1] = this.options.width;
                },
                _resetDimensions: function _resetDimensions() {
                    this.size[0] = this.options.width;
                    this.size[1] = this.options.height;
                },
                _useTitle: function _useTitle(corner) {
                    var titlebar = this.qtip.elements.titlebar;
                    return titlebar && (corner.y === TOP || corner.y === CENTER && this.element.position().top + this.size[1] / 2 + this.options.offset < titlebar.outerHeight(TRUE));
                },
                _parseCorner: function _parseCorner(corner) {
                    var my = this.qtip.options.position.my;
                    if (corner === FALSE || my === FALSE) {
                        corner = FALSE;
                    } else if (corner === TRUE) {
                        corner = new CORNER(my.string());
                    } else if (!corner.string) {
                        corner = new CORNER(corner);
                        corner.fixed = TRUE;
                    }
                    return corner;
                },
                _parseWidth: function _parseWidth(corner, side, use) {
                    var elements = this.qtip.elements, prop = BORDER + camel(side) + 'Width';
                    return (use ? intCss(use, prop) : intCss(elements.content, prop) || intCss(this._useTitle(corner) && elements.titlebar || elements.content, prop) || intCss(elements.tooltip, prop)) || 0;
                },
                _parseRadius: function _parseRadius(corner) {
                    var elements = this.qtip.elements, prop = BORDER + camel(corner.y) + camel(corner.x) + 'Radius';
                    return BROWSER.ie < 9 ? 0 : intCss(this._useTitle(corner) && elements.titlebar || elements.content, prop) || intCss(elements.tooltip, prop) || 0;
                },
                _invalidColour: function _invalidColour(elem, prop, compare) {
                    var val = elem.css(prop);
                    return !val || compare && val === elem.css(compare) || INVALID.test(val) ? FALSE : val;
                },
                _parseColours: function _parseColours(corner) {
                    var elements = this.qtip.elements, tip = this.element.css('cssText', ''), borderSide = BORDER + camel(corner[corner.precedance]) + camel(COLOR), colorElem = this._useTitle(corner) && elements.titlebar || elements.content, css = this._invalidColour, color = [];
                    color[0] = css(tip, BG_COLOR) || css(colorElem, BG_COLOR) || css(elements.content, BG_COLOR) || css(elements.tooltip, BG_COLOR) || tip.css(BG_COLOR);
                    color[1] = css(tip, borderSide, COLOR) || css(colorElem, borderSide, COLOR) || css(elements.content, borderSide, COLOR) || css(elements.tooltip, borderSide, COLOR) || elements.tooltip.css(borderSide);
                    $('*', tip).add(tip).css('cssText', BG_COLOR + ':' + TRANSPARENT + IMPORTANT + ';' + BORDER + ':0' + IMPORTANT + ';');
                    return color;
                },
                _calculateSize: function _calculateSize(corner) {
                    var y = corner.precedance === Y, width = this.options.width, height = this.options.height, isCenter = corner.abbrev() === 'c', base = (y ? width : height) * (isCenter ? .5 : 1), pow = Math.pow, round = Math.round, bigHyp, ratio, result, smallHyp = Math.sqrt(pow(base, 2) + pow(height, 2)), hyp = [ this.border / base * smallHyp, this.border / height * smallHyp ];
                    hyp[2] = Math.sqrt(pow(hyp[0], 2) - pow(this.border, 2));
                    hyp[3] = Math.sqrt(pow(hyp[1], 2) - pow(this.border, 2));
                    bigHyp = smallHyp + hyp[2] + hyp[3] + (isCenter ? 0 : hyp[0]);
                    ratio = bigHyp / smallHyp;
                    result = [ round(ratio * width), round(ratio * height) ];
                    return y ? result : result.reverse();
                },
                _calculateTip: function _calculateTip(corner, size, scale) {
                    scale = scale || 1;
                    size = size || this.size;
                    var width = size[0] * scale, height = size[1] * scale, width2 = Math.ceil(width / 2), height2 = Math.ceil(height / 2), tips = {
                        br: [ 0, 0, width, height, width, 0 ],
                        bl: [ 0, 0, width, 0, 0, height ],
                        tr: [ 0, height, width, 0, width, height ],
                        tl: [ 0, 0, 0, height, width, height ],
                        tc: [ 0, height, width2, 0, width, height ],
                        bc: [ 0, 0, width, 0, width2, height ],
                        rc: [ 0, 0, width, height2, 0, height ],
                        lc: [ width, 0, width, height, 0, height2 ]
                    };
                    tips.lt = tips.br;
                    tips.rt = tips.bl;
                    tips.lb = tips.tr;
                    tips.rb = tips.tl;
                    return tips[corner.abbrev()];
                },
                _drawCoords: function _drawCoords(context, coords) {
                    context.beginPath();
                    context.moveTo(coords[0], coords[1]);
                    context.lineTo(coords[2], coords[3]);
                    context.lineTo(coords[4], coords[5]);
                    context.closePath();
                },
                create: function create() {
                    var c = this.corner = (HASCANVAS || BROWSER.ie) && this._parseCorner(this.options.corner);
                    this.enabled = !!this.corner && this.corner.abbrev() !== 'c';
                    if (this.enabled) {
                        this.qtip.cache.corner = c.clone();
                        this.update();
                    }
                    this.element.toggle(this.enabled);
                    return this.corner;
                },
                update: function update(corner, position) {
                    if (!this.enabled) {
                        return this;
                    }
                    var elements = this.qtip.elements, tip = this.element, inner = tip.children(), options = this.options, curSize = this.size, mimic = options.mimic, round = Math.round, color, precedance, context, coords, bigCoords, translate, newSize, border;
                    if (!corner) {
                        corner = this.qtip.cache.corner || this.corner;
                    }
                    if (mimic === FALSE) {
                        mimic = corner;
                    } else {
                        mimic = new CORNER(mimic);
                        mimic.precedance = corner.precedance;
                        if (mimic.x === 'inherit') {
                            mimic.x = corner.x;
                        } else if (mimic.y === 'inherit') {
                            mimic.y = corner.y;
                        } else if (mimic.x === mimic.y) {
                            mimic[corner.precedance] = corner[corner.precedance];
                        }
                    }
                    precedance = mimic.precedance;
                    if (corner.precedance === X) {
                        this._swapDimensions();
                    } else {
                        this._resetDimensions();
                    }
                    color = this.color = this._parseColours(corner);
                    if (color[1] !== TRANSPARENT) {
                        border = this.border = this._parseWidth(corner, corner[corner.precedance]);
                        if (options.border && border < 1 && !INVALID.test(color[1])) {
                            color[0] = color[1];
                        }
                        this.border = border = options.border !== TRUE ? options.border : border;
                    } else {
                        this.border = border = 0;
                    }
                    newSize = this.size = this._calculateSize(corner);
                    tip.css({
                        width: newSize[0],
                        height: newSize[1],
                        lineHeight: newSize[1] + 'px'
                    });
                    if (corner.precedance === Y) {
                        translate = [ round(mimic.x === LEFT ? border : mimic.x === RIGHT ? newSize[0] - curSize[0] - border : (newSize[0] - curSize[0]) / 2), round(mimic.y === TOP ? newSize[1] - curSize[1] : 0) ];
                    } else {
                        translate = [ round(mimic.x === LEFT ? newSize[0] - curSize[0] : 0), round(mimic.y === TOP ? border : mimic.y === BOTTOM ? newSize[1] - curSize[1] - border : (newSize[1] - curSize[1]) / 2) ];
                    }
                    if (HASCANVAS) {
                        context = inner[0].getContext('2d');
                        context.restore();
                        context.save();
                        context.clearRect(0, 0, 6e3, 6e3);
                        coords = this._calculateTip(mimic, curSize, SCALE);
                        bigCoords = this._calculateTip(mimic, this.size, SCALE);
                        inner.attr(WIDTH, newSize[0] * SCALE).attr(HEIGHT, newSize[1] * SCALE);
                        inner.css(WIDTH, newSize[0]).css(HEIGHT, newSize[1]);
                        this._drawCoords(context, bigCoords);
                        context.fillStyle = color[1];
                        context.fill();
                        context.translate(translate[0] * SCALE, translate[1] * SCALE);
                        this._drawCoords(context, coords);
                        context.fillStyle = color[0];
                        context.fill();
                    } else {
                        coords = this._calculateTip(mimic);
                        coords = 'm' + coords[0] + ',' + coords[1] + ' l' + coords[2] + ',' + coords[3] + ' ' + coords[4] + ',' + coords[5] + ' xe';
                        translate[2] = border && /^(r|b)/i.test(corner.string()) ? BROWSER.ie === 8 ? 2 : 1 : 0;
                        inner.css({
                            coordsize: newSize[0] + border + ' ' + newSize[1] + border,
                            antialias: '' + (mimic.string().indexOf(CENTER) > -1),
                            left: translate[0] - translate[2] * Number(precedance === X),
                            top: translate[1] - translate[2] * Number(precedance === Y),
                            width: newSize[0] + border,
                            height: newSize[1] + border
                        }).each(function(i) {
                            var $this = $(this);
                            $this[$this.prop ? 'prop' : 'attr']({
                                coordsize: newSize[0] + border + ' ' + newSize[1] + border,
                                path: coords,
                                fillcolor: color[0],
                                filled: !!i,
                                stroked: !i
                            }).toggle(!!(border || i));
                            !i && $this.html(createVML('stroke', 'weight="' + border * 2 + 'px" color="' + color[1] + '" miterlimit="1000" joinstyle="miter"'));
                        });
                    }
                    window.opera && setTimeout(function() {
                        elements.tip.css({
                            display: 'inline-block',
                            visibility: 'visible'
                        });
                    }, 1);
                    if (position !== FALSE) {
                        this.calculate(corner, newSize);
                    }
                },
                calculate: function calculate(corner, size) {
                    if (!this.enabled) {
                        return FALSE;
                    }
                    var self = this, elements = this.qtip.elements, tip = this.element, userOffset = this.options.offset, position = {}, precedance, corners;
                    corner = corner || this.corner;
                    precedance = corner.precedance;
                    size = size || this._calculateSize(corner);
                    corners = [ corner.x, corner.y ];
                    if (precedance === X) {
                        corners.reverse();
                    }
                    $.each(corners, function(i, side) {
                        var b, bc, br;
                        if (side === CENTER) {
                            b = precedance === Y ? LEFT : TOP;
                            position[b] = '50%';
                            position[MARGIN + '-' + b] = -Math.round(size[precedance === Y ? 0 : 1] / 2) + userOffset;
                        } else {
                            b = self._parseWidth(corner, side, elements.tooltip);
                            bc = self._parseWidth(corner, side, elements.content);
                            br = self._parseRadius(corner);
                            position[side] = Math.max(-self.border, i ? bc : userOffset + (br > b ? br : -b));
                        }
                    });
                    position[corner[precedance]] -= size[precedance === X ? 0 : 1];
                    tip.css({
                        margin: '',
                        top: '',
                        bottom: '',
                        left: '',
                        right: ''
                    }).css(position);
                    return position;
                },
                reposition: function reposition(event, api, pos) {
                    if (!this.enabled) {
                        return;
                    }
                    var cache = api.cache, newCorner = this.corner.clone(), adjust = pos.adjusted, method = api.options.position.adjust.method.split(' '), horizontal = method[0], vertical = method[1] || method[0], shift = {
                        left: FALSE,
                        top: FALSE,
                        x: 0,
                        y: 0
                    }, offset, css = {}, props;
                    function shiftflip(direction, precedance, popposite, side, opposite) {
                        if (direction === SHIFT && newCorner.precedance === precedance && adjust[side] && newCorner[popposite] !== CENTER) {
                            newCorner.precedance = newCorner.precedance === X ? Y : X;
                        } else if (direction !== SHIFT && adjust[side]) {
                            newCorner[precedance] = newCorner[precedance] === CENTER ? adjust[side] > 0 ? side : opposite : newCorner[precedance] === side ? opposite : side;
                        }
                    }
                    function shiftonly(xy, side, opposite) {
                        if (newCorner[xy] === CENTER) {
                            css[MARGIN + '-' + side] = shift[xy] = offset[MARGIN + '-' + side] - adjust[side];
                        } else {
                            props = offset[opposite] !== undefined ? [ adjust[side], -offset[side] ] : [ -adjust[side], offset[side] ];
                            if ((shift[xy] = Math.max(props[0], props[1])) > props[0]) {
                                pos[side] -= adjust[side];
                                shift[side] = FALSE;
                            }
                            css[offset[opposite] !== undefined ? opposite : side] = shift[xy];
                        }
                    }
                    if (this.corner.fixed !== TRUE) {
                        shiftflip(horizontal, X, Y, LEFT, RIGHT);
                        shiftflip(vertical, Y, X, TOP, BOTTOM);
                        if (newCorner.string() !== cache.corner.string() || cache.cornerTop !== adjust.top || cache.cornerLeft !== adjust.left) {
                            this.update(newCorner, FALSE);
                        }
                    }
                    offset = this.calculate(newCorner);
                    if (offset.right !== undefined) {
                        offset.left = -offset.right;
                    }
                    if (offset.bottom !== undefined) {
                        offset.top = -offset.bottom;
                    }
                    offset.user = this.offset;
                    shift.left = horizontal === SHIFT && !!adjust.left;
                    if (shift.left) {
                        shiftonly(X, LEFT, RIGHT);
                    }
                    shift.top = vertical === SHIFT && !!adjust.top;
                    if (shift.top) {
                        shiftonly(Y, TOP, BOTTOM);
                    }
                    this.element.css(css).toggle(!(shift.x && shift.y || newCorner.x === CENTER && shift.y || newCorner.y === CENTER && shift.x));
                    pos.left -= offset.left.charAt ? offset.user : horizontal !== SHIFT || shift.top || !shift.left && !shift.top ? offset.left + this.border : 0;
                    pos.top -= offset.top.charAt ? offset.user : vertical !== SHIFT || shift.left || !shift.left && !shift.top ? offset.top + this.border : 0;
                    cache.cornerLeft = adjust.left;
                    cache.cornerTop = adjust.top;
                    cache.corner = newCorner.clone();
                },
                destroy: function destroy() {
                    this.qtip._unbind(this.qtip.tooltip, this._ns);
                    if (this.qtip.elements.tip) {
                        this.qtip.elements.tip.find('*').remove().end().remove();
                    }
                }
            });
            TIP = PLUGINS.tip = function(api) {
                return new Tip(api, api.options.style.tip);
            };
            TIP.initialize = 'render';
            TIP.sanitize = function(options) {
                if (options.style && 'tip' in options.style) {
                    var opts = options.style.tip;
                    if ((typeof opts === 'undefined' ? 'undefined' : _typeof(opts)) !== 'object') {
                        opts = options.style.tip = {
                            corner: opts
                        };
                    }
                    if (!/string|boolean/i.test(_typeof(opts.corner))) {
                        opts.corner = TRUE;
                    }
                }
            };
            CHECKS.tip = {
                '^position.my|style.tip.(corner|mimic|border)$': function positionMyStyleTipCornerMimicBorder$() {
                    this.create();
                    this.qtip.reposition();
                },
                '^style.tip.(height|width)$': function styleTipHeightWidth$(obj) {
                    this.size = [ obj.width, obj.height ];
                    this.update();
                    this.qtip.reposition();
                },
                '^content.title|style.(classes|widget)$': function contentTitleStyleClassesWidget$() {
                    this.update();
                }
            };
            $.extend(TRUE, QTIP.defaults, {
                style: {
                    tip: {
                        corner: TRUE,
                        mimic: FALSE,
                        width: 6,
                        height: 6,
                        border: TRUE,
                        offset: 0
                    }
                }
            });
        });
    })(window, document);
}, , , function(module, exports, __webpack_require__) {
    'use strict';
    var _domUtil = __webpack_require__(2);
    var _domUtil2 = _interopRequireDefault(_domUtil);
    var _util = __webpack_require__(0);
    var _util2 = _interopRequireDefault(_util);
    var _keyUtil = __webpack_require__(9);
    var _keyUtil2 = _interopRequireDefault(_keyUtil);
    var _urlUtil = __webpack_require__(15);
    var _urlUtil2 = _interopRequireDefault(_urlUtil);
    var _dateUtil = __webpack_require__(8);
    var _dateUtil2 = _interopRequireDefault(_dateUtil);
    var _browser = __webpack_require__(1);
    var _browser2 = _interopRequireDefault(_browser);
    var _moment = __webpack_require__(4);
    var _moment2 = _interopRequireDefault(_moment);
    var _xid = __webpack_require__(3);
    var _xid2 = _interopRequireDefault(_xid);
    var _sessionsPanel = __webpack_require__(13);
    var _sessionsPanel2 = _interopRequireDefault(_sessionsPanel);
    var _jquery = __webpack_require__(6);
    var _jquery2 = _interopRequireDefault(_jquery);
    __webpack_require__(18);
    var _FileSaver = __webpack_require__(17);
    var _FileSaver2 = _interopRequireDefault(_FileSaver);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    try {
        var isFileAPISupported = window.File && window.FileReader && window.FileList && window.Blob && !!new Blob();
    } catch (ex) {}
    var clickedLearnMore, exportStatusTimer, techDetailsCopyStatusTimer, importedNormalizedSession, thisImportedFormat, importedSessionInfos, sessionNameInput_SessionSave_Action, allowUndo, undoAccessHTML = '<a id="undoAccess">Undo</a>';
    var sp = !document.URL.length ? new _sessionsPanel2.default() : null;
    var bg, db, app, q, s, us;
    var dateFormatSampleDate;
    var thisUILayoutManager;
    var tabIdentifier = null;
    var isProcessGlobalKeydownAllowed = true;
    var renderedSessionWindows;
    var renderedSessionId;
    var renderedSessionType;
    var renderedSessionRenderDateTime;
    var renderedCombinedSession_SessionCount;
    var renderedSessionGid;
    var renderedSessionDesc;
    var timer_SessionTileInterval;
    var timer_DelayHideActionStatus;
    var _searchTimer = void 0;
    var resizePanelActive = false;
    var _searchTerms = '', _searchTermRegEx = void 0, _searchShowAll = void 0, _searchSelectFirstResult = void 0;
    var ignoreUserInput = false;
    var currentSearchRequest_Global = null;
    var evaluateImportInputDelay;
    var hideDialogPostHandler = null;
    var dialogFooterButtonAction_Right;
    var dialogFooterButtonAction_Middle;
    var dialogFooterButtonAction_Left;
    window.showOptionsDialogAndSelectThisTab = showOptionsDialogAndSelectThisTab;
    init();
    function debug() {
        app.setActiveAppMode('debug');
    }
    function nodebug() {
        app.setActiveAppMode('');
    }
    function init() {
        bg = _browser2.default.getBackgroundAPI();
        if (bg && bg.isAppReady()) {
            s = bg.getSettingsFront();
            us = bg.getUserSettingsFront();
            db = bg.getDB();
            app = bg.getApp();
            q = _domUtil2.default.makeQueryFunction();
            setFontOverride();
            tabIdentifier = (0, _xid2.default)();
            var GA = bg.getGA();
            window.ga = GA.ga;
            window.ga_segment = GA.ga_segment;
            ga('send', 'pageview', '/main.html');
            q('searchBox').value = '';
            window.addEventListener('resize', closeAllMenus);
            setControlState_ShowHideUrls(us('sessionRender_RenderSessionURL'));
            if (_domUtil2.default.os === 'MacOS') q('splitter').classList.add('splitter_mac');
            initializePreviousSessionQueueSizeSettingDropdown();
            thisUILayoutManager = new uiLayoutManager(us('sessionSummaryRender_PanelWidth'), q('mainPanel'), q('applicationStatus'), q('splitter'), q('searchBox'), q('navigationPanel'), q('saveButton'), q('restoreButton'), q('actionsMenuButton'), q('sessionTitle'), q('btnGroup_MergeSave'));
            q('appPanel').style.display = '';
            app.countStat_SBStart();
            if (window.location.href === _browser2.default.getURL('main.html') + '#o') {
                showDialog('dialogBody_Options');
                history.replaceState(null, '', 'main.html');
            } else {
                if (!(0, _jquery2.default)('#btnDonate').length) {
                    appStatusVisible('Contact&nbsp;&nbsp;<a href="mailto:support@sessionbuddy.com?Subject=Session%20Buddy%20Error%205417" style="font-weight:300;">support@sessionbuddy.com</a>', 2, -1);
                    return;
                } else {
                    var versionMessage = '3.4.8';
                    if (s('suppressOneTimeStartupMessageForLongTermUser')) {
                        db.getSetting('message-v36-released-close-count', function(messageV4CloseCount) {
                            messageV4CloseCount = parseInt(messageV4CloseCount);
                            if (!messageV4CloseCount) {
                                setTimeout(showSBV4Message, 4e3);
                            }
                        });
                        if (bg.getPHStatus_Between()) {
                            db.getSetting('seqInterpolation2', function(value_SBStartStat) {
                                if (value_SBStartStat && value_SBStartStat > 40) {
                                    db.getSetting('ph-messsage-close-count', function(phMessageCloseCount) {
                                        phMessageCloseCount = parseInt(phMessageCloseCount);
                                    });
                                }
                            });
                        }
                    } else {
                        db.setSetting('message-v36-released-close-count', 99);
                        ga('send', 'event', 'application', 'new_user', undefined, undefined, {
                            nonInteraction: 1
                        });
                        s('suppressOneTimeStartupMessageForLongTermUser', true);
                        s('versionMessageReceived', versionMessage);
                    }
                }
            }
            addEventListeners();
            (0, _jquery2.default)('#btnHideURLs').qtip({
                content: {
                    text: 'Hide tab URLs'
                },
                position: {
                    my: 'top center',
                    at: 'bottom center',
                    adjust: {
                        y: 23
                    }
                },
                show: {
                    delay: 500
                },
                style: {
                    tip: {
                        corner: true,
                        width: 12
                    }
                }
            });
            (0, _jquery2.default)('#btnShowURLs').qtip({
                content: {
                    text: 'Show tab URLs'
                },
                position: {
                    my: 'top center',
                    at: 'bottom center',
                    adjust: {
                        y: 23
                    }
                },
                show: {
                    delay: 500
                },
                style: {
                    tip: {
                        corner: true,
                        width: 12
                    }
                }
            });
            (0, _jquery2.default)('#actionsMenuButton').qtip({
                content: {
                    text: 'More actions'
                },
                position: {
                    my: 'bottom right',
                    at: 'top center',
                    adjust: {
                        x: 7,
                        y: -22
                    }
                },
                show: {
                    delay: 1e3
                },
                style: {
                    tip: {
                        corner: true,
                        mimic: 'bottom center',
                        offset: 5,
                        width: 12
                    }
                }
            });
            setTimeout(finalizeTabInitialization, 5);
        } else {
            setTimeout(init, 1e3);
        }
    }
    function showSBV4Message() {
        var bigMessage = q('big_message');
        if (bigMessage) {
            (0, _jquery2.default)(bigMessage).fadeIn(800);
        } else {
            bigMessage = document.createElement('div');
            bigMessage.id = 'big_message';
            var bigMessageBody = document.createElement('div');
            bigMessageBody.className = 'big_message_body';
            bigMessageBody.innerHTML = 'Session Buddy has<br>been updated';
            bigMessageBody.addEventListener('click', navToV4Post);
            bigMessage.appendChild(bigMessageBody);
            var bigMessageContent = document.createElement('div');
            bigMessageContent.className = 'big_message_content';
            bigMessageContent.innerHTML = 'Thanks to everyone who has donated!';
            bigMessageBody.appendChild(bigMessageContent);
            var bigMessageFooter = document.createElement('div');
            bigMessageFooter.className = 'big_message_footer';
            bigMessage.appendChild(bigMessageFooter);
            appendFooterBox(bigMessageFooter, 'Learn more', navToV4Post);
            var bigMessageClose = document.createElement('div');
            bigMessageClose.className = 'big_message_close';
            bigMessageClose.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                (0, _jquery2.default)('#big_message').fadeOut(150);
                db.getSetting('message-v36-released-close-count', function(closeCount) {
                    db.setSetting('message-v36-released-close-count', (closeCount || 0) + 1);
                });
            });
            bigMessage.appendChild(bigMessageClose);
            document.body.appendChild(bigMessage);
        }
        function appendFooterBox(parent, label, action) {
            var footerBox = document.createElement('div');
            footerBox.className = 'big_message_footer_box';
            footerBox.innerText = label;
            footerBox.addEventListener('click', action);
            parent.appendChild(footerBox);
        }
        function navToV4Post() {
            _browser2.default.openTab({
                url: 'https://sessionbuddy.com/june-2017-release/',
                active: true
            }, {
                focused: true
            });
            (0, _jquery2.default)('#big_message').hide();
            db.setSetting('message-v36-released-close-count', 99);
        }
    }
    function addEventListeners() {
        document.body.addEventListener('mousedown', closeAllMenus);
        document.body.addEventListener('mousemove', resizePanels);
        document.body.addEventListener('mouseup', finalizePanelResize);
        document.body.addEventListener('keydown', processGlobalKeydown);
        document.body.addEventListener('keyup', processGlobalKeyup);
        var dropZone = q('sessionImportText');
        dropZone.addEventListener('dragover', sessionImportText_handleDragOver);
        dropZone.addEventListener('dragenter', sessionImportText_handleDragEnter);
        dropZone.addEventListener('dragleave', sessionImportText_handleDragLeave);
        dropZone.addEventListener('drop', handleImportFileSelect);
        function sessionImportText_handleDragOver(e) {
            e.stopPropagation();
            e.preventDefault();
            e.dataTransfer.dropEffect = 'copy';
        }
        function sessionImportText_handleDragEnter(e) {
            (0, _jquery2.default)('#sessionImportText').addClass('sessionImportText-dragover');
            e.stopPropagation();
            e.preventDefault();
        }
        function sessionImportText_handleDragLeave(e) {
            (0, _jquery2.default)('#sessionImportText').removeClass('sessionImportText-dragover');
            e.stopPropagation();
            e.preventDefault();
        }
        (0, _jquery2.default)('#applicationStatus,#dialogFooter').delegate('.downloadsFolder', 'click', function() {
            _browser2.default.openTab({
                url: 'chrome://downloads/',
                active: true
            });
        });
        function scrollIntoViewAndRender(inIsRequestHonored, inSelectedSessionInfo_Head, inSelectedSessionInfos_All, inOptimizeSessionCombine, inKeepActionStatusOpen) {
            sp.getSessionSummaryElementByIdAndType(inSelectedSessionInfo_Head.id, inSelectedSessionInfo_Head.type).scrollIntoViewIfNeeded(false);
            if (inIsRequestHonored) {
                renderSession(inSelectedSessionInfo_Head, inSelectedSessionInfos_All, postSessionRender, inOptimizeSessionCombine, inKeepActionStatusOpen);
            }
        }
        (0, _jquery2.default)(window).on('popstate', function(e) {
            if (e.originalEvent) {
                e = e.originalEvent;
            }
            if (e.state === null) {
                sp.getSessionTileFromUrl(function(el, id, type) {
                    if (el) {
                        sp.requestSelectSessionSummaryByIdAndType(id, type, 'single', scrollIntoViewAndRender, 'replace');
                    } else {
                        sp.requestSelectSessionSummary_FirstInList(scrollIntoViewAndRender, false, 'single', 'replace');
                    }
                });
            } else if (e.state.type === 'selection') {
                sp.requestSelectSessionSummariesBySessionInfos(e.state.data.head, e.state.data.all, function(inIsRequestHonored, inSelectedSessionInfo_Head, inSelectedSessionInfos_All, inOptimizeSessionCombine, inKeepActionStatusOpen) {
                    if (inIsRequestHonored) {
                        sp.getSessionSummaryElementByIdAndType(inSelectedSessionInfo_Head.id, inSelectedSessionInfo_Head.type).scrollIntoViewIfNeeded(false);
                        renderSession(inSelectedSessionInfo_Head, inSelectedSessionInfos_All, postSessionRender, inOptimizeSessionCombine, inKeepActionStatusOpen);
                    } else {
                        sp.requestSelectSessionSummary_FirstInList(scrollIntoViewAndRender, false, 'single', 'title');
                    }
                }, 'title');
            }
        });
        (0, _jquery2.default)('#applicationStatusInner').delegate('#undoAccess', 'click', function() {
            bg.executeUndoAction(tabIdentifier);
        }).delegate('#backupNow', 'click', function() {
            appStatusVisible(false);
            createBackupFile(!clickedLearnMore);
        }).delegate('#backupLearnMore', 'click', function() {
            clickedLearnMore = true;
            window.open('https://sessionbuddy.com/backup-restore/', '_blank');
        }).delegate('#rateActionRateNow', 'click', function() {
            appStatusVisible(false);
            window.open('https://chrome.google.com/webstore/detail/edacconmaakjimmfgnblocblbcdcpbko/reviews', '_blank');
            suppressRatingSolicitation();
        }).delegate('#rateActionRateLater', 'click', function() {
            appStatusVisible(false);
            db.getSetting('seqInterpolation2', function(value_SBStartStat) {
                db.setSetting('message131', value_SBStartStat + 30);
            });
        }).delegate('#rateActionAlreadyDid', 'click', function() {
            appStatusVisible(false);
            suppressRatingSolicitation();
        });
        q('optDateDisplayTypeStandard').addEventListener('click', setControlStates_OptionsDialog);
        q('optDateDisplayTypeCustom').addEventListener('click', setControlStates_OptionsDialog);
        q('optDateDisplayTypeRelative').addEventListener('click', setControlStates_OptionsDialog);
        q('txtCustomDateFormat').addEventListener('keyup', setControlStates_OptionsDialog);
        q('searchShowAllButton').addEventListener('click', function(e) {
            _searchShowAll = !_searchShowAll;
            rerenderRenderedSession();
        });
        q('searchBox').addEventListener('keyup', function(e) {
            var val = e.currentTarget.value;
            if (e.keyCode === 27) {
                clearSearch();
            } else if (e.keyCode === 13) {
                doSearch(val, val !== '', true);
            } else if (_keyUtil2.default.isKeyboardEventContentModifying(e)) {
                if (val) {
                    clearTimeout(_searchTimer);
                    _searchTimer = setTimeout(doSearch, 100, val);
                } else {
                    doSearch('');
                }
            }
            e.stopPropagation();
        });
        q('searchBox').addEventListener('keydown', function(e) {
            return e.stopPropagation();
        });
        q('searchCancelImg').addEventListener('click', function(e) {
            clearSearch();
            q('searchBox').focus();
            e.stopPropagation();
        });
        q('sessionsPanelOuter').addEventListener('mousedown', function(e) {
            q('sessionsPanel').focus();
            e.preventDefault();
        });
        q('sessionsPanelContainer').addEventListener('scroll', function() {
            scrollContent(this, q('spShadowTop'));
        });
        q('sessionsPanelContainer').addEventListener('mouseover', function() {
            this.setAttribute('scrolling', '5');
        });
        q('sessionsPanelContainer').addEventListener('mouseout', function(e) {
            if (!_domUtil2.default.isChildOf(document.elementFromPoint(e.x, e.y), q('sessionsPanelOuter'))) {
                hideNavPaneScrollbar();
            }
        });
        q('mainPanel').addEventListener('mouseover', hideNavPaneScrollbar);
        q('navigationPanelHeader').addEventListener('mouseover', hideNavPaneScrollbar);
        q('splitter').addEventListener('mousedown', initializePanelResize);
        q('appMessageCloseImg').addEventListener('click', function() {
            appStatusVisible(false);
        });
        q('btnDonate').addEventListener('mousedown', function() {
            processSbButtonMousedown(this);
        });
        q('btnDonate').addEventListener('mouseover', function() {
            processSbButtonMouseover(this);
        });
        q('btnDonate').addEventListener('mouseout', function() {
            processSbButtonMouseout(this);
        });
        q('btnDonate').addEventListener('click', function() {
            processSbButtonOnclick(this, navToDonatePage);
        });
        (0, _jquery2.default)('#btnHideURLs').on('mousedown', function() {
            (0, _jquery2.default)(this).qtip('hide');
            (0, _jquery2.default)(this).qtip('disable');
            processSbButtonMousedown(this, saveShowHideUrlsAndUpdateUI, false);
        });
        (0, _jquery2.default)('#btnHideURLs').on('mouseover', function() {
            (0, _jquery2.default)(this).qtip('enable');
            processSbButtonMouseover(this);
        });
        q('btnHideURLs').addEventListener('mouseup', function() {
            processSbButtonMouseup(this);
        });
        q('btnHideURLs').addEventListener('mouseout', function() {
            processSbButtonMouseout(this);
        });
        (0, _jquery2.default)('#btnShowURLs').on('mousedown', function() {
            (0, _jquery2.default)(this).qtip('hide');
            (0, _jquery2.default)(this).qtip('disable');
            processSbButtonMousedown(this, saveShowHideUrlsAndUpdateUI, true);
        });
        (0, _jquery2.default)('#btnShowURLs').on('mouseover', function() {
            (0, _jquery2.default)(this).qtip('enable');
            processSbButtonMouseover(this);
        });
        q('btnShowURLs').addEventListener('mouseup', function() {
            processSbButtonMouseup(this);
        });
        q('btnShowURLs').addEventListener('mouseout', function() {
            processSbButtonMouseout(this);
        });
        q('btnConfigure').addEventListener('mousedown', function(e) {
            processSbButtonMousedown(this);
            e.preventDefault();
            e.stopPropagation();
            return false;
        });
        q('btnConfigure').addEventListener('mouseover', function() {
            processSbButtonMouseover(this);
        });
        q('btnConfigure').addEventListener('mouseout', function() {
            processSbButtonMouseout(this);
        });
        q('btnConfigure').addEventListener('click', function(e) {
            processSbMenuButtonOnclick(this, 'configMenu');
            e.stopPropagation();
        });
        (0, _jquery2.default)('#saveButton').on('mousedown', function(e) {
            processSbButtonMousedown(this, function() {
                doSaveOrCopyRenderedSession();
                closeAllMenus();
                e.stopPropagation();
            });
        });
        q('saveButton').addEventListener('mouseup', function() {
            processSbButtonMouseup(this);
        });
        (0, _jquery2.default)('#saveButton').on('mouseover', function() {
            processSbButtonMouseover(this);
        });
        q('saveButton').addEventListener('mouseout', function() {
            processSbButtonMouseout(this);
        });
        (0, _jquery2.default)('#btnMerge').on('mousedown', function(e) {
            processLeftSbButtonMousedown(this, function() {
                doMergeSessions();
                closeAllMenus();
                e.stopPropagation();
            });
        });
        q('btnMerge').addEventListener('mouseup', function() {
            processLeftSbButtonMouseup(this);
        });
        (0, _jquery2.default)('#btnMerge').on('mouseover', function() {
            processSbButtonMouseover(this);
        });
        q('btnMerge').addEventListener('mouseout', function() {
            processSbButtonMouseout(this);
        });
        (0, _jquery2.default)('#saveButton2').on('mousedown', function(e) {
            processRightSbButtonMousedown(this, function() {
                doSaveOrCopyRenderedSession();
                closeAllMenus();
                e.stopPropagation();
            });
        });
        q('saveButton2').addEventListener('mouseup', function() {
            processSbButtonMouseup(this);
        });
        (0, _jquery2.default)('#saveButton2').on('mouseover', function() {
            processRightSbButtonMouseover(this, q('btnMerge'));
        });
        q('saveButton2').addEventListener('mouseout', function() {
            processRightSbButtonMouseout(this, q('btnMerge'));
        });
        q('restoreButton').addEventListener('click', function(e) {
            processRightSbButtonOnclick(this, 'restoreMenu');
            e.stopPropagation();
        });
        q('restoreButton').addEventListener('mousedown', function(e) {
            processSbButtonMousedown(this);
            e.stopPropagation();
        });
        q('restoreButton').addEventListener('mouseup', function() {
            processSbButtonMouseup(this);
        });
        q('restoreButton').addEventListener('mouseover', function() {
            processSbButtonMouseover(this);
        });
        q('restoreButton').addEventListener('mouseout', function() {
            processSbButtonMouseout(this);
        });
        q('actionsMenuButton').addEventListener('click', function(e) {
            processSbMenuButtonOnclick(this, 'actionsMenu');
            e.stopPropagation();
        });
        (0, _jquery2.default)('#actionsMenuButton').on('mousedown', function(e) {
            (0, _jquery2.default)(this).qtip('hide');
            (0, _jquery2.default)(this).qtip('disable');
            processSbButtonMousedown(this);
            e.stopPropagation();
        });
        (0, _jquery2.default)('#actionsMenuButton').on('mouseup', function() {
            processSbButtonMouseup(this);
        });
        (0, _jquery2.default)('#actionsMenuButton').on('mouseover', function() {
            var el = (0, _jquery2.default)(this);
            if (!el.hasClass('sbButton_on')) {
                el.qtip('enable');
            }
            processSbButtonMouseover(this);
        });
        q('actionsMenuButton').addEventListener('mouseout', function() {
            processSbButtonMouseout(this);
        });
        q('menuItemImport').addEventListener('mousedown', function() {
            processMenuItemClick(this, showDialog, 'dialogBody_ImportSession', undefined, undefined, function() {
                q('sessionImportText').focus();
                q('sessionImportText').select();
            });
        });
        q('menuItemExport').addEventListener('mousedown', function() {
            (0, _jquery2.default)('#sessionExportText').scrollTop(0).scrollLeft(0);
            processMenuItemClick(this, showDialog, 'dialogBody_ExportSession', undefined, undefined, function() {
                (0, _jquery2.default)('#sessionExport_Scope').val('selected');
                setSessionExportText();
            });
        });
        q('menuItemBackup').addEventListener('mousedown', function() {
            processMenuItemClick(this, createBackupFile);
        });
        q('Div2').addEventListener('mousedown', function() {
            processMenuItemClick(this, showDialog, 'dialogBody_Options');
        });
        q('Div3').addEventListener('mousedown', function() {
            processMenuItemClick(this, function() {
                window.open('https://groups.google.com/forum/?fromgroups#!forum/sessionbuddy-discuss', '_blank');
            });
        });
        q('Div1').addEventListener('mousedown', function() {
            processMenuItemClick(this, function() {
                window.open('https://chrome.google.com/webstore/detail/edacconmaakjimmfgnblocblbcdcpbko/reviews', '_blank');
            });
        });
        q('Div4').addEventListener('mousedown', navToDonatePage);
        q('Div10').addEventListener('mousedown', function() {
            processMenuItemClick(this, showDialog, 'dialogBody_About');
        });
        q('menuItemRestoreSetOfWindows').addEventListener('mousedown', function() {
            processMenuItemClick(this, doRestoreRenderedSession_SetOfWindows);
        });
        q('menuItemRestoreToOneWindow').addEventListener('mousedown', function() {
            processMenuItemClick(this, doRestoreRenderedSession_ToOneWindow);
        });
        q('menuItemRestoreToThisWindow').addEventListener('mousedown', function() {
            processMenuItemClick(this, doRestoreRenderedSession_ToThisWindow);
        });
        q('menuItem_Rename').addEventListener('mousedown', function() {
            processMenuItemClick(this, doRenameRenderedSession);
        });
        q('menuItem_Copy').addEventListener('mousedown', function() {
            processMenuItemClick(this, doCopyRenderedSession);
        });
        q('menuItem_Delete').addEventListener('mousedown', function() {
            processMenuItemClick(this, doDeleteRenderedSession);
        });
        q('menuItem_SortByTabTitle').addEventListener('mousedown', function() {
            processMenuItemClick(this, doSortByTabTitle);
        });
        q('menuItem_SortByTabUrl').addEventListener('mousedown', function() {
            processMenuItemClick(this, doSortByTabUrl);
        });
        q('menuItem_MergeWindows').addEventListener('mousedown', function() {
            processMenuItemClick(this, doUnifyRenderedSessionWindows);
        });
        q('menuItem_UpdateWithCurrent').addEventListener('mousedown', function() {
            processMenuItemClick(this, doUpdateRenderedSessionWithCurrentSession);
        });
        q('searchCountsCloseImg').addEventListener('click', function(e) {
            clearSearch();
            q('searchBox').focus();
            e.stopPropagation();
        });
        q('sessionRenderContainer').addEventListener('scroll', function() {
            scrollContent(this, q('contentShadowTop'));
        });
        (0, _jquery2.default)('#about_sbid, #sbExtensionsPageOpen').on('click', function() {
            _browser2.default.navigateTab({
                url: 'chrome://extensions/?id=' + _browser2.default.extensionId(),
                active: true
            });
            if (this.id === 'sbExtensionsPageOpen') {
                hideDialog();
            }
        });
        (0, _jquery2.default)('#sessionRenderContainer').on('keydown keypress keyup', '.sessionRender_Window_Editing .sessionRender_Window_Label', function(e) {
            if (e.type === 'keydown') {
                var w = (0, _jquery2.default)(e.target).closest('.sessionRender_Window_Editing');
                if (e.keyCode === 27) {
                    closeWindowRename(w);
                } else if (e.keyCode === 13) {
                    saveCloseWindowRename(w);
                    e.preventDefault();
                }
            }
            e.stopPropagation();
        });
        (0, _jquery2.default)('#sessionRenderContainer').on('mousedown', '#windowContextMenu .menuItem', function(e) {
            e.stopPropagation();
        });
        (0, _jquery2.default)('#sessionRenderContainer').on('click', '#windowContextMenu .menuItem', function(e) {
            var t = (0, _jquery2.default)(e.target), w = t.closest('.sessionRender_Window');
            if (w.length) {
                switch (e.target.id) {
                  case 'menuItemOpenWindow':
                    processMenuItemClick(this, function() {
                        app.restoreSession(renderedSessionWindows, 'RestoreSessionIntoASingleWindow', [ parseInt(w.data('wSeq')) - 1 ]);
                    });
                    break;

                  case 'menuItemOpenIncognitoWindow':
                    processMenuItemClick(this, function() {
                        app.restoreSession(renderedSessionWindows, 'RestoreSessionIntoASingleWindow', [ parseInt(w.data('wSeq')) - 1 ], null, true, function() {
                            showDialog('dialogBody_IcognitoDisabled', undefined, undefined, function() {
                                setDialogHeaderContent('Incognito Disabled');
                                (0, _jquery2.default)('#icognitoDisabledMsg').html('Session Buddy can\'t open an incognito window<br>while incognito is disabled');
                            });
                        });
                    });
                    break;

                  case 'menuItemOpenTabs':
                    processMenuItemClick(this, function() {
                        _browser2.default.getCurrentWindow(function(cwin) {
                            app.restoreSession(renderedSessionWindows, 'RestoreSessionIntoThisWindow', [ parseInt(w.data('wSeq')) - 1 ], null, null, null, cwin.id);
                        });
                    });
                    break;

                  case 'menuItemFocusWindow':
                    processMenuItemClick(this, function() {
                        _browser2.default.focusWindow(w.data('wid'));
                    });
                    break;

                  case 'menuItemCopyToNewSession':
                    processMenuItemClick(this, function() {
                        doSaveWindow(w.data('nx_title'), [ parseInt(w.data('wSeq')) - 1 ], null, _keyUtil2.default.hasCtrlKeyModifier(e));
                    });
                    break;

                  case 'menuItemMoveToNewSession':
                    processMenuItemClick(this, function() {
                        doSaveWindow(w.data('nx_title'), [ parseInt(w.data('wSeq')) - 1 ], w.get(0), _keyUtil2.default.hasCtrlKeyModifier(e));
                    });
                    break;

                  case 'menuItemRenameWindow':
                    processMenuItemClick(this, function() {
                        setTimeout(function() {
                            openWindowRename(w);
                        });
                    });
                    break;

                  case 'menuItemWindowToggleIncognito':
                    processMenuItemClick(this, function() {
                        toggleIncognito(w);
                    });
                    break;

                  case 'menuItemDeleteWindow':
                    processMenuItemClick(this, function() {
                        deleteRenderedSessionWindowOrTab_AndSave.call(w.get(0));
                    });
                    break;

                  case 'menuItemCloseWindow':
                    processMenuItemClick(this, function() {
                        deleteRenderedSessionWindowOrTab_AndClose_Commit(w.get(0));
                    });
                    break;
                }
            }
        });
        q('dialogDiv').addEventListener('click', function(e) {
            e.stopPropagation();
        });
        q('dialogDiv').addEventListener('keydown', function(e) {
            if (e.keyCode === 27) {
                hideDialog();
            }
            e.stopPropagation();
        });
        q('dialogDiv').addEventListener('keyup', function(e) {
            e.stopPropagation();
        });
        q('dialogHeader').addEventListener('mousedown', function() {
            enableDialogMove();
            return false;
        });
        (0, _jquery2.default)('#dialogCloseImg').on('click', hideDialog);
        q('sessionImportText').addEventListener('input', function() {
            evaluateImportInput(processNormalizedImportInput, 400);
        });
        q('sessionExport_Scope').addEventListener('change', function(e) {
            setSessionExportText();
            e.stopPropagation();
        });
        q('showSessions').addEventListener('click', function(e) {
            if (_domUtil2.default.isEnabled(chkShowSessions)) {
                chkShowSessions.checked = !chkShowSessions.checked;
                setSessionExportText();
            }
            e.stopPropagation();
        });
        q('chkShowSessions').addEventListener('click', function(e) {
            setSessionExportText();
            e.stopPropagation();
        });
        q('showWindows').addEventListener('click', function(e) {
            if (_domUtil2.default.isEnabled(chkShowWindows)) {
                chkShowWindows.checked = !chkShowWindows.checked;
                setSessionExportText();
            }
            e.stopPropagation();
        });
        q('chkShowWindows').addEventListener('click', function(e) {
            setSessionExportText();
            e.stopPropagation();
        });
        q('showTitles').addEventListener('click', function(e) {
            if (_domUtil2.default.isEnabled(chkShowTitles)) {
                chkShowTitles.checked = !chkShowTitles.checked;
                adjustExportOptionsUI(chkShowTitles, chkShowURLs);
                setSessionExportText();
            }
            e.stopPropagation();
        });
        q('chkShowTitles').addEventListener('click', function(e) {
            adjustExportOptionsUI(chkShowTitles, chkShowURLs);
            setSessionExportText();
            e.stopPropagation();
        });
        q('showURLs').addEventListener('click', function(e) {
            if (_domUtil2.default.isEnabled(chkShowURLs)) {
                chkShowURLs.checked = !chkShowURLs.checked;
                adjustExportOptionsUI(chkShowURLs, chkShowTitles);
                setSessionExportText();
            }
            e.stopPropagation();
        });
        q('chkShowURLs').addEventListener('click', function(e) {
            adjustExportOptionsUI(chkShowURLs, chkShowTitles);
            setSessionExportText();
            e.stopPropagation();
        });
        q('tabGroup_tab_ExportText').addEventListener('mousedown', handleExportTabSelect);
        q('tabGroup_tab_ExportCSV').addEventListener('mousedown', handleExportTabSelect);
        q('tabGroup_tab_ExportJSON').addEventListener('mousedown', handleExportTabSelect);
        q('tabGroup_tab_ExportHTML').addEventListener('mousedown', handleExportTabSelect);
        q('tabGroup_tab_ExportMarkdown').addEventListener('mousedown', handleExportTabSelect);
        function handleExportTabSelect(e) {
            processTabClick(e);
            setSessionExportText();
            setControlStates_ExportSession();
        }
        q('tabGroup_tab_General').addEventListener('mousedown', processTabClick);
        q('tabGroup_tab_Appearance').addEventListener('mousedown', processTabClick);
        q('tabGroup_tab_Filter').addEventListener('mousedown', processTabClick);
        q('tabGroup_tab_Keyboard').addEventListener('mousedown', processTabClick);
        q('tabGroup_tab_TechnicalDetails').addEventListener('mousedown', processTabClick);
        q('tabGroup_tab_Attribution').addEventListener('mousedown', processTabClick);
        q('chkShowPreviousSessions').addEventListener('click', setControlState_ShowPreviousSessions);
        q('chkShowPreviousSessions').addEventListener('change', setControlState_ShowPreviousSessions);
        q('selPreviousSessionQueueSize').addEventListener('click', function(e) {
            return e.stopPropagation();
        });
        q('selPreviousSessionQueueSize').addEventListener('change', setControlState_ShowPreviousSessions);
        q('selPreviousSessionQueueSize').addEventListener('keyup', setControlState_ShowPreviousSessions);
        q('chkHideDuplicateTabsInCombinedSession').addEventListener('click', setControlStates_OptionsDialog);
        q('chkHideDuplicateTabsInCombinedSession').addEventListener('change', setControlStates_OptionsDialog);
        q('dialogFooterCheckbox').addEventListener('click', function() {
            if (_domUtil2.default.isEnabled(chkDialogFooter)) {
                chkDialogFooter.checked = !chkDialogFooter.checked;
            }
        });
        q('chkDialogFooter').addEventListener('click', function(e) {
            return e.stopPropagation();
        });
        q('dialogFooterButtonLeft').addEventListener('mousedown', function() {
            processSbButtonMousedown(this);
        });
        q('dialogFooterButtonLeft').addEventListener('mouseup', function() {
            processSbButtonMouseup(this);
        });
        q('dialogFooterButtonLeft').addEventListener('mouseover', function() {
            processSbButtonMouseover(this);
        });
        q('dialogFooterButtonLeft').addEventListener('mouseout', function() {
            processSbButtonMouseout(this);
        });
        q('dialogFooterButtonLeft').addEventListener('click', function() {
            processSbButtonOnclick(this, dialogFooterButtonAction_Left);
        });
        q('dialogFooterButtonMiddle').addEventListener('mousedown', function() {
            processSbButtonMousedown(this);
        });
        q('dialogFooterButtonMiddle').addEventListener('mouseup', function() {
            processSbButtonMouseup(this);
        });
        q('dialogFooterButtonMiddle').addEventListener('mouseover', function() {
            processSbButtonMouseover(this);
        });
        q('dialogFooterButtonMiddle').addEventListener('mouseout', function() {
            processSbButtonMouseout(this);
        });
        q('dialogFooterButtonMiddle').addEventListener('click', function() {
            processSbButtonOnclick(this, dialogFooterButtonAction_Middle);
        });
        q('dialogFooterButtonRight').addEventListener('mousedown', function() {
            processSbButtonMousedown(this);
        });
        q('dialogFooterButtonRight').addEventListener('mouseup', function() {
            processSbButtonMouseup(this);
        });
        q('dialogFooterButtonRight').addEventListener('mouseover', function() {
            processSbButtonMouseover(this);
        });
        q('dialogFooterButtonRight').addEventListener('mouseout', function() {
            processSbButtonMouseout(this);
        });
        q('dialogFooterButtonRight').addEventListener('click', function() {
            processSbButtonOnclick(this, dialogFooterButtonAction_Right);
        });
        q('dialogBackgroundOverlay').addEventListener('click', function(e) {
            hideDialog();
            e.stopPropagation();
        });
    }
    function openWindowRename(w) {
        w.addClass('sessionRender_Window_Editing');
        _domUtil2.default.selectElementContents(w.find('.sessionRender_Window_Label').attr('contentEditable', true).qtip('disable').get(0));
    }
    function closeWindowRename(w) {
        w.removeClass('sessionRender_Window_Editing');
        w.find('.sessionRender_Window_Label').text(w.data('nx_title') || 'Window').scrollLeft(0).attr('contentEditable', false).qtip('enable');
    }
    function saveCloseWindowRename(w) {
        var txt = w.find('.sessionRender_Window_Label').text().replace(/[\r\n]+/g, ' ').trim();
        if ((renderedSessionType === 'saved' || renderedSessionType === 'previous') && txt && (!w.data('nx_title') || w.data('nx_title') !== txt)) {
            w.data('nx_title', txt);
            closeWindowRename(w);
            renderedSessionWindows[parseInt(w.data('wSeq')) - 1].nx_title = txt;
            bg.sendRequestToAllSBTabs({
                id: 'hideActionStatus',
                excludeTab: tabIdentifier
            });
            saveOrUpdateRenderedSession(undefined, function(inIsSave, inSessionInfo) {
                postSaveOrUpdateRenderedSession(false, inSessionInfo);
                bg.sendRequestToAllSBTabs({
                    id: renderedSessionType === 'previous' ? 'updatePreviousSessionSummary' : 'updateSavedSessionSummary',
                    data: {
                        sessionInfo: inSessionInfo
                    },
                    excludeTab: tabIdentifier
                });
            }, null, null, renderedSessionType === 'previous');
        } else {
            closeWindowRename(w);
        }
    }
    function toggleIncognito(w) {
        if (renderedSessionType === 'saved' || renderedSessionType === 'previous') {
            var wSeq = parseInt(w.data('wSeq'), 10);
            if (renderedSessionWindows[wSeq - 1].incognito = !renderedSessionWindows[wSeq - 1].incognito) {
                w.find('.sessionRender_Window_Cognito').removeClass('sessionRender_Window_Cognito').addClass('sessionRender_Window_Incognito').qtip({
                    content: {
                        text: 'This window is incognito'
                    },
                    position: {
                        my: 'bottom center',
                        at: 'top center',
                        adjust: {
                            y: -9
                        }
                    },
                    show: {
                        delay: 500
                    },
                    style: {
                        tip: {
                            corner: true,
                            width: 12
                        }
                    }
                });
            } else {
                w.find('.sessionRender_Window_Incognito').removeClass('sessionRender_Window_Incognito').addClass('sessionRender_Window_Cognito').qtip('destroy', true);
            }
            for (var i = renderedSessionWindows[wSeq - 1].tabs.length - 1; i >= 0; i--) {
                renderedSessionWindows[wSeq - 1].tabs[i].incognito = renderedSessionWindows[wSeq - 1].incognito;
            }
            bg.sendRequestToAllSBTabs({
                id: 'hideActionStatus',
                excludeTab: tabIdentifier
            });
            saveOrUpdateRenderedSession(undefined, function(inIsSave, inSessionInfo) {
                postSaveOrUpdateRenderedSession(false, inSessionInfo);
                bg.sendRequestToAllSBTabs({
                    id: renderedSessionType === 'previous' ? 'updatePreviousSessionSummary' : 'updateSavedSessionSummary',
                    data: {
                        sessionInfo: inSessionInfo
                    },
                    excludeTab: tabIdentifier
                });
            }, null, null, renderedSessionType === 'previous');
        }
    }
    function hideNavPaneScrollbar() {
        var el = q('sessionsPanelContainer');
        if (el) el.removeAttribute('scrolling');
    }
    function finalizeTabInitialization() {
        window.addEventListener('resize', setAllContentShadows);
        chrome.extension.onMessage.addListener(function(request, sender, sendResponse) {
            if (!request.targetTab && request.excludeTab != tabIdentifier || request.targetTab && request.targetTab === tabIdentifier) {
                if (request.id === 'currentSessionChangeNotification') {
                    if (renderedSessionType && renderedSessionType === 'current') {
                        if ((0, _jquery2.default)('#dialogBody_CloseWot').is(':visible')) {
                            hideDialog();
                        }
                        refreshSession(-13);
                    }
                    sp.updateSessionTileDate(undefined, 'current', null, new Date(request.data.date));
                } else if (request.id === 'currentSessionCountsChangeNotification') {
                    sp.requestUpdateSessionSummaryFilterCountsByIdAndType(undefined, 'current', request.data.unfilteredWindowCount, request.data.filteredWindowCount, request.data.unfilteredTabCount, request.data.filteredTabCount);
                } else if (request.id === 'removeAddSessions') {
                    removeAddSessions(request.data.removeSessionInfos, request.data.addSessionInfos, request.data.alsoSelect, request.data.alsoFocusNavigationPanel, request.data.selectedHeadInfo, request.data.selectedTailInfos);
                } else if (request.id === 'removeSessions') {
                    sp.requestRemoveSessionSummariesBySessionInfos(request.data.sessionInfos, undefined, function() {});
                } else if (request.id === 'hideActionStatus') {
                    appStatusVisible(false);
                } else if (request.id === 'refreshSession') {
                    refreshSession(request.data.sessionId);
                } else if (request.id === 'addSessions') {
                    sp.addSessionTiles(request.data.sessionInfos, function(inIsRequestHonored, inAddedSessionInfos) {
                        if (request.data.alsoSelect) {
                            var sessionInfoToHeadSelect = null;
                            var sessionInfosToAllSelect = null;
                            if (request.data.selectedHeadInfo && request.data.selectedTailInfos) {
                                if (app.getIndexOfSessionInfo(request.data.selectedHeadInfo, inAddedSessionInfos) > -1) {
                                    sessionInfoToHeadSelect = request.data.selectedHeadInfo;
                                } else {
                                    sessionInfoToHeadSelect = sp.getSelectedSessionInfo_Head();
                                }
                                sessionInfosToAllSelect = [];
                                for (var i = 0; i < request.data.selectedTailInfos.length; i++) {
                                    if (app.getIndexOfSessionInfo(request.data.selectedTailInfos[i], inAddedSessionInfos) > -1) {
                                        sessionInfosToAllSelect.push(request.data.selectedTailInfos[i]);
                                    }
                                }
                                sessionInfosToAllSelect = sessionInfosToAllSelect.concat(sp.getSelectedSessionInfos_All());
                            } else {
                                sessionInfoToHeadSelect = inAddedSessionInfos[inAddedSessionInfos.length - 1];
                                sessionInfosToAllSelect = inAddedSessionInfos.length > 1 ? inAddedSessionInfos : undefined;
                            }
                            sp.requestSelectSessionSummariesBySessionInfos(sessionInfoToHeadSelect, sessionInfosToAllSelect, function(inIsRequestHonored, inSelectedSessionInfo_Head, inSelectedSessionInfos_All, inOptimizeSessionCombine) {
                                if (inIsRequestHonored) {
                                    sp.getSessionSummaryElementByIdAndType(inSelectedSessionInfo_Head.id, inSelectedSessionInfo_Head.type).scrollIntoViewIfNeeded(false);
                                    spSelectionChangedCallback(inIsRequestHonored, inSelectedSessionInfo_Head, inSelectedSessionInfos_All, inOptimizeSessionCombine);
                                }
                            });
                        }
                    }, _searchTermRegEx);
                } else if (request.id === 'updateSavedSessionSummary') {
                    if (request.data.sessionInfo.type === 'saved') {
                        sp.requestUpdateSessionSummaryFilterCountsByIdAndType(request.data.sessionInfo.id, request.data.sessionInfo.type, request.data.sessionInfo.unfilteredWindowCount, request.data.sessionInfo.filteredWindowCount, request.data.sessionInfo.unfilteredTabCount, request.data.sessionInfo.filteredTabCount);
                        sp.updateSessionTileDate(request.data.sessionInfo.id, request.data.sessionInfo.type, request.data.sessionInfo.created && new Date(_dateUtil2.default.utcDateStringToMS(request.data.sessionInfo.created)), request.data.sessionInfo.updated && new Date(_dateUtil2.default.utcDateStringToMS(request.data.sessionInfo.updated)));
                    }
                } else if (request.id === 'updatePreviousSessionSummary') {
                    if (request.data.sessionInfo.type === 'previous') {
                        sp.requestUpdateSessionSummaryFilterCountsByIdAndType(request.data.sessionInfo.id, request.data.sessionInfo.type, request.data.sessionInfo.unfilteredWindowCount, request.data.sessionInfo.filteredWindowCount, request.data.sessionInfo.unfilteredTabCount, request.data.sessionInfo.filteredTabCount);
                    }
                } else if (request.id === 'showHideUrls') {
                    setControlState_ShowHideUrls(request.data);
                    rerenderRenderedSession();
                } else if (request.id === 'undoSessionEdit') {
                    rerenderRenderedSession(request.data.windows, function() {
                        if (renderedSessionType === 'saved') {
                            saveOrUpdateRenderedSession(undefined, function(inIsSave, inSessionInfo) {
                                inSessionInfo.created = request.data.sessionInfo.created;
                                if (!inIsSave) {
                                    bg.sendRequestToAllSBTabs({
                                        id: 'updateSavedSessionSummary',
                                        data: {
                                            sessionInfo: inSessionInfo
                                        }
                                    });
                                    bg.sendRequestToAllSBTabs({
                                        id: 'refreshSession',
                                        data: {
                                            sessionId: inSessionInfo.id
                                        },
                                        excludeTab: tabIdentifier
                                    });
                                }
                            }, undefined, request.data.sessionInfo.updated);
                        } else if (renderedSessionType === 'previous') {
                            saveOrUpdateRenderedSession(undefined, function(inIsSave, inSessionInfo) {
                                if (!inIsSave) {
                                    bg.sendRequestToAllSBTabs({
                                        id: 'updatePreviousSessionSummary',
                                        data: {
                                            sessionInfo: inSessionInfo
                                        }
                                    });
                                    bg.sendRequestToAllSBTabs({
                                        id: 'refreshSession',
                                        data: {
                                            sessionId: inSessionInfo.id
                                        },
                                        excludeTab: tabIdentifier
                                    });
                                }
                            }, undefined, undefined, true);
                        }
                    }, request.data.sessionInfo && (request.data.sessionInfo.type === 'saved' ? request.data.sessionInfo.updated || request.data.sessionInfo.created : request.data.sessionInfo.created || request.data.sessionInfo.updated));
                } else if (request.id === 'rerenderRenderedSession') {
                    rerenderRenderedSession(undefined, request.data.callback);
                } else if (request.id === 'propagateSettingsToTabUI') {
                    rerenderSessionsPanelIf(request.data.isRerenderSessionsPanelRequired, function() {
                        rerenderRenderedSessionIf(request.data.isRerenderRenderedSessionRequired && !request.data.isGetAndRenderRenderedSessionRequired, function() {
                            getAndRenderRenderedSessionIf(request.data.isGetAndRenderRenderedSessionRequired, function() {
                                if (request.data.isEnableDisableKeyboardShortcutsRequired) {
                                    if (request.data.enableKeyboardShortcuts) {
                                        sp.requestEnableKeyboardShortcuts();
                                    } else {
                                        sp.requestDisableKeyboardShortcuts();
                                    }
                                }
                            });
                        });
                    });
                } else if (request.id === 'updateSessionName') {
                    sp.updateSessionTileName(request.data.id, request.data.type, request.data.name, _searchTermRegEx);
                    if (renderedSessionId === request.data.id) {
                        if (_searchTerms) {
                            rerenderRenderedSession();
                        } else {
                            if (request.data.name && request.data.name.trim()) {
                                setSessionHeaderElementContent(request.data.name.trim(), 'Click to rename this session');
                                q('sessionNameInput_SessionRename').value = request.data.name.trim();
                            } else {
                                setSessionHeaderElementContent(getSessionTitleFromSessionType(request.data.type), 'Click to name this session');
                                q('sessionNameInput_SessionRename').value = '';
                            }
                        }
                        sp.setNavState('title');
                    }
                }
            }
        });
        sp = new _sessionsPanel2.default(db, app, q('sessionsPanelContainer'), 0, true, spSelectionChangedCallback, spSessionsRemovedCallback);
        q('sessionsPanelContainer').innerHTML = '';
        sp.renderMessage();
        getAndRenderSessionSummaries(undefined, undefined, undefined, undefined, undefined, function() {
            q('sessionsPanel').focus();
            q('sessionsPanelContainer').scrollTop = 0;
            _domUtil2.default.enable([ q('btnHideURLs'), q('btnShowURLs'), q('searchBox'), q('actionsMenuButton') ]);
            q('searchBox').focus();
            setContentShadows(q('sessionsPanelContainer'), q('spShadowTop'));
            db.getSetting('seqInterpolation2', function(value_SBStartStat) {
                if (value_SBStartStat && value_SBStartStat > 40) {
                    setTimeout(function() {
                        (0, _jquery2.default)('#btnDonate').fadeIn('slow');
                    }, 2 * 1e3);
                }
            });
            db.getSetting('trigger3', function(v) {
                if (!v) {
                    db.getSetting('seqInterpolation2', function(value_SBStartStat) {
                        if (value_SBStartStat) {
                            if (ga_segment('historic_sb_tab_load_count', value_SBStartStat)) {
                                ga('send', 'event', 'application', 'historic_sb_tab_load_count', undefined, value_SBStartStat, {
                                    nonInteraction: 1
                                });
                                db.setSetting('trigger3', 1);
                            }
                        }
                    });
                }
            });
            db.getSetting('trigger4', function(v) {
                if (!v) {
                    db.getSetting('seqInterpolation2', function(value_SBStartStat) {
                        if (value_SBStartStat) {
                            if (value_SBStartStat > 48) {
                                db.getSavedSessionCount(function(savedSessionCount) {
                                    if (value_SBStartStat > 52) {
                                        if (ga_segment('historic_saved_session_count', savedSessionCount)) {
                                            ga('send', 'event', 'application', 'historic_saved_session_count', undefined, savedSessionCount, {
                                                nonInteraction: 1
                                            });
                                            db.setSetting('trigger4', 1);
                                        }
                                    } else {
                                        if (ga_segment('usage_threshold_1_saved_session_count', savedSessionCount)) {
                                            ga('send', 'event', 'application', 'usage_threshold_1_saved_session_count', undefined, savedSessionCount, {
                                                nonInteraction: 1
                                            });
                                            db.setSetting('trigger4', 1);
                                        }
                                    }
                                });
                            }
                        }
                    });
                }
            });
        });
        q('copyrightCurrentYear').innerText = new Date().getFullYear();
        q('about_version').innerText = chrome.app.getDetails().version;
        q('about_sbid').innerHTML = '<span style="cursor:pointer;text-decoration:underline;">' + _browser2.default.extensionId() + '</span>';
        q('about_pixelRatio').innerHTML = _domUtil2.default.getDevicePixelRatio();
        q('about_version2').innerText = chrome.app.getDetails().version;
        q('about_platform').innerText = navigator.platform;
        q('about_userAgent').innerText = navigator.userAgent;
        q('about_language').innerText = navigator.language;
        if (app.isDebug) {
            q('mainPanel').appendChild(_domUtil2.default.createElement('div', 'tabIdentifierValue', 'debugValue debugValue_Right', 'tabIdentifier: ' + tabIdentifier));
            q('mainPanel').appendChild(_domUtil2.default.createElement('div', 'extensionIdentifierValue', 'debugValue debugValue_Left', 'extension: ' + _browser2.default.extensionId()));
        }
        app.unlockAction();
        if (app.isDebug) {
            var configMenuElement = q('configMenu');
            if (configMenuElement) {
                configMenuElement.appendChild(_domUtil2.default.createElement('div', undefined, 'menuItem', 'Disable Debug')).addEventListener('mousedown', function() {
                    nodebug();
                });
            }
        }
    }
    function removeAddSessions(inRemoveSessionInfos, inAddSessionInfos, inAlsoSelect, inAlsoFocusNavigationPanel, inPriorSelectedHeadInfo, inPriorSelectedAllInfos) {
        if (inAlsoFocusNavigationPanel) {
            q('sessionsPanel').focus();
        }
        sp.requestRemoveSessionSummariesBySessionInfos(inRemoveSessionInfos, inAlsoSelect, function(inIsRequestHonored, inRemovedSessionInfos) {
            sp.addSessionTiles(inAddSessionInfos, function(inIsRequestHonored, inAddedSessionInfos) {
                if (inAlsoSelect) {
                    var sessionInfoToHeadSelect = null;
                    var sessionInfosToAllSelect = null;
                    if (inPriorSelectedHeadInfo && inPriorSelectedAllInfos) {
                        if (app.getIndexOfSessionInfo(inPriorSelectedHeadInfo, inAddedSessionInfos) > -1) {
                            sessionInfoToHeadSelect = inPriorSelectedHeadInfo;
                        }
                        sessionInfosToAllSelect = [];
                        for (var i = 0; i < inPriorSelectedAllInfos.length; i++) {
                            if (app.getIndexOfSessionInfo(inPriorSelectedAllInfos[i], inAddedSessionInfos) > -1) {
                                sessionInfosToAllSelect.push(inPriorSelectedAllInfos[i]);
                            }
                        }
                    } else {
                        sessionInfoToHeadSelect = inAddedSessionInfos[inAddedSessionInfos.length - 1];
                        sessionInfosToAllSelect = inAddedSessionInfos.length > 1 ? inAddedSessionInfos : undefined;
                    }
                    sp.requestSelectSessionSummariesBySessionInfos(sessionInfoToHeadSelect, sessionInfosToAllSelect, function(inIsRequestHonored, inSelectedSessionInfo_Head, inSelectedSessionInfos_All, inOptimizeSessionCombine) {
                        if (inIsRequestHonored) {
                            sp.getSessionSummaryElementByIdAndType(inSelectedSessionInfo_Head.id, inSelectedSessionInfo_Head.type).scrollIntoViewIfNeeded(false);
                            spSelectionChangedCallback(inIsRequestHonored, inSelectedSessionInfo_Head, inSelectedSessionInfos_All, inOptimizeSessionCombine);
                        }
                    }, 'replace');
                }
            }, _searchTermRegEx);
        });
    }
    function spSelectionChangedCallback(inIsRequestHonored, inSelectedSessionInfo_Head, inSelectedSessionInfos_All, inOptimizeSessionCombine, inKeepActionStatusOpen, cb) {
        if (inIsRequestHonored) {
            renderSession(inSelectedSessionInfo_Head, inSelectedSessionInfos_All, function() {
                postSessionRender();
                if (cb) {
                    cb();
                }
            }, inOptimizeSessionCombine, inKeepActionStatusOpen);
        }
    }
    function spSessionsRemovedCallback(inIsRequestHonored, inRemovedSessionInfos, inPriorSelectedHeadInfo, inPriorSelectedTailInfos) {
        if (inIsRequestHonored) {
            db.softDeleteUndeleteSessions(inRemovedSessionInfos, true, function(inRowsAffected) {
                bg.pushUndoActionAndClearAllActions(tabIdentifier, 'sessionDelete', 'Sessions deleted', function() {
                    bg.sendRequestToAllSBTabs({
                        id: 'hideActionStatus',
                        excludeTab: tabIdentifier
                    });
                    bg.sendRequestToAllSBTabs({
                        id: 'removeSessions',
                        data: {
                            sessionInfos: inRemovedSessionInfos
                        },
                        excludeTab: tabIdentifier
                    });
                    appStatusVisible((inRowsAffected > 1 ? inRowsAffected + ' sessions' : 'Session') + ' deleted<br>' + undoAccessHTML, 1, 1e3 * 60 * 2);
                    allowUndo = true;
                }, JSON.stringify(inRemovedSessionInfos), JSON.stringify(inPriorSelectedHeadInfo), JSON.stringify(inPriorSelectedTailInfos));
            });
        }
    }
    function renderSession(sessionInfo_Head, sessionInfos_All, cb, inOptimizeSessionCombine, inKeepActionStatusOpen) {
        if (sessionInfos_All && sessionInfos_All.length) {
            getAndRenderCombinedSession(undefined, undefined, undefined, sessionInfos_All, cb);
        } else if (sessionInfo_Head.type === 'current') {
            getAndRenderCurrentSession(cb);
        } else if (sessionInfo_Head.type === 'previous') {
            getAndRenderPreviousSession(sessionInfo_Head.id, cb);
        } else if (sessionInfo_Head.type === 'saved') {
            getAndRenderSavedSession(sessionInfo_Head.id, false, cb, !inKeepActionStatusOpen);
        }
    }
    function rerenderRenderedSession(wins, cb, inUtcDateString) {
        if (!wins) {
            wins = renderedSessionWindows;
        }
        if (renderedSessionType === 'current') {
            renderCurrentSession(wins, undefined, false, cb);
        } else if (renderedSessionType === 'previous') {
            renderPreviousSession(renderedSessionId, wins, inUtcDateString, false, cb);
        } else if (renderedSessionType === 'saved') {
            renderSavedSession(renderedSessionId, wins, _searchTerms ? q('sessionNameInput_SessionRename').value.trim() : undefined, undefined, inUtcDateString, false, false, cb);
        } else if (renderedSessionType === 'combined') {
            renderCombinedSession(wins, undefined, undefined, undefined, false, undefined, undefined, cb);
        }
    }
    function getAndRenderCurrentSession(cb) {
        _browser2.default.getAllWindowsAndTabs({
            rotate: true
        }, function(wins) {
            renderCurrentSession(wins, new Date(), true, function() {
                db.getNextUndoAction(tabIdentifier, function(row) {
                    if (row && row.action != 'sessionDelete') {
                        appStatusVisible(false);
                        allowUndo = false;
                    }
                    (cb = cb || postSessionRender) && cb();
                });
            });
        });
    }
    function renderCurrentSession(wins, inGeneratedDateTime, inIsClean, cb) {
        chrome.tabs.getCurrent(function(t) {
            renderWindows(wins, deleteRenderedSessionWindowOrTab_AndClose, t.windowId, t.id, false, function(inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount, shownTabCount) {
                setCurrentSessionControlStates(inUnfilteredWindowCount, inUnfilteredTabCount);
                if (inGeneratedDateTime) {
                    updateRenderedSessionAge(inGeneratedDateTime, 'current');
                    sp.updateSessionTileElDate(q('sessionSummary_current'), null, inGeneratedDateTime, 'current');
                }
                setSessionStatusElementContent(null, app.getTabFilteringDescriptionHTML(inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount));
                if (renderedSessionId != -13 || renderedSessionType != 'current') {
                    q('sessionNameInput_SessionRename').value = '';
                    renderedSessionId = -13;
                    renderedSessionGid = undefined;
                    renderedSessionDesc = undefined;
                    if (app.isDebug) {
                        var debugElement = q('sessionIdDebugValue') || _domUtil2.default.createElement('span', 'sessionIdDebugValue', 'debugValue debugValue_Right');
                        debugElement.innerHTML = 'Session Id: ' + renderedSessionId;
                        debugElement.style.right = '-9px';
                        debugElement.style.bottom = '3px';
                        debugElement.style.position = 'relative';
                        q('sessionStatus').insertBefore(debugElement, q('sessionStatusRight'));
                    }
                }
                if (renderedSessionType != 'current') {
                    setSessionHeaderElementContent('Current Session');
                    renderedSessionType = 'current';
                }
                if (cb) {
                    cb();
                } else {
                    postSessionRender();
                }
            });
        });
    }
    function getAndRenderPreviousSession(inSessionId, cb) {
        if (!inSessionId && renderedSessionType === 'previous') {
            inSessionId = renderedSessionId;
        }
        db.getPreviousSessionWindows(inSessionId, undefined, function(inSqlResultRow) {
            if (inSqlResultRow) {
                renderPreviousSession(inSessionId, _util2.default.jsonSafeParse(inSqlResultRow.windows), new Date(_dateUtil2.default.utcDateStringToMS(inSqlResultRow.recordingDateTime)), true, function() {
                    db.getNextUndoAction(tabIdentifier, function(row) {
                        if (row && row.action != 'sessionDelete') {
                            appStatusVisible(false);
                            allowUndo = false;
                        }
                        (cb = cb || postSessionRender) && cb();
                    });
                }, inSqlResultRow.thumbnail);
            }
        });
    }
    function renderPreviousSession(inSessionId, wins, inRecordingDateTime, inIsClean, cb, gid) {
        renderWindows(wins, deleteRenderedSessionWindowOrTab_AndSave, false, false, false, function(inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount, shownTabCount) {
            app.getPreviousSessionOrder(inSessionId, function(inOrder) {
                setSessionHeaderElementContent('Previous Session');
                setPreviousSessionControlStates(inUnfilteredWindowCount, inUnfilteredTabCount, shownTabCount);
                if (inRecordingDateTime) {
                    updateRenderedSessionAge(inRecordingDateTime, 'previous');
                }
                setSessionStatusElementContent(null, app.getTabFilteringDescriptionHTML(inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount));
                if (renderedSessionId != inSessionId || renderedSessionType != 'previous') {
                    q('sessionNameInput_SessionRename').value = '';
                    renderedSessionId = inSessionId;
                    renderedSessionGid = gid;
                    renderedSessionDesc = undefined;
                    if (app.isDebug) {
                        var debugElement = q('sessionIdDebugValue') || _domUtil2.default.createElement('span', 'sessionIdDebugValue', 'debugValue debugValue_Right');
                        debugElement.innerHTML = 'Session Id: ' + renderedSessionId;
                        debugElement.style.right = '-9px';
                        debugElement.style.bottom = '3px';
                        debugElement.style.position = 'relative';
                        q('sessionStatus').insertBefore(debugElement, q('sessionStatusRight'));
                    }
                }
                if (renderedSessionType != 'previous') {
                    renderedSessionType = 'previous';
                }
                if (cb) {
                    cb();
                } else {
                    postSessionRender();
                }
            });
        });
    }
    function getAndRenderSavedSession(inSessionId, inIsUpdateSessionSummaryFilterCountsAndDate, cb, hideAppStatus) {
        if (!inSessionId && renderedSessionType === 'saved') {
            inSessionId = renderedSessionId;
        }
        db.getSavedSessionWindows(inSessionId, undefined, function(inSqlResultRow) {
            if (inSqlResultRow) {
                renderSavedSession(inSessionId, _util2.default.jsonSafeParse(inSqlResultRow.windows), inSqlResultRow.name, new Date(_dateUtil2.default.utcDateStringToMS(inSqlResultRow.creationDateTime)), new Date(_dateUtil2.default.utcDateStringToMS(inSqlResultRow.modificationDateTime)), true, inIsUpdateSessionSummaryFilterCountsAndDate, hideAppStatus ? function() {
                    db.getNextUndoAction(tabIdentifier, function(row) {
                        if (row && row.action != 'sessionDelete') {
                            appStatusVisible(false);
                            allowUndo = false;
                        }
                        (cb = cb || postSessionRender) && cb();
                    });
                } : cb, inSqlResultRow.thumbnail, inSqlResultRow.tags);
            }
        });
    }
    function renderSavedSession(inSessionId, wins, inName, inCreationDateTime, inModificationDateTime, inIsClean, inIsUpdateSessionSummaryFilterCountsAndDate, cb, gid, description) {
        renderWindows(wins, deleteRenderedSessionWindowOrTab_AndSave, false, false, false, function(inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount, shownTabCount) {
            if (inIsUpdateSessionSummaryFilterCountsAndDate) {
                sp.requestUpdateSessionSummaryFilterCountsByIdAndType(inSessionId, 'saved', inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount);
                sp.updateSessionTileDate(inSessionId, 'saved', inCreationDateTime, inModificationDateTime);
            }
            setSavedSessionControlStates(inUnfilteredWindowCount, inUnfilteredTabCount, shownTabCount);
            updateRenderedSessionAge(inModificationDateTime || inCreationDateTime, 'saved', inModificationDateTime && (!inCreationDateTime || +inCreationDateTime < +inModificationDateTime));
            setSessionStatusElementContent(null, app.getTabFilteringDescriptionHTML(inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount));
            if (renderedSessionId != inSessionId || renderedSessionType != 'saved' || inName == '' || inName && inName.trim().length > 0) {
                if (inName && inName.trim()) {
                    setSessionHeaderElementContent(inName.trim(), 'Click to rename this session', _searchTerms, _searchTermRegEx);
                    q('sessionNameInput_SessionRename').value = inName.trim();
                } else {
                    setSessionHeaderElementContent('Unnamed session', 'Click to name this session');
                    q('sessionNameInput_SessionRename').value = '';
                }
                renderedSessionId = inSessionId;
                renderedSessionGid = gid;
                renderedSessionDesc = description;
                if (app.isDebug) {
                    var debugElement = q('sessionIdDebugValue') || _domUtil2.default.createElement('span', 'sessionIdDebugValue', 'debugValue debugValue_Right');
                    debugElement.innerHTML = 'Session Id: ' + renderedSessionId;
                    debugElement.style.right = '-9px';
                    debugElement.style.bottom = '3px';
                    debugElement.style.position = 'relative';
                    q('sessionStatus').insertBefore(debugElement, q('sessionStatusRight'));
                }
            }
            if (renderedSessionType != 'saved') {
                renderedSessionType = 'saved';
            }
            if (cb) {
                cb();
            } else {
                postSessionRender();
            }
        }, inName && inName.trim(), arguments.length > 9 ? description : renderedSessionDesc);
    }
    function getAndRenderSavedSessionAndUpdateSessionSummaryFilterCountsAndDate() {
        getAndRenderSavedSession(undefined, true);
    }
    function getAndRenderCombinedSession(inConcatenateToWindows, inConcatenateToWindows_SessionCount, inConcatenateToWindows_RemovedTabCount, inSessionInfos, cb) {
        if (!inSessionInfos && renderedSessionType === 'combined') {
            inSessionInfos = sp.getSelectedSessionInfos_All();
        }
        getAndConcatenateWindows(inSessionInfos, [], 0, 0, undefined, undefined, function(inConcatenatedWindows, inSessionCount, inSessionTitle, inIsSessionNamed) {
            dedupeSession(inConcatenatedWindows, inConcatenateToWindows, !us('sessionEdit_HideDuplicateTabsInMerge'), function(inDedupedWindows, inRemovedTabCount) {
                renderCombinedSession(inConcatenateToWindows ? inConcatenateToWindows.concat(inDedupedWindows) : inDedupedWindows, inConcatenateToWindows_SessionCount ? inConcatenateToWindows_SessionCount + inSessionCount : inSessionCount, inConcatenateToWindows_RemovedTabCount ? inConcatenateToWindows_RemovedTabCount + inRemovedTabCount : inRemovedTabCount, us('sessionEdit_HideDuplicateTabsInMerge'), true, inSessionTitle, inIsSessionNamed, function() {
                    return db.getNextUndoAction(tabIdentifier, function(row) {
                        if (row && row.action !== 'sessionDelete') {
                            appStatusVisible(allowUndo = false);
                        }
                        cb && cb();
                    });
                });
            });
        });
    }
    function renderCombinedSession(wins, inSessionCount, inRemovedTabCount, inHideDuplicateTabsInCombinedSession, inIsClean, inSessionTitle, inIsSessionNamed, cb) {
        renderWindows(wins, inSessionCount === 1 ? deleteRenderedSessionWindowOrTab_AndSave : null, false, false, true, function(inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount, shownTabCount) {
            setCombinedSessionControlStates(inUnfilteredWindowCount, inUnfilteredTabCount, inSessionCount);
            if (inIsClean) {
                renderedCombinedSession_SessionCount = inSessionCount;
                if (inSessionCount) {
                    if (inSessionCount > 1) {
                        setSessionHeaderElementContent(_browser2.default.getI18nMessage('linksets', [ inSessionCount ]));
                        q('mergeSessionCount').innerHTML = inSessionCount;
                    } else {
                        setSessionHeaderElementContent(inSessionTitle);
                    }
                }
                if (inRemovedTabCount !== undefined && inRemovedTabCount !== null) {
                    if (inRemovedTabCount > 0) {
                        var removedCountLabel = inUnfilteredTabCount === shownTabCount ? '&nbsp;&nbsp;(' + inRemovedTabCount + ')' : '';
                        setSessionStatusElementContent('<div id="hideDuplicateTabsInCombinedSession2" class="underlineOnHover" style="cursor:pointer;"><input style="position:relative;top:-1px;" id="chkHideDuplicateTabsInCombinedSession2" ' + (inRemovedTabCount ? '' : 'disabled') + 'type="checkbox" ' + (inHideDuplicateTabsInCombinedSession ? 'checked ' : '') + '/><span style="padding-left: 6px;">Hide duplicate tabs' + removedCountLabel + '</span></div>', app.getTabFilteringDescriptionHTML(inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount));
                        q('hideDuplicateTabsInCombinedSession2').addEventListener('click', function(e) {
                            if (_domUtil2.default.isEnabled(q('chkHideDuplicateTabsInCombinedSession2'))) {
                                q('chkHideDuplicateTabsInCombinedSession2').checked = !q('chkHideDuplicateTabsInCombinedSession2').checked;
                                updateHideDuplicateTabsSettingAndRenderCombinedSession(q('chkHideDuplicateTabsInCombinedSession2').checked);
                            }
                            e.stopPropagation();
                        });
                        q('chkHideDuplicateTabsInCombinedSession2').addEventListener('click', function(e) {
                            updateHideDuplicateTabsSettingAndRenderCombinedSession(this.checked);
                            e.stopPropagation();
                        });
                    } else {
                        setSessionStatusElementContent('<div style="left: -3px;position: relative;cursor:default;"><span style="padding-left: 2px;">(No duplicate tabs)</span></div>', app.getTabFilteringDescriptionHTML(inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount));
                    }
                }
            } else {
                q('sessionStatusRight').innerHTML = app.getTabFilteringDescriptionHTML(inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount);
            }
            if (renderedSessionId != -14 || renderedSessionType != 'combined') {
                q('sessionNameInput_SessionRename').value = '';
                renderedSessionId = -14;
                renderedSessionGid = undefined;
                renderedSessionDesc = undefined;
                if (app.isDebug) {
                    var debugElement = q('sessionIdDebugValue') || _domUtil2.default.createElement('span', 'sessionIdDebugValue', 'debugValue debugValue_Right');
                    debugElement.innerHTML = 'Session Id: ' + renderedSessionId;
                    debugElement.style.right = '-9px';
                    debugElement.style.bottom = '3px';
                    debugElement.style.position = 'relative';
                    q('sessionStatus').insertBefore(debugElement, q('sessionStatusRight'));
                }
            }
            if (renderedSessionType != 'combined') {
                renderedSessionType = 'combined';
            }
            if (cb) {
                cb();
            } else {
                postSessionRender();
            }
        });
    }
    function postSessionRender() {
        thisUILayoutManager.arrangeMainPanel();
    }
    function initializePreviousSessionQueueSizeSettingDropdown() {
        var select = q('selPreviousSessionQueueSize');
        if (select) {
            select.innerHTML = '';
            var option;
            for (var i = 0; i <= 10; i++) {
                option = document.createElement('option');
                option.setAttribute('value', i);
                option.innerHTML = i;
                select.appendChild(option);
            }
        }
    }
    function setControlState_ShowHideUrls(show) {
        var onBtn = void 0, offBtn = void 0;
        if (show) {
            onBtn = q('btnShowURLs');
            offBtn = q('btnHideURLs');
        } else {
            onBtn = q('btnHideURLs');
            offBtn = q('btnShowURLs');
        }
        onBtn.classList.add('sbButton_on');
        offBtn.classList.remove('sbButton_on', 'sbButton_mouseover');
    }
    function startSessionTileInterval() {
        timer_SessionTileInterval = setInterval(function() {
            (0, _jquery2.default)('.sessionsPanel_SessionSummary').each(function() {
                sp.refreshSessionTileDate(this);
            });
        }, 60 * 1e3);
    }
    function stopSessionTileInterval() {
        clearInterval(timer_SessionTileInterval);
    }
    function updateRenderedSessionAge(date, sessionType, isUpdatedDate) {
        if (!date) return;
        q('sessionStatusLeft').innerHTML = app.sessionTypeDatePrefix(sessionType, isUpdatedDate) + '&nbsp;&nbsp;' + app.dateToDisplayString(date, null, us('dateDisplayType') === 'relative' ? 'standard' : us('dateDisplayType')) + '<span class="status_low">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' + app.dateToDisplayString(date, null, 'relative') + '</span>';
    }
    function toggleView() {
        saveShowHideUrlsAndUpdateUI(!us('sessionRender_RenderSessionURL'));
    }
    function processKeyboardShortcutKeydown(e) {
        if (!(0, _jquery2.default)('#dialogDiv').is(':visible') && (!_keyUtil2.default.hasAnyKeyModifier(e) || (e.ctrlKey && _domUtil2.default.os != 'MacOS' || e.metaKey && _domUtil2.default.os === 'MacOS') && e.keyCode === 90)) {
            if (e.keyCode === 86) {
                e.preventDefault();
                e.stopPropagation();
                toggleView();
            } else if (e.keyCode === 84) {
                e.preventDefault();
                e.stopPropagation();
                showDialog('dialogBody_ImportSession', undefined, undefined, function() {
                    q('sessionImportText').focus();
                    q('sessionImportText').select();
                });
            } else if (e.keyCode === 81) {
                e.preventDefault();
                e.stopPropagation();
                closeAllMenus();
                if (renderedSessionType === 'combined' && sp.selectedSessionSummaryElements_All.length > 1) {
                    doMergeSessions();
                }
            } else if (e.keyCode === 72) {
                e.preventDefault();
                e.stopPropagation();
                closeAllMenus();
                hideDialog(function() {
                    if (q('chkHideDuplicateTabsInCombinedSession2') && _domUtil2.default.isEnabled(q('chkHideDuplicateTabsInCombinedSession2'))) {
                        q('chkHideDuplicateTabsInCombinedSession2').checked = !q('chkHideDuplicateTabsInCombinedSession2').checked;
                        updateHideDuplicateTabsSettingAndRenderCombinedSession(q('chkHideDuplicateTabsInCombinedSession2').checked);
                    }
                });
            } else if (e.keyCode === 87 || e.keyCode === 113 && _domUtil2.default.os === 'Windows') {
                e.preventDefault();
                e.stopPropagation();
                doRenameRenderedSession();
            } else if (e.keyCode === 90) {
                e.preventDefault();
                e.stopPropagation();
                if (allowUndo) {
                    closeAllMenus();
                    hideDialog(function() {
                        bg.executeUndoAction(tabIdentifier);
                    });
                }
            } else if (e.keyCode === 67) {
                e.preventDefault();
                e.stopPropagation();
                closeAllMenus();
                hideDialog(function() {
                    sp.requestSelectSessionSummaryByIdAndType(-13, 'current', 'single');
                    q('sessionsPanelContainer').scrollTop = 0;
                });
            } else if (e.keyCode === 83) {
                if (renderedSessionType === 'current' || renderedSessionType === 'previous') {
                    e.preventDefault();
                    e.stopPropagation();
                    closeAllMenus();
                    hideDialog(doSaveOrCopyRenderedSession);
                }
            }
        }
        return true;
    }
    function processKeyboardShortcutKeyup(e) {
        if (!(0, _jquery2.default)('#dialogDiv').is(':visible')) {
            if (e.keyCode === 70) {
                e.preventDefault();
                e.stopPropagation();
                q('searchBox').focus();
                q('searchBox').select();
                hideDialog();
                closeAllMenus();
            } else if (e.keyCode === 37) {
                (0, _jquery2.default)('#sessionsPanel').focus();
            } else if (e.keyCode === 39) {
                (0, _jquery2.default)('#sessionRenderContainer').focus();
            }
        }
        return true;
    }
    function processGlobalKeyup(e) {
        if (us('enableKeyboardShortcuts')) {
            processKeyboardShortcutKeyup(e);
        }
        return true;
    }
    function processGlobalKeydown(e) {
        if (e.keyCode === 27) {
            e.preventDefault();
            e.stopPropagation();
            if (!closeAllMenus()) {
                clearSearch();
                q('searchBox').focus();
            }
            hideDialog();
            return false;
        } else {
            if (us('enableKeyboardShortcuts')) {
                processKeyboardShortcutKeydown(e);
            }
        }
        return true;
    }
    function hideActionStatusConditional(inSessionId, inSessionType, cb) {
        if (inSessionId != renderedSessionId || renderedSessionType != inSessionType) {
            db.getNextUndoAction(tabIdentifier, function(row) {
                if (row && row.action != 'sessionDelete') {
                    appStatusVisible(false);
                    allowUndo = false;
                }
                cb && cb();
            });
        } else {
            cb && cb();
        }
    }
    function navToDonatePage() {
        _browser2.default.openTab({
            url: 'https://sessionbuddy.com/donate/',
            active: true
        }, {
            focused: true
        });
    }
    function saveShowHideUrlsAndUpdateUI(val) {
        bg.sendRequestToAllSBTabs({
            id: 'showHideUrls',
            data: us('sessionRender_RenderSessionURL', val)
        });
    }
    function adjustExportOptionsUI(inClickedCheckbox, inCorrespondingCheckbox) {
        if (!inClickedCheckbox.checked && !inCorrespondingCheckbox.checked) {
            inCorrespondingCheckbox.checked = true;
        }
    }
    function getBackupText(cb) {
        db.getPreviousSessionWindows(undefined, undefined, function(p, tx) {
            db.getSavedSessionWindows(undefined, tx, function(savedSessionWindowRows) {
                _browser2.default.getAllWindowsAndTabs(function(wins) {
                    finish(p, savedSessionWindowRows, wins);
                });
            });
        });
        function finish(p, savedSessionWindowRows, c) {
            var thisTotal = 0;
            if (p) {
                thisTotal += p.length;
            }
            if (savedSessionWindowRows) {
                thisTotal += savedSessionWindowRows.length;
            }
            if (c) {
                thisTotal++;
            }
            getSessionText(p, savedSessionWindowRows, c, undefined, true, true, true, true, 'JSON_All', us('tabFiltering_FilterSessionBuddyTabs'), us('tabFiltering_FilterChromeAdministrativeTabs'), function(t) {
                cb && cb(t);
            });
        }
    }
    function setSessionExportText(cb) {
        switch ((0, _jquery2.default)('#sessionExport_Scope').val()) {
          case 'selected':
            var pids = [], sids = [], cid;
            for (var i = 0; i < sp.selectedSessionSummaryElements_All.length; i++) {
                switch (sp.getSessionTileType(sp.selectedSessionSummaryElements_All[i])) {
                  case 'current':
                    cid = true;
                    break;

                  case 'saved':
                    sids.push(sp.getSessionTileId(sp.selectedSessionSummaryElements_All[i]));
                    break;

                  case 'previous':
                    pids.push(sp.getSessionTileId(sp.selectedSessionSummaryElements_All[i]));
                    break;
                }
            }
            var headTileType = sp.getSessionTileType(sp.selectedSessionSummaryElement_Head), headTileId = sp.getSessionTileId(sp.selectedSessionSummaryElement_Head);
            if (!cid && headTileType === 'current') {
                cid = true;
            } else if (headTileType === 'saved') {
                if (sids.indexOf(headTileId) === -1) {
                    sids.push(headTileId);
                }
            } else if (headTileType === 'previous') {
                if (pids.indexOf(headTileId) === -1) {
                    pids.push(headTileId);
                }
            }
            db.getPreviousSessionWindows(pids, undefined, function(p, tx) {
                db.getSavedSessionWindows(sids, tx, function(savedSessionWindowRows) {
                    if (cid) {
                        _browser2.default.getAllWindowsAndTabs({
                            rotate: true
                        }, function(wins) {
                            finish(p, savedSessionWindowRows, wins);
                        });
                    } else {
                        finish(p, savedSessionWindowRows);
                    }
                });
            });
            break;

          case 'all':
            db.getPreviousSessionWindows(undefined, undefined, function(p, tx) {
                db.getSavedSessionWindows(undefined, tx, function(savedSessionWindowRows) {
                    _browser2.default.getAllWindowsAndTabs(function(wins) {
                        finish(p, savedSessionWindowRows, wins);
                    });
                });
            });
            break;

          case 'previous':
            db.getPreviousSessionWindows(undefined, undefined, function(p) {
                finish(p);
            });
            break;

          case 'saved':
            db.getSavedSessionWindows(undefined, undefined, function(savedSessionWindowRows) {
                finish(undefined, savedSessionWindowRows);
            });
            break;
        }
        function finish(p, savedSessionWindowRows, c) {
            var thisTotal = 0;
            if (p) {
                thisTotal += p.length;
            }
            if (savedSessionWindowRows) {
                thisTotal += savedSessionWindowRows.length;
            }
            if (c) {
                thisTotal++;
            }
            q('exportSessionCount').textContent = ' (' + thisTotal + ')';
            getSessionText(p, savedSessionWindowRows, c, undefined, q('chkShowSessions').checked, q('chkShowWindows').checked, q('chkShowTitles').checked, q('chkShowURLs').checked, getExportTxtVal(), us('tabFiltering_FilterSessionBuddyTabs'), us('tabFiltering_FilterChromeAdministrativeTabs'), function(t) {
                q('sessionExportText').value = t;
                setControlStates_ExportSession();
                cb && cb();
            });
        }
    }
    function processNormalizedImportInput(format, sessionsObject, displayLevel) {
        var sessionCount = 0, windowCount = 0, tabCount = 0;
        var addStr, displayStatus = 'Found ', consoleStr = 'Import:';
        thisImportedFormat = null;
        if (format) {
            consoleStr += ' ' + format + ':';
            thisImportedFormat = format;
        }
        try {
            if (sessionsObject && (sessionCount = sessionsObject.sessions.length)) {
                for (var i = 0; i < sessionCount; i++) {
                    windowCount += sessionsObject.sessions[i].windows.length;
                    for (var j = 0; j < sessionsObject.sessions[i].windows.length; j++) {
                        tabCount += sessionsObject.sessions[i].windows[j].tabs.length;
                    }
                }
                addStr = _util2.default.pluralize(sessionCount, 'session', 'sessions');
                consoleStr += ' ' + addStr;
                if (!displayLevel || displayLevel.toLowerCase() === 's') {
                    displayStatus += addStr;
                }
                if (windowCount) {
                    addStr = _util2.default.pluralize(windowCount, 'window', 'windows');
                    consoleStr += ' ' + addStr;
                    if (displayLevel.toLowerCase() === 'w') {
                        displayStatus += addStr;
                    }
                }
                if (tabCount) {
                    addStr = _util2.default.pluralize(tabCount, 'tab', 'tabs');
                    consoleStr += ' ' + addStr;
                    if (displayLevel.toLowerCase() === 't') {
                        displayStatus += addStr;
                    }
                }
            } else {
                sessionsObject = null;
                consoleStr += displayStatus = 'That doesn\'t look right';
            }
        } catch (ex) {
            console.log(ex);
            sessionsObject = null;
            consoleStr += displayStatus = 'That doesn\'t look right';
        }
        importedNormalizedSession = null;
        if ((0, _jquery2.default)('#dialogDiv').is(':visible') && (0, _jquery2.default)('#dialogBody_ImportSession').is(':visible')) {
            if (q('sessionImportText').value.trim()) {
                (0, _jquery2.default)('#importStatus').show().text(displayStatus);
                if (sessionsObject) {
                    (0, _jquery2.default)('#importStatus').removeClass('importStatus_error');
                    _domUtil2.default.enable(q('dialogFooterButtonMiddle'));
                    importedNormalizedSession = sessionsObject;
                } else {
                    (0, _jquery2.default)('#importStatus').addClass('importStatus_error');
                    _domUtil2.default.disable(q('dialogFooterButtonMiddle'));
                }
            } else {
                (0, _jquery2.default)('#importStatus').hide();
                _domUtil2.default.disable(q('dialogFooterButtonMiddle'));
            }
        }
        console.log(consoleStr);
    }
    function validateImport(t, cb) {
        var arr, i;
        var re_json = /^\{[\s\S]*\"(?:sessions|windows|tabs)\"\:[\s\S]*\}$/g;
        var re_csv = /^(?:Session,)?(?:Window,)?(?:Title,URL|Title|URL)(?:\n".+")+$/g;
        var field = '[^\\s].*';
        var nl = '\\n';
        var nlsp = '(?:\\n\\s*)';
        var vsep = nlsp + '*' + nl;
        var vsep2 = nlsp + '+' + nl;
        var indents = [ '   ', '\\t' ];
        var indent_level1 = '(?:' + indents.join('|') + ')';
        var indent_level2 = '(?:';
        for (i = 0; i < indents.length; i++) {
            if (i > 0) {
                indent_level2 += '|';
            }
            indent_level2 += indents[i] + indents[i];
        }
        indent_level2 += ')';
        var tabPair = indent_level2 + field + '\\n' + indent_level2 + field;
        var tabPairs = tabPair + '(?:' + vsep2 + tabPair + ')*';
        var tabs = indent_level2 + field + '(?:' + vsep + indent_level2 + field + ')*';
        var win = field + vsep + tabPairs;
        var session = field + '(?:' + vsep + indent_level1 + win + ')+';
        var replacements = {
            vsep: vsep,
            session: session
        };
        var re_text_s_w_tt = new RegExp(_util2.default.stringInterpolate('^{session}(?:{vsep}{session})*$', replacements), 'g');
        tabPair = indent_level1 + field + '\\n' + indent_level1 + field;
        tabPairs = tabPair + '(?:' + vsep2 + tabPair + ')*';
        win = field + vsep + tabPairs;
        replacements = {
            vsep: vsep,
            win: win
        };
        var re_text_w_tt = new RegExp(_util2.default.stringInterpolate('^{win}(?:{vsep}{win})*$', replacements), 'g');
        tabPair = field + '\\n' + field;
        tabPairs = tabPair + '(?:' + vsep2 + tabPair + ')*';
        replacements = {
            tabPairs: tabPairs
        };
        var re_text_tt = new RegExp(_util2.default.stringInterpolate('^{tabPairs}$', replacements), 'g');
        win = field + vsep + tabs;
        session = field + '(?:' + vsep + indent_level1 + win + ')+';
        replacements = {
            vsep: vsep,
            session: session
        };
        var re_text_s_w_t = new RegExp(_util2.default.stringInterpolate('^{session}(?:{vsep}{session})*$', replacements), 'g');
        tabs = indent_level1 + field + '(?:' + vsep + indent_level1 + field + ')*';
        win = field + vsep + tabs;
        replacements = {
            vsep: vsep,
            win: win
        };
        var re_text_w_t = new RegExp(_util2.default.stringInterpolate('^{win}(?:{vsep}{win})*$', replacements), 'g');
        tabs = field + '(?:' + vsep + field + ')*';
        replacements = {
            tabs: tabs
        };
        var re_text_t = new RegExp(_util2.default.stringInterpolate('^{tabs}$', replacements), 'g');
        var parseObject, sessionsObject, format, effectiveIndent, tab, dataLevel;
        if (re_json.test(t)) {
            try {
                parseObject = JSON.parse(t);
                dataLevel = 's';
                format = 'JSON';
                sessionsObject = {};
                if (parseObject.hasOwnProperty('sessions')) {
                    sessionsObject.sessions = parseObject.sessions;
                    for (i = 0; i < sessionsObject.sessions.length; i++) {
                        session = sessionsObject.sessions[i];
                        if (session.hasOwnProperty('tabs') && !session.hasOwnProperty('windows')) {
                            session.windows = [ {
                                tabs: session.tabs
                            } ];
                            delete session.tabs;
                        }
                    }
                } else if (parseObject.hasOwnProperty('windows')) {
                    dataLevel = 'w';
                    sessionsObject.sessions = [ {
                        windows: parseObject.windows
                    } ];
                } else if (parseObject.hasOwnProperty('tabs')) {
                    dataLevel = 't';
                    sessionsObject.sessions = [ {
                        windows: [ {
                            tabs: parseObject.tabs
                        } ]
                    } ];
                }
            } catch (ex) {
                console.log(ex);
                sessionsObject = null;
            }
        } else if (re_csv.test(t)) {
            dataLevel = 's';
            format = 'CSV';
            var header, titleIdx, urlIdx;
            sessionsObject = {};
            session = undefined;
            win = undefined;
            readLines(t, true, function(l, inHasData, isFirst, isFirstWithData) {
                if (isFirstWithData) {
                    header = l.split(/\s*,\s*/);
                    for (i = 0; i < header.length; i++) {
                        header[i] = header[i].toLowerCase();
                        if (header[i] === 'title') {
                            titleIdx = i;
                        } else if (header[i] === 'url') {
                            urlIdx = i;
                        }
                    }
                } else if (inHasData) {
                    arr = getCSVFields(l);
                    if (header[0] === 'session') {
                        if (!session || arr[0] !== session.name) {
                            if (!session) {
                                sessionsObject.sessions = [];
                            }
                            sessionsObject.sessions.push(session = {
                                name: arr[0]
                            });
                            session.windows = [];
                            session.windows.push(win = {});
                            if (header[1] === 'window') {
                                win.nx_title = arr[1];
                            }
                            win.tabs = [];
                        } else if (header[1] === 'window') {
                            if (arr[1] !== win.nx_title) {
                                session.windows.push(win = {
                                    nx_title: arr[1]
                                });
                                win.tabs = [];
                            }
                        }
                    } else if (header[0] === 'window') {
                        dataLevel = 'w';
                        if (!session) {
                            sessionsObject.sessions = [];
                            sessionsObject.sessions.push(session = {});
                            session.windows = [];
                        }
                        if (!win || arr[0] !== win.nx_title) {
                            session.windows.push(win = {
                                nx_title: arr[0]
                            });
                            win.tabs = [];
                        }
                    } else if (!session && (header[0] === 'title' || header[0] === 'url')) {
                        dataLevel = 't';
                        sessionsObject.sessions = [];
                        sessionsObject.sessions.push(session = {});
                        session.windows = [];
                        session.windows.push(win = {});
                        win.tabs = [];
                    }
                    tab = {};
                    if (titleIdx !== undefined) {
                        tab.nx_title = arr[titleIdx];
                    }
                    if (urlIdx !== undefined) {
                        tab.url = arr[urlIdx];
                        tab.nx_googleFallbackFavIconUrl = 'http://www.google.com/s2/favicons?domain_url=' + tab.url;
                    }
                    win.tabs.push(tab);
                }
            });
        } else if (re_text_s_w_tt.test(t)) {
            try {
                dataLevel = 's';
                format = 'Text (sessions, windows, tab pairs)';
                sessionsObject = {};
                session = undefined;
                win = undefined;
                tab = undefined;
                readLines(t, false, function(l, inHasData, isFirst, isFirstWithData) {
                    if (inHasData) {
                        if (isFirstWithData) {
                            sessionsObject.sessions = [ session = {
                                name: l.trim()
                            } ];
                        } else {
                            if (!effectiveIndent) {
                                effectiveIndent = l.match(/^\s+/);
                                if (effectiveIndent && effectiveIndent.length) {
                                    effectiveIndent = effectiveIndent[0];
                                }
                            }
                            switch (getLevel(l, effectiveIndent)) {
                              case 0:
                                sessionsObject.sessions.push(session = {
                                    name: l.trim()
                                });
                                win = undefined;
                                tab = undefined;
                                break;

                              case 1:
                                if (!win) {
                                    session.windows = [];
                                }
                                session.windows.push(win = {
                                    nx_title: l.trim()
                                });
                                tab = undefined;
                                break;

                              case 2:
                                if (!win.tabs) {
                                    win.tabs = [];
                                }
                                if (tab) {
                                    if (_urlUtil2.default.isURL(tab.url = l.trim())) {
                                        tab.nx_googleFallbackFavIconUrl = 'http://www.google.com/s2/favicons?domain_url=' + tab.url;
                                    } else {
                                        throw 'bad URL ' + tab.url;
                                    }
                                    tab = undefined;
                                } else {
                                    win.tabs.push(tab = {
                                        nx_title: l.trim()
                                    });
                                }
                                break;
                            }
                        }
                    }
                });
            } catch (ex) {
                console.log(ex);
                sessionsObject = null;
            }
        } else if (re_text_w_tt.test(t)) {
            try {
                dataLevel = 'w';
                format = 'Text (windows, tab pairs)';
                sessionsObject = {};
                session = undefined;
                win = undefined;
                tab = undefined;
                readLines(t, false, function(l, inHasData, isFirst, isFirstWithData) {
                    if (inHasData) {
                        if (isFirstWithData) {
                            sessionsObject.sessions = [ session = {
                                windows: [ win = {
                                    nx_title: l.trim()
                                } ]
                            } ];
                        } else {
                            if (!effectiveIndent) {
                                effectiveIndent = l.match(/^\s+/);
                                if (effectiveIndent && effectiveIndent.length) {
                                    effectiveIndent = effectiveIndent[0];
                                }
                            }
                            switch (getLevel(l, effectiveIndent)) {
                              case 0:
                                session.windows.push(win = {
                                    nx_title: l.trim()
                                });
                                tab = undefined;
                                break;

                              case 1:
                                if (!win.tabs) {
                                    win.tabs = [];
                                }
                                if (tab) {
                                    if (_urlUtil2.default.isURL(tab.url = l.trim())) {
                                        tab.nx_googleFallbackFavIconUrl = 'http://www.google.com/s2/favicons?domain_url=' + tab.url;
                                    } else {
                                        throw 'bad URL ' + tab.url;
                                    }
                                    tab = undefined;
                                } else {
                                    win.tabs.push(tab = {
                                        nx_title: l.trim()
                                    });
                                }
                                break;
                            }
                        }
                    }
                });
            } catch (ex) {
                console.log(ex);
                sessionsObject = null;
            }
        } else if (re_text_tt.test(t)) {
            try {
                dataLevel = 't';
                format = 'Text (tab pairs)';
                sessionsObject = {};
                win = undefined;
                tab = undefined;
                readLines(t, true, function(l, inHasData, isFirst, isFirstWithData) {
                    if (inHasData) {
                        if (isFirstWithData) {
                            sessionsObject.sessions = [ {
                                windows: [ win = {
                                    tabs: []
                                } ]
                            } ];
                        }
                        if (tab) {
                            if (_urlUtil2.default.isURL(tab.url = l.trim())) {
                                tab.nx_googleFallbackFavIconUrl = 'http://www.google.com/s2/favicons?domain_url=' + tab.url;
                            } else {
                                throw 'bad URL ' + tab.url;
                            }
                            tab = undefined;
                        } else {
                            win.tabs.push(tab = {
                                nx_title: l.trim()
                            });
                        }
                    }
                });
            } catch (ex) {
                console.log(ex);
                sessionsObject = null;
            }
        } else if (re_text_s_w_t.test(t)) {
            try {
                dataLevel = 's';
                format = 'Text (sessions, windows, urls)';
                sessionsObject = {};
                session = undefined;
                win = undefined;
                readLines(t, false, function(l, inHasData, isFirst, isFirstWithData) {
                    if (inHasData) {
                        if (isFirstWithData) {
                            sessionsObject.sessions = [ session = {
                                name: l.trim()
                            } ];
                        } else {
                            if (!effectiveIndent) {
                                effectiveIndent = l.match(/^\s+/);
                                if (effectiveIndent && effectiveIndent.length) {
                                    effectiveIndent = effectiveIndent[0];
                                }
                            }
                            switch (getLevel(l, effectiveIndent)) {
                              case 0:
                                sessionsObject.sessions.push(session = {
                                    name: l.trim()
                                });
                                win = undefined;
                                break;

                              case 1:
                                if (!win) {
                                    session.windows = [];
                                }
                                session.windows.push(win = {
                                    nx_title: l.trim()
                                });
                                break;

                              case 2:
                                if (!win.tabs) {
                                    win.tabs = [];
                                }
                                l = l.trim();
                                if (_urlUtil2.default.isURL(l)) {
                                    win.tabs.push({
                                        url: l,
                                        nx_googleFallbackFavIconUrl: 'http://www.google.com/s2/favicons?domain_url=' + l
                                    });
                                } else {
                                    throw 'bad URL ' + l;
                                }
                                break;
                            }
                        }
                    }
                });
            } catch (ex) {
                console.log(ex);
                sessionsObject = null;
            }
        } else if (re_text_w_t.test(t)) {
            try {
                dataLevel = 'w';
                format = 'Text (windows, urls)';
                sessionsObject = {};
                session = undefined;
                win = undefined;
                readLines(t, false, function(l, inHasData, isFirst, isFirstWithData) {
                    if (inHasData) {
                        if (isFirstWithData) {
                            sessionsObject.sessions = [ session = {
                                windows: [ win = {
                                    nx_title: l.trim()
                                } ]
                            } ];
                        } else {
                            if (!effectiveIndent) {
                                effectiveIndent = l.match(/^\s+/);
                                if (effectiveIndent && effectiveIndent.length) {
                                    effectiveIndent = effectiveIndent[0];
                                }
                            }
                            switch (getLevel(l, effectiveIndent)) {
                              case 0:
                                session.windows.push(win = {
                                    nx_title: l.trim()
                                });
                                break;

                              case 1:
                                if (!win.tabs) {
                                    win.tabs = [];
                                }
                                l = l.trim();
                                if (_urlUtil2.default.isURL(l)) {
                                    win.tabs.push({
                                        url: l,
                                        nx_googleFallbackFavIconUrl: 'http://www.google.com/s2/favicons?domain_url=' + l
                                    });
                                } else {
                                    throw 'bad URL ' + l;
                                }
                                break;
                            }
                        }
                    }
                });
            } catch (ex) {
                console.log(ex);
                sessionsObject = null;
            }
        } else if (re_text_t.test(t)) {
            try {
                dataLevel = 't';
                format = 'Text (urls)';
                sessionsObject = {};
                win = undefined;
                readLines(t, true, function(l, inHasData, isFirst, isFirstWithData) {
                    if (inHasData) {
                        if (isFirstWithData) {
                            sessionsObject.sessions = [ {
                                windows: [ win = {
                                    tabs: []
                                } ]
                            } ];
                        }
                        l = l.trim();
                        if (_urlUtil2.default.isURL(l)) {
                            win.tabs.push({
                                url: l,
                                nx_googleFallbackFavIconUrl: 'http://www.google.com/s2/favicons?domain_url=' + l
                            });
                        } else {
                            throw 'bad URL ' + l;
                        }
                    }
                });
            } catch (ex) {
                console.log(ex);
                sessionsObject = null;
            }
        }
        cb(format, sessionsObject, dataLevel);
    }
    function getLevel(t, indent) {
        if (!indent) {
            return 0;
        }
        var cummIndent = indent;
        for (var i = 0; t.startsWith(cummIndent); i++) {
            cummIndent += indent;
        }
        return i;
    }
    function getCSVFields(l) {
        l = l.trim();
        if (l[0] === '"' && l[l.length - 1] === '"') {
            l = l.substring(1, l.length - 1);
        }
        var arr1 = l.split(/("\s*,\s*")/);
        var arr2 = [], concat = false, trailingQuotes;
        for (var i = 0; i < arr1.length; i++) {
            if (!(i % 2)) {
                if (concat) {
                    arr2[arr2.length - 1] += arr1[i - 1] + arr1[i];
                } else {
                    arr2.push(arr1[i]);
                }
                trailingQuotes = arr1[i].match(/"+$/);
                if (trailingQuotes && trailingQuotes[0].length % 2) {
                    concat = true;
                } else {
                    concat = false;
                }
            }
        }
        return arr2;
    }
    function readLines(t, trim, cb) {
        var arr = t.split('\n'), nonBlankNotFound = true, notBlank;
        for (var i = 0; i < arr.length; i++) {
            notBlank = arr[i].trim().length;
            if (notBlank && nonBlankNotFound) {
                cb(trim ? arr[i].trim() : arr[i], notBlank, i === 0, true);
                nonBlankNotFound = false;
            } else {
                cb(trim ? arr[i].trim() : arr[i], notBlank, i === 0, false);
            }
        }
    }
    function showOptionsDialogAndSelectThisTab() {
        showDialog('dialogBody_Options');
        chrome.extension.sendMessage({
            id: 'selectThisTab'
        });
    }
    function suppressRatingSolicitation() {
        db.setSetting('suppressMessage132', 'true');
    }
    function appStatusSubclass(inSeverity) {
        switch (inSeverity) {
          case 0:
            return 'messageInnerContainer_Success';

          case 1:
            return 'messageInnerContainer_Warn';

          case 2:
            return 'messageInnerContainer_Fail';

          case 53:
            return 'messageInnerContainer_Info2';

          default:
            return 'messageInnerContainer_Info';
        }
    }
    function appStatusVisible(inHtml, inSeverity, inDelayHideDuration) {
        var applicationStatusInner = (0, _jquery2.default)('#applicationStatusInner');
        if (arguments.length) {
            clearTimeout(timer_DelayHideActionStatus);
            if (inHtml) {
                var delayHideActionStatusDuration = inDelayHideDuration || (inSeverity === 0 ? 1e3 * 60 * 2 : 1e3 * 3);
                q('appStatusMessage').innerHTML = inHtml;
                applicationStatusInner.attr('class', appStatusSubclass(inSeverity));
                if (inHtml.toLowerCase().includes('<br>')) {
                    applicationStatusInner.addClass('appStatusInner_TwoLines');
                } else {
                    applicationStatusInner.removeClass('appStatusInner_TwoLines');
                }
                thisUILayoutManager.arrangeMainPanelHeader(true);
                applicationStatusInner.animate({
                    top: '0'
                }, 100, 'swing', function() {
                    if (delayHideActionStatusDuration > -1) {
                        timer_DelayHideActionStatus = setTimeout(function() {
                            appStatusVisible(false);
                        }, delayHideActionStatusDuration);
                    }
                });
            } else {
                applicationStatusInner.animate({
                    top: '60px'
                }, 100, 'swing', function() {
                    thisUILayoutManager.arrangeMainPanelHeader();
                });
            }
        }
        return applicationStatusInner.is(':visible');
    }
    function updateSessionSummary(sessionInfo, cb) {
        if (!sessionInfo) return cb && cb();
        sp.requestUpdateSessionSummaryFilterCountsByIdAndType(sessionInfo.id, sessionInfo.type, sessionInfo.unfilteredWindowCount, sessionInfo.filteredWindowCount, sessionInfo.unfilteredTabCount, sessionInfo.filteredTabCount);
        if (sessionInfo.type === 'previous') return cb && cb();
        updateRenderedSessionAge(new Date(_dateUtil2.default.utcDateStringToMS(sessionInfo.type === 'saved' ? sessionInfo.updated || sessionInfo.created : sessionInfo.created || sessionInfo.updated)), sessionInfo.type, sessionInfo.updated && (!sessionInfo.created || _dateUtil2.default.utcDateStringToMS(sessionInfo.created) < _dateUtil2.default.utcDateStringToMS(sessionInfo.updated)));
        sp.updateSessionTileDate(sessionInfo.id, sessionInfo.type, sessionInfo.created && new Date(_dateUtil2.default.utcDateStringToMS(sessionInfo.created)), sessionInfo.updated && new Date(_dateUtil2.default.utcDateStringToMS(sessionInfo.updated)), cb);
    }
    function saveOrUpdateRenderedSession(inName, cb, inShowSuccessStatus, inModificationUTCDateStorageString, inUpdatePrevious, gid) {
        var effectiveSessionId = renderedSessionId;
        app.countFilteredWindowsTabs(renderedSessionWindows, function(inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount) {
            if (renderedSessionType === 'current' || renderedSessionType === 'previous' && !inUpdatePrevious || renderedSessionType === 'combined') {
                db.saveSavedSession(renderedSessionWindows, inName, inModificationUTCDateStorageString || renderedSessionRenderDateTime.toJSON(), inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount, function(inSessionId, inUTCDateStorageString) {
                    if (inSessionId === null) {
                        appStatusVisible('Failed to save session', 2);
                    } else {
                        if (renderedSessionType === 'current') {
                            app.countStat_SessionSaveCurrent();
                        } else if (renderedSessionType === 'previous') {
                            app.countStat_SessionSavePrevious();
                        } else if (renderedSessionType === 'combined') {
                            app.countStat_SessionSaveCombined();
                        }
                        if (inShowSuccessStatus) {
                            appStatusVisible('Session saved', 0);
                        }
                        hideActionStatusConditional(inSessionId, 'saved');
                    }
                    (cb = cb || postSaveOrUpdateRenderedSession) && cb(true, app.createSessionInfo('saved', inSessionId, null, null, inName, inUTCDateStorageString, inUTCDateStorageString, inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount));
                }, undefined, undefined, gid);
            } else if (renderedSessionType === 'saved') {
                db.updateSavedSession(renderedSessionId, renderedSessionWindows, inName, inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount, inModificationUTCDateStorageString, function(inSessionId, inIsUpdated, inUTCDateStorageString) {
                    if (inSessionId) {
                        bg.sendRequestToAllSBTabs({
                            id: 'refreshSession',
                            data: {
                                sessionId: effectiveSessionId
                            },
                            excludeTab: tabIdentifier
                        });
                        if (inShowSuccessStatus) {
                            appStatusVisible('Session updated', 0);
                        }
                    } else {
                        appStatusVisible('Failed to update session', 2);
                    }
                    (cb = cb || postSaveOrUpdateRenderedSession) && cb(false, app.createSessionInfo('saved', inSessionId, null, null, inName, null, inUTCDateStorageString, inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount));
                });
            } else if (renderedSessionType === 'previous') {
                db.updatePreviousSession(renderedSessionId, renderedSessionWindows, inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount, function(inSessionId) {
                    if (inSessionId === null) {
                        appStatusVisible('Failed to update session', 2);
                    } else {
                        bg.sendRequestToAllSBTabs({
                            id: 'refreshSession',
                            data: {
                                sessionId: effectiveSessionId
                            },
                            excludeTab: tabIdentifier
                        });
                        if (inShowSuccessStatus) {
                            appStatusVisible('Session updated', 0);
                        }
                    }
                    (cb = cb || postSaveOrUpdateRenderedSession) && cb(false, app.createSessionInfo('previous', inSessionId, null, null, null, null, null, inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount));
                });
            }
        });
    }
    function getWindowText_Text(wins, stringArray, inShowWindows, inShowTitles, inShowURLs, inTabFilterSetting_SB, inTabFilterSetting_Admin, startWindowCount, sessionInfo) {
        var localRenderedSessionWinCount = 0;
        var localRenderedSessionTabCount = 0;
        var windowTabCount = 0;
        startWindowCount = startWindowCount || 0;
        var indent;
        if (sessionInfo) {
            indent = '   ';
        } else {
            indent = '';
        }
        for (var i = 0; i < wins.length; i++) {
            if (!app.isFilteredWindow(wins[i], 0, inTabFilterSetting_SB, inTabFilterSetting_Admin)) {
                localRenderedSessionWinCount++;
                windowTabCount = 0;
                for (var j = 0; j < wins[i].tabs.length; j++) {
                    if (!app.isFilteredTab(wins[i].tabs[j], inTabFilterSetting_SB, inTabFilterSetting_Admin)) {
                        localRenderedSessionTabCount++;
                        windowTabCount++;
                        if (localRenderedSessionTabCount > 1) {
                            stringArray.push('\n');
                        } else {
                            if (stringArray.length) {
                                stringArray.push('\n');
                                if (sessionInfo || inShowWindows || inShowTitles && inShowURLs) {
                                    stringArray.push('\n');
                                }
                            }
                            if (sessionInfo) {
                                stringArray.push(sessionInfo.name.trim());
                                stringArray.push('\n\n');
                            }
                        }
                        if (inShowWindows && windowTabCount == 1) {
                            if (localRenderedSessionWinCount != 1) {
                                stringArray.push('\n');
                            }
                            stringArray.push(indent + app.getEffectiveWindowTitle(wins[i], localRenderedSessionWinCount + startWindowCount));
                            stringArray.push('\n\n');
                        }
                        if (inShowTitles && app.getEffectiveTabTitle(wins[i].tabs[j]).trim()) {
                            if (inShowURLs && localRenderedSessionTabCount > 1 && (!inShowWindows || inShowWindows && windowTabCount > 1)) {
                                stringArray.push('\n');
                            }
                            if (inShowWindows) {
                                stringArray.push('   ');
                            }
                            stringArray.push(indent + app.getEffectiveTabTitle(wins[i].tabs[j]).trim());
                        }
                        if (inShowURLs) {
                            if (inShowTitles) {
                                stringArray.push('\n');
                            }
                            if (inShowWindows) {
                                stringArray.push('   ');
                            }
                            stringArray.push(indent + wins[i].tabs[j].url);
                        }
                    }
                }
            }
        }
        return localRenderedSessionWinCount;
    }
    function getWindowText_CSV(wins, stringArray, inShowWindows, inShowTitles, inShowURLs, inTabFilterSetting_SB, inTabFilterSetting_Admin, startWindowCount, sessionInfo) {
        var localRenderedSessionWinCount = 0;
        var localRenderedSessionTabCount = 0;
        startWindowCount = startWindowCount || 0;
        for (var i = 0; i < wins.length; i++) {
            if (!app.isFilteredWindow(wins[i], 0, inTabFilterSetting_SB, inTabFilterSetting_Admin)) {
                localRenderedSessionWinCount++;
                for (var j = 0; j < wins[i].tabs.length; j++) {
                    if (!app.isFilteredTab(wins[i].tabs[j], inTabFilterSetting_SB, inTabFilterSetting_Admin)) {
                        localRenderedSessionTabCount++;
                        if (localRenderedSessionTabCount > 1) {
                            stringArray.push('\n');
                        } else {
                            if (stringArray.length) {
                                stringArray.push('\n');
                            }
                        }
                        if (sessionInfo) {
                            stringArray.push(_util2.default.toCSVField(sessionInfo.name));
                            stringArray.push(',');
                        }
                        if (inShowWindows) {
                            stringArray.push(_util2.default.toCSVField(app.getEffectiveWindowTitle(wins[i], localRenderedSessionWinCount + startWindowCount)));
                            stringArray.push(',');
                        }
                        if (inShowTitles) {
                            stringArray.push(_util2.default.toCSVField(app.getEffectiveTabTitle(wins[i].tabs[j])));
                            if (inShowURLs) {
                                stringArray.push(',');
                            }
                        }
                        if (inShowURLs) {
                            stringArray.push(_util2.default.toCSVField(wins[i].tabs[j].url));
                        }
                    }
                }
            }
        }
        return localRenderedSessionWinCount;
    }
    function getWindowText_HTML(wins, stringArray, inShowWindows, inShowTitles, inShowURLs, inTabFilterSetting_SB, inTabFilterSetting_Admin, startWindowCount, sessionInfo) {
        var localRenderedSessionWinCount = 0;
        var localRenderedSessionTabCount = 0;
        var windowTabCount = 0;
        startWindowCount = startWindowCount || 0;
        for (var i = 0; i < wins.length; i++) {
            if (!app.isFilteredWindow(wins[i], 0, inTabFilterSetting_SB, inTabFilterSetting_Admin)) {
                localRenderedSessionWinCount++;
                windowTabCount = 0;
                for (var j = 0; j < wins[i].tabs.length; j++) {
                    if (!app.isFilteredTab(wins[i].tabs[j], inTabFilterSetting_SB, inTabFilterSetting_Admin)) {
                        localRenderedSessionTabCount++;
                        windowTabCount++;
                        if (sessionInfo && localRenderedSessionTabCount === 1) {
                            stringArray.push('\n      <h1>' + sessionInfo.name + '</h1>');
                            if (!inShowWindows) {
                                stringArray.push('\n      <ul>');
                            }
                        }
                        if (inShowWindows && windowTabCount === 1) {
                            stringArray.push('\n      <h2>Window ' + (localRenderedSessionWinCount + startWindowCount) + '</h2>');
                            stringArray.push('\n      <ul>');
                        }
                        if (inShowTitles && app.getEffectiveTabTitle(wins[i].tabs[j]).trim()) {
                            if (inShowURLs) {
                                var faviconUrl = app.getAdjustedFavIconUrl(wins[i].tabs[j], true);
                                stringArray.push('\n         <li><img class="sb-favicon" src="' + (faviconUrl || 'https://sessionbuddy.com/images/default.png') + '"><a href="' + wins[i].tabs[j].url + '" target="_blank">' + (app.getEffectiveTabTitle(wins[i].tabs[j]).trim() ? _util2.default.htmlEncode(app.getEffectiveTabTitle(wins[i].tabs[j]).trim()) : wins[i].tabs[j].url) + '</a></li>');
                            } else {
                                stringArray.push('\n         <li>' + app.getEffectiveTabTitle(wins[i].tabs[j]).trim() + '</li>');
                            }
                        } else {
                            stringArray.push('\n         <li><a href="' + wins[i].tabs[j].url + '" target="_blank">' + wins[i].tabs[j].url + '</a></li>');
                        }
                    }
                }
                if (inShowWindows && windowTabCount) {
                    stringArray.push('\n      </ul>');
                }
            }
        }
        if (sessionInfo && !inShowWindows && localRenderedSessionTabCount) {
            stringArray.push('\n      </ul>');
        }
        return localRenderedSessionWinCount;
    }
    function getWindowText_Markdown(wins, stringArray, inShowWindows, inShowTitles, inShowURLs, inTabFilterSetting_SB, inTabFilterSetting_Admin, startWindowCount, sessionInfo) {
        var localRenderedSessionWinCount = 0;
        var localRenderedSessionTabCount = 0;
        var windowTabCount = 0;
        startWindowCount = startWindowCount || 0;
        for (var i = 0; i < wins.length; i++) {
            if (!app.isFilteredWindow(wins[i], 0, inTabFilterSetting_SB, inTabFilterSetting_Admin)) {
                localRenderedSessionWinCount++;
                windowTabCount = 0;
                for (var j = 0; j < wins[i].tabs.length; j++) {
                    if (!app.isFilteredTab(wins[i].tabs[j], inTabFilterSetting_SB, inTabFilterSetting_Admin)) {
                        localRenderedSessionTabCount++;
                        windowTabCount++;
                        if (localRenderedSessionTabCount > 1) {
                            stringArray.push('\n');
                        } else {
                            if (stringArray.length) {
                                stringArray.push('\n');
                                if (sessionInfo || inShowWindows) {
                                    stringArray.push('\n');
                                }
                            }
                            if (sessionInfo) {
                                stringArray.push('# ' + sessionInfo.name);
                                stringArray.push('\n\n');
                            }
                        }
                        if (inShowWindows && windowTabCount == 1) {
                            if (localRenderedSessionWinCount != 1) {
                                stringArray.push('\n');
                            }
                            stringArray.push('## Window ');
                            stringArray.push(localRenderedSessionWinCount + startWindowCount);
                            stringArray.push('\n\n');
                        }
                        stringArray.push('* ');
                        if (inShowTitles && app.getEffectiveTabTitle(wins[i].tabs[j]).trim()) {
                            if (inShowURLs) {
                                stringArray.push('[' + app.getEffectiveTabTitle(wins[i].tabs[j]).trim() + '](' + wins[i].tabs[j].url + ')');
                            } else {
                                stringArray.push(app.getEffectiveTabTitle(wins[i].tabs[j]).trim());
                            }
                        } else {
                            stringArray.push('[' + wins[i].tabs[j].url + '](' + wins[i].tabs[j].url + ')');
                        }
                    }
                }
            }
        }
        return localRenderedSessionWinCount;
    }
    function getWindowText_JSON(wins, stringArray, inShowWindows, inShowTitles, inShowURLs, inTabFilterSetting_SB, inTabFilterSetting_Admin, startWindowCount, sessionInfo) {
        var arr = [], i, j, keyWins = [];
        for (i = 0; i < wins.length; i++) {
            if (!app.isFilteredWindow(wins[i], 0, inTabFilterSetting_SB, inTabFilterSetting_Admin)) {
                keyWins.push(JSON.parse(JSON.stringify(wins[i])));
                for (j = wins[i].tabs.length; j--; ) {
                    if (app.isFilteredTab(wins[i].tabs[j], inTabFilterSetting_SB, inTabFilterSetting_Admin)) {
                        keyWins[keyWins.length - 1].tabs.splice(j, 1);
                    }
                }
            }
        }
        if (keyWins.length) {
            if (stringArray.length) {
                stringArray.push(',\n');
            }
            if (sessionInfo && inShowWindows) {
                sessionInfo.windows = keyWins;
                stringArray.push(JSON.stringify(sessionInfo));
            } else if (!sessionInfo && !inShowWindows) {
                for (i = 0; i < keyWins.length; i++) {
                    for (j = 0; j < keyWins[i].tabs.length; j++) {
                        arr.push(JSON.stringify(keyWins[i].tabs[j]));
                    }
                }
                stringArray.push(arr.join(','));
            } else if (sessionInfo && !inShowWindows) {
                for (i = 0; i < keyWins.length; i++) {
                    for (var j = 0; j < keyWins[i].tabs.length; j++) {
                        arr.push(keyWins[i].tabs[j]);
                    }
                }
                sessionInfo.tabs = arr;
                stringArray.push(JSON.stringify(sessionInfo));
            } else {
                for (i = 0; i < keyWins.length; i++) {
                    arr.push(JSON.stringify(keyWins[i]));
                }
                stringArray.push(arr.join(','));
            }
        }
        return keyWins.length;
    }
    function getWindowText_JSON_All(wins, stringArray, inShowWindows, inShowTitles, inShowURLs, inTabFilterSetting_SB, inTabFilterSetting_Admin, startWindowCount, sessionInfo) {
        if (stringArray.length) {
            stringArray.push(',\n');
        }
        var arr = [], i, j;
        if (sessionInfo && inShowWindows) {
            sessionInfo.windows = wins;
            stringArray.push(JSON.stringify(sessionInfo));
        } else if (!sessionInfo && !inShowWindows) {
            for (i = 0; i < wins.length; i++) {
                for (j = 0; j < wins[i].tabs.length; j++) {
                    arr.push(JSON.stringify(wins[i].tabs[j]));
                }
            }
            stringArray.push(arr.join(','));
        } else if (sessionInfo && !inShowWindows) {
            for (i = 0; i < wins.length; i++) {
                for (var j = 0; j < wins[i].tabs.length; j++) {
                    arr.push(wins[i].tabs[j]);
                }
            }
            sessionInfo.tabs = arr;
            stringArray.push(JSON.stringify(sessionInfo));
        } else {
            for (i = 0; i < wins.length; i++) {
                arr.push(JSON.stringify(wins[i]));
            }
            stringArray.push(arr.join(','));
        }
        return wins.length;
    }
    function getSessionText(p, savedSessionWindowRows, c, r, inShowSessions, inShowWindows, inShowTitles, inShowURLs, inFormat, inTabFilterSetting_SB, inTabFilterSetting_Admin, cb) {
        if (!p && !savedSessionWindowRows && !c && !r) {
            cb('');
        }
        var stringArray = [];
        var sessionWindowsRenderer, windowCount = 0, sessionInfo, sessionCount = 0, windowRenderCount;
        switch (inFormat) {
          case 'CSV':
            sessionWindowsRenderer = getWindowText_CSV;
            break;

          case 'JSON':
            sessionWindowsRenderer = getWindowText_JSON;
            break;

          case 'HTML':
            sessionWindowsRenderer = getWindowText_HTML;
            break;

          case 'Markdown':
            sessionWindowsRenderer = getWindowText_Markdown;
            break;

          case 'JSON_All':
            sessionWindowsRenderer = getWindowText_JSON_All;
            break;

          default:
            sessionWindowsRenderer = getWindowText_Text;
        }
        if (r) {
            sessionInfo = null;
            if (inShowSessions) {
                sessionInfo = {
                    type: renderedSessionType,
                    name: q('sessionTitle').textContent,
                    generated: renderedSessionRenderDateTime,
                    id: renderedSessionId
                };
                if (renderedSessionGid) {
                    sessionInfo.gid = renderedSessionGid;
                }
            }
            windowCount += sessionWindowsRenderer(r, stringArray, inShowWindows, inShowTitles, inShowURLs, inTabFilterSetting_SB, inTabFilterSetting_Admin, 0, sessionInfo);
        }
        if (c) {
            sessionInfo = null;
            if (inShowSessions) {
                sessionInfo = {
                    type: 'current',
                    name: inFormat === 'JSON' || inFormat === 'JSON_All' ? undefined : 'Current Session',
                    generated: new Date()
                };
            }
            windowCount += sessionWindowsRenderer(c, stringArray, inShowWindows, inShowTitles, inShowURLs, inTabFilterSetting_SB, inTabFilterSetting_Admin, 0, sessionInfo);
        }
        if (p) {
            sessionInfo = null;
            sessionCount = 1;
            for (var i = 0; i < p.length; i++) {
                if (inShowSessions) {
                    sessionInfo = {
                        type: 'previous',
                        name: inFormat === 'JSON' || inFormat === 'JSON_All' ? undefined : 'Previous Session ' + sessionCount + ' [' + (us('dateDisplayType') === 'standard' ? (0, 
                        _moment2.default)(p.item(i).recordingDateTime).format('L LT') : (0, _moment2.default)(p.item(i).recordingDateTime).format(us('customDateFormat'))) + ']',
                        generated: new Date(p.item(i).recordingDateTime),
                        created: new Date(p.item(i).creationDateTime),
                        id: p.item(i).id,
                        gid: p.item(i).thumbnail
                    };
                }
                if (windowRenderCount = sessionWindowsRenderer(_util2.default.jsonSafeParse(p.item(i).windows), stringArray, inShowWindows, inShowTitles, inShowURLs, inTabFilterSetting_SB, inTabFilterSetting_Admin, inShowSessions ? 0 : windowCount, sessionInfo)) {
                    windowCount += windowRenderCount;
                    sessionCount++;
                }
            }
        }
        if (savedSessionWindowRows) {
            sessionInfo = null;
            sessionCount = 1;
            for (var i = 0; i < savedSessionWindowRows.length; i++) {
                if (inShowSessions) {
                    sessionInfo = {
                        type: 'saved',
                        name: savedSessionWindowRows.item(i).name ? savedSessionWindowRows.item(i).name : inFormat === 'JSON' || inFormat === 'JSON_All' ? undefined : 'Unnamed session ' + sessionCount + ' [' + (us('dateDisplayType') === 'standard' ? (0, 
                        _moment2.default)(savedSessionWindowRows.item(i).modificationDateTime).format('L LT') : (0, _moment2.default)(savedSessionWindowRows.item(i).modificationDateTime).format(us('customDateFormat'))) + ']',
                        generated: new Date(savedSessionWindowRows.item(i).generationDateTime),
                        created: new Date(savedSessionWindowRows.item(i).creationDateTime),
                        modified: new Date(savedSessionWindowRows.item(i).modificationDateTime),
                        id: savedSessionWindowRows.item(i).id,
                        gid: savedSessionWindowRows.item(i).thumbnail
                    };
                }
                windowRenderCount = sessionWindowsRenderer(_util2.default.jsonSafeParse(savedSessionWindowRows.item(i).windows), stringArray, inShowWindows, inShowTitles, inShowURLs, inTabFilterSetting_SB, inTabFilterSetting_Admin, inShowSessions ? 0 : windowCount, sessionInfo);
                if (windowRenderCount) {
                    windowCount += windowRenderCount;
                    if (!savedSessionWindowRows.item(i).name) {
                        sessionCount++;
                    }
                }
            }
        }
        var manifest = chrome.runtime.getManifest(), o;
        var c = stringArray.join('');
        if (c) {
            if (inFormat === 'JSON_All') {
                getAllUserSettings(function(settings) {
                    o = {
                        format: 'nxs.json.v1',
                        created: new Date(),
                        session_scope: 'all',
                        include_session: inShowSessions,
                        include_window: inShowWindows,
                        platform: navigator.platform,
                        language: navigator.language,
                        ua: navigator.userAgent,
                        sb_id: _browser2.default.extensionId(),
                        sb_version: manifest.version,
                        sb_installation_id: s('installationID'),
                        sb_installed: s('installationTimeStamp').toJSON()
                    };
                    if (inShowSessions) {
                        o.sessions = _util2.default.jsonSafeParse('[' + c + ']');
                    } else if (inShowWindows) {
                        o.windows = _util2.default.jsonSafeParse('[' + c + ']');
                    } else {
                        o.tabs = _util2.default.jsonSafeParse('[' + c + ']');
                    }
                    o.user_settings = settings;
                    cb(JSON.stringify(o, undefined, '   '));
                });
            } else if (inFormat === 'CSV') {
                var hdr = [];
                if (inShowSessions) {
                    hdr.push('Session');
                }
                if (inShowWindows) {
                    hdr.push('Window');
                }
                if (inShowTitles) {
                    hdr.push('Title');
                }
                if (inShowURLs) {
                    hdr.push('URL');
                }
                cb(hdr.join(',') + '\n' + c);
            } else if (inFormat === 'HTML') {
                cb('<!DOCTYPE html>\n<html>\n   <head>\n      <meta charset="utf-8" />\n      <style>\n         body { font-family:helvetica,arial,sans-serif; font-size:13px; }\n         h1 { color:hsl(0, 0%, 40%); background:#eee; margin:20px 10px 0; padding:10px; border-radius:2px; font-weight:normal; font-size:17px; }\n         h2 { color:hsl(0,0%,33%); margin-left:25px; margin-top:20px; font-weight:normal; font-size:15px; }' + (inShowTitles && inShowURLs ? '\n         ul { list-style-type:none; }' : '') + '\n         li { white-space:nowrap; padding:3px 0; }\n         a { text-decoration:none; vertical-align:middle; color:black; }\n         a:hover { text-decoration:underline; }\n         .sb-favicon { height:16px; width:16px; margin-right:12px; vertical-align:middle; }\n      </style>\n   </head>\n   <body>' + (!inShowSessions && !inShowWindows ? '\n      <ul>' : '') + c + (!inShowSessions && !inShowWindows ? '\n      </ul>' : '') + '\n   </body>\n</html>');
            } else if (inFormat === 'JSON') {
                o = {};
                try {
                    if (inShowSessions) {
                        o.sessions = _util2.default.jsonSafeParse('[' + c + ']');
                    } else if (inShowWindows) {
                        o.windows = _util2.default.jsonSafeParse('[' + c + ']');
                    } else {
                        o.tabs = _util2.default.jsonSafeParse('[' + c + ']');
                    }
                    cb(JSON.stringify(o, undefined, '   '));
                } catch (ex) {
                    console.error(c);
                }
            } else {
                cb(c);
            }
        } else {
            cb('');
        }
    }
    function getAllUserSettings(cb) {
        db.getAllSettings('UserSettings', function(rows) {
            var r = {};
            if (rows) {
                for (var i = 0; i < rows.length; i++) {
                    r[rows.item(i).key] = rows.item(i).value;
                }
            }
            cb(r);
        });
    }
    function saveSessions(sessions, idx, dateTime) {
        if (idx < sessions.length) {
            var wins = sessions[idx].windows, sessionName;
            app.countFilteredWindowsTabs(wins, function(inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount) {
                if (!dateTime) {
                    dateTime = (0, _moment2.default)();
                }
                if (sessions[idx].type === 'previous') {
                    db.savePreviousSession(wins, sessions[idx].generated || dateTime.toJSON(), inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount, function(inSessionId, inUTCDateStorageString) {
                        if (inSessionId === null) {
                            appStatusVisible('Failed to import session', 2);
                        } else {
                            hideActionStatusConditional(inSessionId, 'previous');
                            importedSessionInfos.push(app.createSessionInfo('previous', inSessionId, null, null, null, inUTCDateStorageString, inUTCDateStorageString, inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount));
                        }
                        saveSessions(sessions, idx + 1, dateTime.subtract(1, 'ms'));
                    }, sessions[idx].created || dateTime.toJSON(), sessions[idx].gid, true);
                } else {
                    sessionName = sessions[idx].name;
                    db.saveSavedSession(wins, sessionName, sessions[idx].generated || dateTime.toJSON(), inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount, function(inSessionId, inUTCDateStorageString) {
                        if (inSessionId === null) {
                            appStatusVisible('Failed to import session', 2);
                        } else {
                            hideActionStatusConditional(inSessionId, 'saved');
                            importedSessionInfos.push(app.createSessionInfo('saved', inSessionId, null, null, sessionName, inUTCDateStorageString, inUTCDateStorageString, inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount));
                        }
                        saveSessions(sessions, idx + 1, dateTime.subtract(1, 'ms'));
                    }, sessions[idx].created || dateTime.toJSON(), sessions[idx].modified || dateTime.toJSON(), null, true);
                }
            });
        } else {
            importedNormalizedSession = null;
            sp.addSessionTiles(importedSessionInfos, function(inIsRequestHonored, inAddedSessionInfos) {
                if (inIsRequestHonored && inAddedSessionInfos && inAddedSessionInfos.length > 0) {
                    q('sessionsPanel').focus();
                    sp.requestSelectSessionSummaryByIdAndType(inAddedSessionInfos[0].id, inAddedSessionInfos[0].type, undefined, function(inIsRequestHonored, inSelectedSessionInfo_Head, inSelectedSessionInfos_All, inOptimizeSessionCombine) {
                        if (inIsRequestHonored) {
                            sp.getSessionSummaryElementByIdAndType(inSelectedSessionInfo_Head.id, inSelectedSessionInfo_Head.type).scrollIntoViewIfNeeded(false);
                            spSelectionChangedCallback(inIsRequestHonored, inSelectedSessionInfo_Head, inSelectedSessionInfos_All, inOptimizeSessionCombine);
                            bg.sendRequestToAllSBTabs({
                                id: 'addSessions',
                                data: {
                                    sessionInfos: importedSessionInfos
                                },
                                excludeTab: tabIdentifier
                            }, function() {
                                importedSessionInfos = null;
                            });
                        }
                    });
                }
            }, _searchTermRegEx);
        }
    }
    function saveAndRenderImportSession() {
        if (importedNormalizedSession) {
            importedSessionInfos = [];
            saveSessions(importedNormalizedSession.sessions, 0);
            ga('send', 'event', 'feature', 'import', thisImportedFormat, importedNormalizedSession.sessions.length);
            var sessionTabCount;
            for (var i = 0; i < importedNormalizedSession.sessions.length; i++) {
                sessionTabCount = 0;
                for (var j = 0; j < importedNormalizedSession.sessions[i].windows.length; j++) {
                    sessionTabCount += importedNormalizedSession.sessions[i].windows[j].tabs.length;
                }
                setTimeout(function(sessionTabCount, inSessionType) {
                    ga('send', 'event', 'tx', 'add', inSessionType === 'previous' ? 'lx_previous' : 'lx', sessionTabCount);
                    if (inSessionType === 'saved') {
                        ga_segment('added_lx_tab_count', sessionTabCount);
                    }
                }, i * 1100, sessionTabCount, importedNormalizedSession.sessions[i].type);
            }
        }
    }
    function doRestoreRenderedSession_SetOfWindows() {
        app.restoreSession(renderedSessionWindows, 'RestoreSessionIntoASetOfWindows', null, null, null, incognitoNoGo);
    }
    function doRestoreRenderedSession_ToOneWindow() {
        app.restoreSession(renderedSessionWindows, 'RestoreSessionIntoASingleWindow', null, null, null, incognitoNoGo);
    }
    function doRestoreRenderedSession_ToThisWindow() {
        _browser2.default.getCurrentWindow(function(cwin) {
            app.restoreSession(renderedSessionWindows, 'RestoreSessionIntoThisWindow', null, null, null, incognitoNoGo, cwin.id);
        });
    }
    function incognitoNoGo() {
        showDialog('dialogBody_IcognitoDisabled', undefined, undefined, function() {
            setDialogHeaderContent('Incognito Disabled');
            (0, _jquery2.default)('#icognitoDisabledMsg').html('Session Buddy can\'t open a session with incognito windows while incognito is disabled');
        });
    }
    function setCurrentSessionControlStates(unfilteredWindowCount, unfilteredTabCount) {
        _domUtil2.default.disable([ q('menuItem_Delete'), q('menuItem_Copy'), q('menuItem_Rename'), q('menuItem_UpdateWithCurrent'), q('restoreButton'), q('menuItem_SortByTabTitle'), q('menuItem_SortByTabUrl') ]);
        _domUtil2.default.toggleEnable(q('saveButton'), unfilteredTabCount);
        q('saveButton').classList.remove('invisible');
        q('saveButton').classList.add('visible');
        q('btnGroup_MergeSave').classList.add('invisible');
        q('btnGroup_MergeSave').classList.remove('visible');
        _domUtil2.default.disable(q('menuItem_MergeWindows'));
    }
    function setPreviousSessionControlStates(unfilteredWindowCount, unfilteredTabCount, shownTabCount) {
        _domUtil2.default.enable(q('menuItem_Delete'));
        _domUtil2.default.disable([ q('menuItem_Copy'), q('menuItem_Rename'), q('menuItem_UpdateWithCurrent') ]);
        if (unfilteredTabCount) {
            _domUtil2.default.enable([ q('saveButton'), q('restoreButton') ]);
            var tabsText = _util2.default.pluralize(unfilteredTabCount, 'tab', 'tabs');
            (0, _jquery2.default)('.menuItemTabCounts').text(tabsText);
            (0, _jquery2.default)('.menuItemTabWindowCounts').text(tabsText + (unfilteredWindowCount > 1 ? ' in ' + unfilteredWindowCount + ' windows' : ''));
        } else {
            _domUtil2.default.disable([ q('saveButton'), q('restoreButton') ]);
        }
        q('saveButton').classList.remove('invisible');
        q('saveButton').classList.add('visible');
        q('btnGroup_MergeSave').classList.add('invisible');
        q('btnGroup_MergeSave').classList.remove('visible');
        _domUtil2.default.toggleEnable(q('menuItem_MergeWindows'), !_searchTerms && unfilteredWindowCount > 1);
        _domUtil2.default.toggleEnable([ q('menuItem_SortByTabTitle'), q('menuItem_SortByTabUrl') ], shownTabCount > 1);
    }
    function setSavedSessionControlStates(unfilteredWindowCount, unfilteredTabCount, shownTabCount) {
        _domUtil2.default.enable([ q('menuItem_Delete'), q('menuItem_Copy'), q('menuItem_Rename'), q('menuItem_UpdateWithCurrent') ]);
        q('saveButton').classList.add('invisible');
        q('saveButton').classList.remove('visible');
        q('btnGroup_MergeSave').classList.add('invisible');
        q('btnGroup_MergeSave').classList.remove('visible');
        if (unfilteredTabCount) {
            _domUtil2.default.enable(q('restoreButton'));
            var tabsText = _util2.default.pluralize(unfilteredTabCount, 'tab', 'tabs');
            (0, _jquery2.default)('.menuItemTabCounts').text(tabsText);
            (0, _jquery2.default)('.menuItemTabWindowCounts').text(tabsText + (unfilteredWindowCount > 1 ? ' in ' + unfilteredWindowCount + ' windows' : ''));
        } else {
            _domUtil2.default.disable(q('restoreButton'));
        }
        _domUtil2.default.toggleEnable(q('menuItem_MergeWindows'), !_searchTerms && unfilteredWindowCount > 1);
        _domUtil2.default.toggleEnable([ q('menuItem_SortByTabTitle'), q('menuItem_SortByTabUrl') ], shownTabCount > 1);
    }
    function setCombinedSessionControlStates(unfilteredWindowCount, unfilteredTabCount, sessionCount) {
        if (sessionCount) {
            if (sessionCount > 1) {
                q('saveButton').classList.add('invisible');
                q('saveButton').classList.remove('visible');
                q('btnGroup_MergeSave').classList.remove('invisible');
                q('btnGroup_MergeSave').classList.add('visible');
            } else {
                if (renderedSessionType === 'saved') {
                    q('saveButton').classList.add('invisible');
                    q('saveButton').classList.remove('visible');
                    q('btnGroup_MergeSave').classList.add('invisible');
                    q('btnGroup_MergeSave').classList.remove('visible');
                } else {
                    q('saveButton').classList.remove('invisible');
                    q('saveButton').classList.add('visible');
                    q('btnGroup_MergeSave').classList.add('invisible');
                    q('btnGroup_MergeSave').classList.remove('visible');
                }
            }
        }
        _domUtil2.default.enable(q('menuItem_Delete'));
        _domUtil2.default.disable([ q('menuItem_Copy'), q('menuItem_Rename'), q('menuItem_UpdateWithCurrent'), q('menuItem_SortByTabTitle'), q('menuItem_SortByTabUrl') ]);
        _domUtil2.default.disable(q('menuItem_MergeWindows'));
        if (unfilteredTabCount) {
            _domUtil2.default.enable([ q('saveButton'), q('saveButton2'), q('restoreButton') ]);
            (0, _jquery2.default)('.menuItemTabCounts').text(_util2.default.pluralize(unfilteredTabCount, 'tab', 'tabs'));
            (0, _jquery2.default)('.menuItemTabWindowCounts').text(_util2.default.pluralize(unfilteredTabCount, 'tab', 'tabs') + (unfilteredWindowCount > 1 ? ' in ' + unfilteredWindowCount + ' windows' : ''));
        } else {
            _domUtil2.default.disable([ q('saveButton'), q('saveButton2'), q('restoreButton') ]);
        }
        _domUtil2.default.toggleEnable(q('btnMerge'), !_searchTerms && unfilteredTabCount);
    }
    function refreshSession(sessionId) {
        if (!renderedSessionId || !_util2.default.isNumeric(renderedSessionId)) {
            return;
        }
        if (renderedSessionId === -13 && sessionId === -13) {
            getAndRenderCurrentSession(postSessionRender);
        } else {
            var all = sp.getSelectedSessionInfos_All();
            if (renderedSessionId === -14) {
                if (_util2.default.find(all, 'id', sessionId)) {
                    renderSession(sp.getSelectedSessionInfo_Head(), all, postSessionRender);
                }
            } else if (sessionId === renderedSessionId) {
                renderSession(sp.getSelectedSessionInfo_Head(), all, postSessionRender);
            }
        }
    }
    function getExportTxtVal() {
        switch ((0, _jquery2.default)('#exportTabs > .tabGroup_tab_active').attr('id')) {
          case 'tabGroup_tab_ExportCSV':
            return 'CSV';

          case 'tabGroup_tab_ExportJSON':
            return 'JSON';

          case 'tabGroup_tab_ExportHTML':
            return 'HTML';

          case 'tabGroup_tab_ExportMarkdown':
            return 'Markdown';

          default:
            return 'Text';
        }
    }
    function saveExportOptions() {
        us('sessionExport_ShowSessions', chkShowSessions.checked);
        us('sessionExport_ShowWindows', chkShowWindows.checked);
        us('sessionExport_ShowTitles', chkShowTitles.checked);
        us('sessionExport_ShowURLs', chkShowURLs.checked);
        us('sessionExport_Scope', (0, _jquery2.default)('#sessionExport_Scope').val());
        us('sessionExport_Format', getExportTxtVal());
    }
    function deleteRenderedSessionWindowOrTab_AndClose() {
        if (event.which == 1 && !_keyUtil2.default.hasCtrlKeyModifier(event) && !event.shiftKey) {
            closeAllMenus();
            event.stopPropagation();
            var that = this;
            if (us('sessionSave_ConfirmClose')) {
                showDialog('dialogBody_CloseWot', undefined, undefined, function() {
                    setDialogHeaderContent('Close ' + (that.dataset.tid == null ? 'Window' : 'Tab') + '?');
                    (0, _jquery2.default)('#closeWotMsg').html('Close the ' + (that.dataset.tid == null ? 'window?' : 'tab?'));
                    dialogFooterButtonAction_Middle = function dialogFooterButtonAction_Middle() {
                        hideDialog();
                        if (q('chkDialogFooter').checked) {
                            us('sessionSave_ConfirmClose', false);
                        }
                        deleteRenderedSessionWindowOrTab_AndClose_Commit(that);
                    };
                });
            } else {
                deleteRenderedSessionWindowOrTab_AndClose_Commit(that);
            }
        }
    }
    function deleteRenderedSessionWindowOrTab_AndClose_Commit(that, cb) {
        removeWotEl_current(that, function(deletedItemType) {
            if (deletedItemType === 'tab') {
                return _browser2.default.closeTab(parseInt(that.dataset.tid, 10), cb);
            }
            if (deletedItemType === 'window') {
                return _browser2.default.closeWindow(parseInt(that.dataset.wid, 10), cb);
            }
            cb && cb();
        });
    }
    function deleteRenderedSessionWindowOrTab_AndSave() {
        if (event.which == 1 && !_keyUtil2.default.hasCtrlKeyModifier(event) && !event.shiftKey) {
            deleteRenderedSessionWindowOrTab(this, function(deletedItem) {
                saveOrUpdateRenderedSession(undefined, function(isSave, sessionInfo) {
                    if (renderedSessionType === 'previous') {
                        if (deletedItem === 'tab') {
                            deletedItem = 'l_previous';
                        } else if (deletedItem === 'window') {
                            deletedItem = 'lg_previous';
                        } else {
                            deletedItem = '(unknown)';
                        }
                        ga('send', 'event', 'tx', 'delete', deletedItem);
                    } else if (renderedSessionType === 'saved') {
                        if (deletedItem === 'tab') {
                            deletedItem = 'l';
                        } else if (deletedItem === 'window') {
                            deletedItem = 'lg';
                        } else {
                            deletedItem = '(unknown)';
                        }
                        ga('send', 'event', 'tx', 'delete', deletedItem);
                    }
                    postSaveOrUpdateRenderedSession(isSave, sessionInfo);
                    bg.sendRequestToAllSBTabs({
                        id: renderedSessionType === 'previous' ? 'updatePreviousSessionSummary' : 'updateSavedSessionSummary',
                        data: {
                            sessionInfo: sessionInfo
                        },
                        excludeTab: tabIdentifier
                    });
                }, null, null, renderedSessionType === 'previous');
            });
            closeAllMenus();
            event.stopPropagation();
        }
    }
    function doSortByTabUrl() {
        var doIt = function doIt(inSessionInfo) {
            bg.pushUndoActionAndClearSBTabActions(tabIdentifier, 'sessionEdit', 'Session ' + getSessionNameString(q('sessionNameInput_SessionRename').value) + 'tabs sorted', function() {
                rerenderRenderedSession(app.sortTabsByTabUrl(renderedSessionWindows), function() {
                    appStatusVisible('Session tabs sorted<br>' + undoAccessHTML, 1, 1e3 * 60 * 2);
                    allowUndo = true;
                    bg.sendRequestToAllSBTabs({
                        id: 'hideActionStatus',
                        excludeTab: tabIdentifier
                    });
                    if (renderedSessionType === 'saved' || renderedSessionType === 'previous') {
                        saveOrUpdateRenderedSession(undefined, function(inIsSave, inSessionInfo) {
                            postSaveOrUpdateRenderedSession(inIsSave, inSessionInfo);
                            bg.sendRequestToAllSBTabs({
                                id: renderedSessionType === 'previous' ? 'updatePreviousSessionSummary' : 'updateSavedSessionSummary',
                                data: {
                                    sessionInfo: inSessionInfo
                                },
                                excludeTab: tabIdentifier
                            });
                        }, null, null, renderedSessionType === 'previous');
                    }
                });
            }, JSON.stringify(renderedSessionWindows), JSON.stringify(inSessionInfo));
        };
        if (renderedSessionType === 'saved') {
            db.getSavedSessionSummary(renderedSessionId, function(inRow) {
                doIt(app.createSessionInfo('saved', inRow.id, undefined, undefined, inRow.name, inRow.creationDateTime, inRow.modificationDateTime, inRow.unfilteredWindowCount, inRow.filteredWindowCount, inRow.unfilteredTabCount, inRow.filteredTabCount));
            });
        } else {
            doIt(null);
        }
    }
    function doSortByTabTitle() {
        var doIt = function doIt(inSessionInfo) {
            bg.pushUndoActionAndClearSBTabActions(tabIdentifier, 'sessionEdit', 'Session ' + getSessionNameString(q('sessionNameInput_SessionRename').value) + 'tabs sorted', function() {
                rerenderRenderedSession(app.sortTabsByTabTitle(renderedSessionWindows), function() {
                    appStatusVisible('Session tabs sorted<br>' + undoAccessHTML, 1, 1e3 * 60 * 2);
                    allowUndo = true;
                    bg.sendRequestToAllSBTabs({
                        id: 'hideActionStatus',
                        excludeTab: tabIdentifier
                    });
                    if (renderedSessionType === 'saved' || renderedSessionType === 'previous') {
                        saveOrUpdateRenderedSession(undefined, function(inIsSave, inSessionInfo) {
                            postSaveOrUpdateRenderedSession(inIsSave, inSessionInfo);
                            bg.sendRequestToAllSBTabs({
                                id: renderedSessionType === 'previous' ? 'updatePreviousSessionSummary' : 'updateSavedSessionSummary',
                                data: {
                                    sessionInfo: inSessionInfo
                                },
                                excludeTab: tabIdentifier
                            });
                        }, null, null, renderedSessionType === 'previous');
                    }
                });
            }, JSON.stringify(renderedSessionWindows), JSON.stringify(inSessionInfo));
        };
        if (renderedSessionType === 'saved') {
            db.getSavedSessionSummary(renderedSessionId, function(inRow) {
                doIt(app.createSessionInfo('saved', inRow.id, undefined, undefined, inRow.name, inRow.creationDateTime, inRow.modificationDateTime, inRow.unfilteredWindowCount, inRow.filteredWindowCount, inRow.unfilteredTabCount, inRow.filteredTabCount));
            });
        } else {
            doIt(null);
        }
    }
    function doUnifyRenderedSessionWindows() {
        var doIt = function doIt(inSessionInfo) {
            bg.pushUndoActionAndClearSBTabActions(tabIdentifier, 'sessionEdit', 'Session ' + getSessionNameString(q('sessionNameInput_SessionRename').value) + 'windows unified', function() {
                rerenderRenderedSession(app.mergeWindows(renderedSessionWindows), function() {
                    appStatusVisible('Session windows unified<br>' + undoAccessHTML, 1, 1e3 * 60 * 2);
                    allowUndo = true;
                    bg.sendRequestToAllSBTabs({
                        id: 'hideActionStatus',
                        excludeTab: tabIdentifier
                    });
                    if (renderedSessionType === 'saved' || renderedSessionType === 'previous') {
                        saveOrUpdateRenderedSession(undefined, function(inIsSave, inSessionInfo) {
                            postSaveOrUpdateRenderedSession(inIsSave, inSessionInfo);
                            bg.sendRequestToAllSBTabs({
                                id: renderedSessionType === 'previous' ? 'updatePreviousSessionSummary' : 'updateSavedSessionSummary',
                                data: {
                                    sessionInfo: inSessionInfo
                                },
                                excludeTab: tabIdentifier
                            });
                        }, null, null, renderedSessionType === 'previous');
                    }
                });
            }, JSON.stringify(renderedSessionWindows), JSON.stringify(inSessionInfo));
        };
        if (renderedSessionType === 'saved') {
            db.getSavedSessionSummary(renderedSessionId, function(inRow) {
                doIt(app.createSessionInfo('saved', inRow.id, undefined, undefined, inRow.name, inRow.creationDateTime, inRow.modificationDateTime, inRow.unfilteredWindowCount, inRow.filteredWindowCount, inRow.unfilteredTabCount, inRow.filteredTabCount));
            });
        } else {
            doIt(null);
        }
    }
    function doUpdateRenderedSessionWithCurrentSession() {
        var doIt = function doIt(inSessionInfo) {
            bg.pushUndoActionAndClearSBTabActions(tabIdentifier, 'sessionEdit', 'Session ' + getSessionNameString(q('sessionNameInput_SessionRename').value) + 'overwritten with the current session', function() {
                _browser2.default.getAllWindowsAndTabs({
                    rotate: true
                }, function(wins) {
                    _browser2.default.getCurrentWindow(function(inWin) {
                        rerenderRenderedSession(_browser2.default.setWindowFocus(wins, inWin.id), function() {
                            appStatusVisible('Session overwritten<br>' + undoAccessHTML, 1, 1e3 * 60 * 2);
                            allowUndo = true;
                            bg.sendRequestToAllSBTabs({
                                id: 'hideActionStatus',
                                excludeTab: tabIdentifier
                            });
                            if (renderedSessionType === 'saved' || renderedSessionType === 'previous') {
                                saveOrUpdateRenderedSession(undefined, function(inIsSave, inSessionInfo) {
                                    ga('send', 'event', 'feature', 'overwrite_with_current', renderedSessionType === 'saved' ? 'lx' : 'lx_previous');
                                    postSaveOrUpdateRenderedSession(inIsSave, inSessionInfo);
                                    bg.sendRequestToAllSBTabs({
                                        id: renderedSessionType === 'previous' ? 'updatePreviousSessionSummary' : 'updateSavedSessionSummary',
                                        data: {
                                            sessionInfo: inSessionInfo
                                        },
                                        excludeTab: tabIdentifier
                                    });
                                }, null, null, renderedSessionType === 'previous');
                            }
                        });
                    });
                });
            }, JSON.stringify(renderedSessionWindows), JSON.stringify(inSessionInfo));
        };
        if (renderedSessionType === 'saved') {
            db.getSavedSessionSummary(renderedSessionId, function(inRow) {
                doIt(app.createSessionInfo('saved', inRow.id, undefined, undefined, inRow.name, inRow.creationDateTime, inRow.modificationDateTime, inRow.unfilteredWindowCount, inRow.filteredWindowCount, inRow.unfilteredTabCount, inRow.filteredTabCount));
            });
        } else {
            doIt(null);
        }
    }
    function deleteRenderedSessionWindowOrTab(inElement, cb) {
        if (renderedSessionType === 'saved') {
            db.getSavedSessionSummary(renderedSessionId, function(inRow) {
                doIt(app.createSessionInfo('saved', inRow.id, undefined, undefined, inRow.name, inRow.creationDateTime, inRow.modificationDateTime, inRow.unfilteredWindowCount, inRow.filteredWindowCount, inRow.unfilteredTabCount, inRow.filteredTabCount));
            });
        } else {
            doIt(null);
        }
        function doIt(inSessionInfo) {
            var wSeq = inElement.dataset.wSeq || (0, _jquery2.default)(inElement).closest('.sessionRender_Window').data('wSeq'), tSeq = inElement.dataset.tSeq;
            bg.pushUndoActionAndClearSBTabActions(tabIdentifier, 'sessionEdit', 'Session ' + getSessionNameString(q('sessionNameInput_SessionRename').value) + (tSeq ? 'tab' : 'window') + ' deleted', function() {
                if (renderedSessionWindows[wSeq - 1].tabs.length == 1 || !tSeq) {
                    renderedSessionWindows.splice(wSeq - 1, 1);
                } else {
                    renderedSessionWindows[wSeq - 1].tabs.splice(tSeq - 1, 1);
                }
                rerenderRenderedSession(undefined, function() {
                    appStatusVisible('Session ' + (tSeq ? 'tab' : 'window') + ' deleted<br>' + undoAccessHTML, 1, 1e3 * 60 * 2);
                    allowUndo = true;
                    bg.sendRequestToAllSBTabs({
                        id: 'hideActionStatus',
                        excludeTab: tabIdentifier
                    });
                    cb && cb(tSeq ? 'tab' : 'window');
                });
            }, JSON.stringify(renderedSessionWindows), JSON.stringify(inSessionInfo));
        }
    }
    function removeWotEl_current(inElement, cb) {
        if (renderedSessionWindows[inElement.dataset.wSeq - 1].tabs.length == 1 || !inElement.dataset.tSeq) {
            renderedSessionWindows.splice(inElement.dataset.wSeq - 1, 1);
        } else {
            renderedSessionWindows[inElement.dataset.wSeq - 1].tabs.splice(inElement.dataset.tSeq - 1, 1);
        }
        rerenderRenderedSession(undefined, function() {
            allowUndo = false;
            bg.sendRequestToAllSBTabs({
                id: 'hideActionStatus',
                excludeTab: tabIdentifier
            });
            cb && cb(inElement.dataset.tSeq ? 'tab' : 'window');
        });
    }
    function setControlState_ShowPreviousSessions() {
        var checked = q('chkShowPreviousSessions').checked;
        _domUtil2.default.toggleEnable(q('selPreviousSessionQueueSize'), checked);
        q('automaticallyRecordSessionsUnselectWarning').style.color = checked || q('chkShowPreviousSessions').dataset.init === 'false' ? 'hsl(0, 0%, 67%)' : 'hsl(348, 83%, 47%)';
        q('sessionPluralAppend').style.display = q('selPreviousSessionQueueSize').value == 1 ? 'none' : 'inline';
    }
    function saveControlVal(controlEl, settingKey) {
        var initValue = null, currValue = null;
        if (controlEl.type === 'radio') {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;
            try {
                for (var _iterator = document.getElementsByName(controlEl.name)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var radio = _step.value;
                    if (!initValue && radio.dataset.init) {
                        initValue = radio.dataset.init;
                    }
                    if (!currValue && radio.checked) {
                        currValue = radio.value;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        } else {
            initValue = controlEl.dataset.init;
            currValue = controlEl.type === 'checkbox' ? controlEl.checked : controlEl.value;
        }
        if (initValue + '' != currValue + '') {
            us(settingKey, currValue);
            return true;
        }
    }
    function saveSbSettings() {
        saveControlVal(q('chkAskForName'), 'sessionSave_AskForName');
        saveControlVal(q('chk_UserSetting_useClassicFont'), 'app_useClassicFont');
        var customDateFormatChanged = saveControlVal(q('txtCustomDateFormat'), 'customDateFormat');
        var isDateDisplayRefreshRequired = saveControlVal(q('optDateDisplayTypeStandard'), 'dateDisplayType') || customDateFormatChanged;
        var isEnableDisableKeyboardShortcutsRequired = saveControlVal(q('chkEnableKeyboardShortcuts'), 'enableKeyboardShortcuts');
        var wasShowAdminTabsInItalicChanged = saveControlVal(q('chk_UserSetting_ShowAdminTabsInItalic'), 'sessionRender_ShowAdminTabsInItalic');
        var wasIgnoreURLPArmsInSearchChanged = saveControlVal(q('chkIgnoreURLParmsInSearch'), 'ignoreURLParmsForSearch');
        var showSessionCountsInNavigationPaneChanged = saveControlVal(q('chk_UserSetting_ShowSessionCountsInNavigationPane'), 'sessionRender_ShowSessionCountsInNavigationPane');
        var ignoreUrlParamsInTabCompareChanged = saveControlVal(q('chkIgnoreUrlParamsInTabCompare'), 'sessionEdit_IgnoreUrlParamsInTabCompare');
        var hideDuplicateTabsInMergeChanged = saveControlVal(q('chkHideDuplicateTabsInCombinedSession'), 'sessionEdit_HideDuplicateTabsInMerge');
        var showWindowCountsChanged = saveControlVal(q('chkShowTabCountsOnWindowHeaders'), 'showWindowCounts');
        var isUpdateBrowserActionRequired = saveControlVal(q('chkShowExtensionBadge'), 'sessionRender_ShowExtensionBadge');
        var previousSessionQueueSizeChanged = saveControlVal(q('selPreviousSessionQueueSize'), 'sessionSummaryRender_PreviousSessionQueueSize');
        var isProcessAutoSessionPreferenceChangeRequired = saveControlVal(q('chkShowPreviousSessions'), 'automaticallyRecordSessions');
        var wasSBTabFilteringValChanged = saveControlVal(q('chkFilterSessionBuddyTabs'), 'tabFiltering_FilterSessionBuddyTabs');
        var wasAdminTabFilteringValChanged = saveControlVal(q('chkFilterChromeAdministrativeTabs'), 'tabFiltering_FilterChromeAdministrativeTabs');
        var isRerenderRenderedSessionRequired = wasShowAdminTabsInItalicChanged || showWindowCountsChanged || wasSBTabFilteringValChanged || wasAdminTabFilteringValChanged;
        var isGetAndRenderRenderedSessionRequired = wasIgnoreURLPArmsInSearchChanged || (ignoreUrlParamsInTabCompareChanged || hideDuplicateTabsInMergeChanged) && renderedSessionType === 'combined';
        var isRerenderSessionsPanelRequired = wasIgnoreURLPArmsInSearchChanged || showSessionCountsInNavigationPaneChanged || previousSessionQueueSizeChanged || isProcessAutoSessionPreferenceChangeRequired || wasSBTabFilteringValChanged || wasAdminTabFilteringValChanged;
        var isFilterRecountRequired = wasSBTabFilteringValChanged || wasAdminTabFilteringValChanged;
        return {
            isRerenderRenderedSessionRequired: isRerenderRenderedSessionRequired,
            isGetAndRenderRenderedSessionRequired: isGetAndRenderRenderedSessionRequired,
            isRerenderSessionsPanelRequired: isRerenderSessionsPanelRequired,
            isFilterRecountRequired: isFilterRecountRequired,
            isUpdateBrowserActionRequired: isUpdateBrowserActionRequired,
            isEnableDisableKeyboardShortcutsRequired: isEnableDisableKeyboardShortcutsRequired,
            isProcessAutoSessionPreferenceChangeRequired: isProcessAutoSessionPreferenceChangeRequired,
            isDateDisplayRefreshRequired: isDateDisplayRefreshRequired
        };
    }
    function postSaveOrUpdateRenderedSession_Merge(inIsSave, inSessionInfo) {
        if (inSessionInfo.type === 'saved') {
            sp.requestRemoveSelectedSessionSummaries(true, function(inIsRequestHonored, inRemovedSessionInfos) {
                if (inIsRequestHonored) {
                    bg.pushUndoActionAndClearAllActions(tabIdentifier, 'sessionMerge', 'Sessions merged', function() {
                        sp.addSessionTiles([ inSessionInfo ], function(inIsRequestHonored, inAddedSessionInfos) {
                            if (inIsRequestHonored && inAddedSessionInfos && inAddedSessionInfos.length > 0) {
                                q('sessionsPanel').focus();
                                sp.requestSelectSessionSummaryByIdAndType(inAddedSessionInfos[0].id, inAddedSessionInfos[0].type, undefined, function(inIsRequestHonored, inSelectedSessionInfo_Head, inSelectedSessionInfos_All, inOptimizeSessionCombine) {
                                    if (inIsRequestHonored) {
                                        sp.getSessionSummaryElementByIdAndType(inSelectedSessionInfo_Head.id, inSelectedSessionInfo_Head.type).scrollIntoViewIfNeeded(false);
                                        spSelectionChangedCallback(inIsRequestHonored, inSelectedSessionInfo_Head, inSelectedSessionInfos_All, inOptimizeSessionCombine, true);
                                        db.softDeleteUndeleteSessions(inRemovedSessionInfos, true, function(inRowsAffected) {
                                            ga('send', 'event', 'feature', 'merge');
                                            appStatusVisible((inRowsAffected > 1 ? inRowsAffected + ' sessions' : 'Session') + ' merged<br>' + undoAccessHTML, 1, 1e3 * 60 * 2);
                                            allowUndo = true;
                                            bg.sendRequestToAllSBTabs({
                                                id: 'hideActionStatus',
                                                excludeTab: tabIdentifier
                                            });
                                            bg.sendRequestToAllSBTabs({
                                                id: 'removeAddSessions',
                                                data: {
                                                    removeSessionInfos: inRemovedSessionInfos,
                                                    addSessionInfos: inAddedSessionInfos
                                                },
                                                excludeTab: tabIdentifier
                                            });
                                            app.unlockAction();
                                        });
                                    } else {
                                        app.unlockAction();
                                    }
                                }, 'replace');
                            } else {
                                app.unlockAction();
                            }
                        }, _searchTermRegEx);
                    }, JSON.stringify(inRemovedSessionInfos), JSON.stringify(inSessionInfo));
                } else {
                    app.unlockAction();
                }
            });
        } else {
            app.unlockAction();
        }
    }
    function postSaveOrUpdateRenderedSession(inIsSave, inSessionInfo, suppressSessionSelect) {
        if (inSessionInfo.type === 'saved' || inSessionInfo.type === 'previous' && !inIsSave) {
            if (inIsSave) {
                sp.addSessionTiles([ inSessionInfo ], function(inIsRequestHonored, inAddedSessionInfos) {
                    if (inIsRequestHonored && inAddedSessionInfos && inAddedSessionInfos.length > 0) {
                        bg.sendRequestToAllSBTabs({
                            id: 'addSessions',
                            data: {
                                sessionInfos: [ inSessionInfo ]
                            },
                            excludeTab: tabIdentifier
                        });
                        if (!suppressSessionSelect) {
                            q('sessionsPanel').focus();
                            sp.requestSelectSessionSummaryByIdAndType(inAddedSessionInfos[0].id, inAddedSessionInfos[0].type, undefined, function(inIsRequestHonored, inSelectedSessionInfo_Head, inSelectedSessionInfos_All, inOptimizeSessionCombine) {
                                if (inIsRequestHonored) {
                                    sp.getSessionSummaryElementByIdAndType(inSelectedSessionInfo_Head.id, inSelectedSessionInfo_Head.type).scrollIntoViewIfNeeded(false);
                                    spSelectionChangedCallback(inIsRequestHonored, inSelectedSessionInfo_Head, inSelectedSessionInfos_All, inOptimizeSessionCombine);
                                }
                            });
                        }
                    }
                }, _searchTermRegEx);
            } else {
                updateSessionSummary(inSessionInfo);
            }
        }
    }
    function doRenameRenderedSession() {
        (0, _jquery2.default)('#sessionTitle').qtip('hide');
        (0, _jquery2.default)('#sessionTitle').qtip('disable');
        if (renderedSessionType === 'saved') {
            showDialog('dialogBody_SessionRename', undefined, undefined, function() {
                q('sessionNameInput_SessionRename').focus();
                q('sessionNameInput_SessionRename').select();
            });
        }
    }
    function doCopyRenderedSession() {
        var thisName = q('sessionNameInput_SessionRename').value.trim();
        if (renderedSessionType === 'saved') {
            app.countFilteredWindowsTabs(renderedSessionWindows, function(inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount) {
                db.saveSavedSession(renderedSessionWindows, thisName ? 'Copy of ' + thisName : 'Copy of unnamed session', new Date().toJSON(), inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount, function(inSessionId, inUTCDateStorageString) {
                    if (inSessionId === null) {
                        appStatusVisible('Failed to copy session', 2);
                    } else {
                        hideActionStatusConditional(inSessionId, 'saved');
                        postSaveOrUpdateRenderedSession(true, app.createSessionInfo('saved', inSessionId, undefined, undefined, thisName ? 'Copy of ' + thisName : 'Copy of unnamed session', inUTCDateStorageString, inUTCDateStorageString, inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount));
                    }
                });
            });
        }
    }
    function doSaveWindow(inSuggestedName, inLimitedSetOfWindows, wDelete, suppressSessionSelect) {
        if (us('sessionSave_AskForName')) {
            showDialog('dialogBody_SessionSave', undefined, undefined, function() {
                q('sessionNameInput_SessionSave').value = inSuggestedName || '';
                q('sessionNameInput_SessionSave').focus();
                q('sessionNameInput_SessionSave').select();
                dialogFooterButtonAction_Middle = sessionNameInput_SessionSave_Action = function sessionNameInput_SessionSave_Action() {
                    doIt(q('sessionNameInput_SessionSave').value, function(inSessionInfo) {
                        if (inSessionInfo) {
                            hideDialog();
                            if (q('chkDialogFooter').checked) {
                                us('sessionSave_AskForName', false);
                            }
                        }
                    });
                };
            });
        } else {
            doIt(inSuggestedName);
        }
        function doIt(inSuggestedName, cb) {
            var keyWins = [];
            for (var i = 0; i < renderedSessionWindows.length; i++) {
                if (_util2.default.contains(inLimitedSetOfWindows, i)) {
                    keyWins.push(renderedSessionWindows[i]);
                }
            }
            if (wDelete) {
                if (renderedSessionType === 'current') {
                    return deleteRenderedSessionWindowOrTab_AndClose_Commit(wDelete, function() {
                        app.countFilteredWindowsTabs(keyWins, function(inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount) {
                            db.saveSavedSession(keyWins, inSuggestedName, null, inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount, function(inSessionId, inUTCDateStorageString) {
                                if (inSessionId === null) {
                                    appStatusVisible('Failed to save session', 2);
                                    return cb && cb();
                                }
                                appStatusVisible(false);
                                allowUndo = false;
                                var si = app.createSessionInfo('saved', inSessionId, undefined, undefined, inSuggestedName, inUTCDateStorageString, inUTCDateStorageString, inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount);
                                postSaveOrUpdateRenderedSession(true, si, suppressSessionSelect);
                                cb && cb(si);
                            });
                        });
                    });
                }
                renderedSessionWindows.splice(parseInt(wDelete.dataset.wSeq) - 1, 1);
                return saveOrUpdateRenderedSession(undefined, function(inIsSave, inSessionInfo) {
                    if (suppressSessionSelect) {
                        return rerenderRenderedSession(renderedSessionWindows, finish);
                    }
                    sp.styleSessionSummaryElement(sp.getSessionSummaryElementBySessionInfo(inSessionInfo), '');
                    finish();
                    function finish() {
                        updateSessionSummary(inSessionInfo, function() {
                            app.countFilteredWindowsTabs(keyWins, function(inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount) {
                                db.saveSavedSession(keyWins, inSuggestedName, null, inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount, function(inSessionId, inUTCDateStorageString) {
                                    if (inSessionId === null) {
                                        appStatusVisible('Failed to save session', 2);
                                        return cb && cb();
                                    }
                                    appStatusVisible(false);
                                    allowUndo = false;
                                    var si = app.createSessionInfo('saved', inSessionId, undefined, undefined, inSuggestedName, inUTCDateStorageString, inUTCDateStorageString, inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount);
                                    postSaveOrUpdateRenderedSession(true, si, suppressSessionSelect);
                                    cb && cb(si);
                                });
                            });
                        });
                        bg.sendRequestToAllSBTabs({
                            id: renderedSessionType === 'previous' ? 'updatePreviousSessionSummary' : 'updateSavedSessionSummary',
                            data: {
                                sessionInfo: inSessionInfo
                            },
                            excludeTab: tabIdentifier
                        });
                    }
                }, null, null, renderedSessionType === 'previous');
            }
            app.countFilteredWindowsTabs(keyWins, function(inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount) {
                db.saveSavedSession(keyWins, inSuggestedName, null, inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount, function(inSessionId, inUTCDateStorageString) {
                    if (inSessionId === null) {
                        appStatusVisible('Failed to save session', 2);
                        return cb && cb();
                    }
                    appStatusVisible(false);
                    allowUndo = false;
                    var si = app.createSessionInfo('saved', inSessionId, undefined, undefined, inSuggestedName, inUTCDateStorageString, inUTCDateStorageString, inUnfilteredWindowCount, inFilteredWindowCount, inUnfilteredTabCount, inFilteredTabCount);
                    postSaveOrUpdateRenderedSession(true, si, suppressSessionSelect);
                    cb && cb(si);
                });
            });
        }
    }
    function doSaveOrCopyRenderedSession(inIsHideDialog, inSuggestedName, gid, cb) {
        if (us('sessionSave_AskForName')) {
            showDialog('dialogBody_SessionSave', undefined, undefined, function() {
                q('sessionNameInput_SessionSave').value = inSuggestedName || '';
                q('sessionNameInput_SessionSave').focus();
                q('sessionNameInput_SessionSave').select();
                if (cb) {
                    dialogFooterButtonAction_Middle = sessionNameInput_SessionSave_Action = function sessionNameInput_SessionSave_Action() {
                        saveOrUpdateRenderedSession(q('sessionNameInput_SessionSave').value, function(inIsSave, inSessionInfo) {
                            if (inSessionInfo) {
                                cb(inIsSave, inSessionInfo);
                                hideDialog();
                                if (q('chkDialogFooter').checked) {
                                    us('sessionSave_AskForName', false);
                                }
                            }
                        }, undefined, undefined, undefined, gid);
                    };
                }
            });
        } else {
            if (inIsHideDialog) {
                hideDialog(function() {
                    saveOrUpdateRenderedSession(inSuggestedName, cb, undefined, undefined, undefined, gid);
                });
            } else {
                saveOrUpdateRenderedSession(inSuggestedName, cb, undefined, undefined, undefined, gid);
            }
        }
    }
    function doDeleteSessions(inSessionsToDeleteInfos) {
        sp.requestRemoveSessionSummariesBySessionInfos(inSessionsToDeleteInfos);
    }
    function doSelectSession(inSelectedSessionSummaryElement) {
        selectedSessionSummaryElement = inSelectedSessionSummaryElement;
        styleSessionSummaryElement(inSelectedSessionSummaryElement, 'head');
    }
    function doDeleteRenderedSession() {
        if (renderedSessionId && (renderedSessionType === 'saved' || renderedSessionType === 'previous')) {
            doDeleteSessions([ {
                id: renderedSessionId,
                type: renderedSessionType
            } ]);
        } else if (renderedSessionType === 'combined') {
            doDeleteSessions(sp.getSelectedSessionInfos_All());
        }
    }
    function selectPrimarySessionInfo(sessionInfos, cb, _idx, _gid) {
        _idx = _idx || 0;
        if (sessionInfos.length > _idx) {
            if (sessionInfos[_idx].type === 'saved') {
                db.getSavedSessionSummary(sessionInfos[_idx].id, function(r) {
                    if (r.name) {
                        cb({
                            name: r.name,
                            gid: r.gid
                        });
                    } else {
                        selectPrimarySessionInfo(sessionInfos, cb, ++_idx, _gid || r.gid);
                    }
                });
            } else if (!_gid && sessionInfos[_idx].type === 'previous') {
                db.getPreviousSessionSummary(sessionInfos[_idx].id, function(r) {
                    selectPrimarySessionInfo(sessionInfos, cb, ++_idx, r.gid);
                });
            } else {
                selectPrimarySessionInfo(sessionInfos, cb, ++_idx, _gid);
            }
        } else {
            cb({
                gid: _gid
            });
        }
    }
    function doMergeSessions() {
        if (us('sessionMerge_WarnOnMerge')) {
            showDialog('dialogBody_SessionMergeWarning', undefined, undefined);
        } else {
            selectPrimarySessionInfo(sp.getSelectedSessionInfos_All(), function(psi) {
                requestApplicationAction_MergeSessions(psi);
            });
        }
    }
    function requestApplicationAction_MergeSessions(psi) {
        if (app.lockAction()) {
            doMergeSessions2(psi);
        }
    }
    function doMergeSessions2(psi) {
        var gid = psi.gid;
        if (gid.length > 30) {
            gid = null;
        }
        if (psi.name) {
            doSaveOrCopyRenderedSession(true, psi.name, gid, postSaveOrUpdateRenderedSession_Merge);
        } else {
            doSaveOrCopyRenderedSession(true, 'Merged Session', gid, function(inIsSave, inSessionInfo) {
                postSaveOrUpdateRenderedSession_Merge(inIsSave, inSessionInfo);
            });
        }
    }
    function renameRenderedSession(inName) {
        db.updateSavedSessionName(renderedSessionId, inName, function(inIsUpdated) {
            if (inIsUpdated) {
                ga('send', 'event', 'tx', 'update', 'lx');
                bg.sendRequestToAllSBTabs({
                    id: 'updateSessionName',
                    data: {
                        id: renderedSessionId,
                        type: renderedSessionType,
                        name: inName
                    }
                });
            } else {
                appStatusVisible('Failed to rename session', 2);
            }
        });
    }
    function getSessionNameString(name) {
        if (!name) return '';
        var returnName = name.trim();
        if (returnName) {
            returnName = '"' + returnName + '" ';
        }
        return returnName;
    }
    function getCorrespondingTabDiv(el) {
        if (el.id.startsWith('tabDiv_')) {
            return el;
        }
        return getCorrespondingTabDiv(el.parentNode);
    }
    function filterSessionSummaries_Saved(rows, searchTerms, dontFilterSessionSummaries, cb) {
        filterSessionSummaries(rows, searchTerms, 'saved', dontFilterSessionSummaries, cb);
    }
    function filterSessionSummaries_Previous(rows, searchTerms, dontFilterSessionSummaries, cb) {
        filterSessionSummaries(rows, searchTerms, 'previous', dontFilterSessionSummaries, cb);
    }
    function filterSessionSummaries(rows, searchTerms, sessionType, dontFilterSessionSummaries, cb) {
        if (!rows || !rows.length || sessionType !== 'saved' && sessionType !== 'previous') return cb([]);
        if (!searchTerms) {
            var arr = [];
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;
            try {
                for (var _iterator2 = rows[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var row = _step2.value;
                    arr.push(row);
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
            return cb(arr);
        }
        var ids = [];
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;
        try {
            for (var _iterator3 = rows[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var _row = _step3.value;
                ids.push(_row.id);
            }
        } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                    _iterator3.return();
                }
            } finally {
                if (_didIteratorError3) {
                    throw _iteratorError3;
                }
            }
        }
        (sessionType === 'saved' ? db.getSavedSessionWindows : db.getPreviousSessionWindows).call(db, ids, undefined, function(windowRows) {
            var dontFilterSessionIds = [];
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;
            try {
                for (var _iterator4 = windowRows[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var windowRow = _step4.value;
                    if (windowRow && windowsMatchSearchterms(_util2.default.jsonSafeParse(windowRow.windows), searchTerms, us('tabFiltering_FilterSessionBuddyTabs'), us('tabFiltering_FilterChromeAdministrativeTabs'))) {
                        dontFilterSessionIds.push(windowRow.id);
                    }
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }
            var arr = [];
            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;
            try {
                for (var _iterator5 = rows[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var _row2 = _step5.value;
                    if (dontFilterSessionIds.indexOf(_row2.id) > -1 || dontFilterSessionSummaries && app.getIndexOfSessionInfoByIdAndType(_row2.id, sessionType, dontFilterSessionSummaries) > -1 || _row2.name && _row2.name.toLowerCase().indexOf(searchTerms.toLowerCase()) > -1) {
                        arr.push(_row2);
                    }
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }
            cb(arr);
        });
    }
    function windowsMatchSearchterms(wins, searchTerms, inTabFilterSetting_SB, inTabFilterSetting_Admin) {
        if (!searchTerms) return true;
        var _iteratorNormalCompletion6 = true;
        var _didIteratorError6 = false;
        var _iteratorError6 = undefined;
        try {
            for (var _iterator6 = wins[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                var win = _step6.value;
                if (!app.isFilteredWindow(win, 0, inTabFilterSetting_SB, inTabFilterSetting_Admin)) {
                    var _iteratorNormalCompletion7 = true;
                    var _didIteratorError7 = false;
                    var _iteratorError7 = undefined;
                    try {
                        for (var _iterator7 = win.tabs[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                            var tab = _step7.value;
                            if (!app.isFilteredTab(tab, inTabFilterSetting_SB, inTabFilterSetting_Admin) && tabMatchesSearch(tab, searchTerms)) {
                                return true;
                            }
                        }
                    } catch (err) {
                        _didIteratorError7 = true;
                        _iteratorError7 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion7 && _iterator7.return) {
                                _iterator7.return();
                            }
                        } finally {
                            if (_didIteratorError7) {
                                throw _iteratorError7;
                            }
                        }
                    }
                }
            }
        } catch (err) {
            _didIteratorError6 = true;
            _iteratorError6 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion6 && _iterator6.return) {
                    _iterator6.return();
                }
            } finally {
                if (_didIteratorError6) {
                    throw _iteratorError6;
                }
            }
        }
        return false;
    }
    function getSearchTermMatchCount(wins, searchTerms, inTabFilterSetting_SB, inTabFilterSetting_Admin) {
        var matchedTabCount = 0;
        var _iteratorNormalCompletion8 = true;
        var _didIteratorError8 = false;
        var _iteratorError8 = undefined;
        try {
            for (var _iterator8 = wins[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                var win = _step8.value;
                if (!app.isFilteredWindow(win, 0, inTabFilterSetting_SB, inTabFilterSetting_Admin)) {
                    var _iteratorNormalCompletion9 = true;
                    var _didIteratorError9 = false;
                    var _iteratorError9 = undefined;
                    try {
                        for (var _iterator9 = win.tabs[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                            var tab = _step9.value;
                            if (!app.isFilteredTab(tab, inTabFilterSetting_SB, inTabFilterSetting_Admin) && tabMatchesSearch(tab, searchTerms)) {
                                matchedTabCount++;
                            }
                        }
                    } catch (err) {
                        _didIteratorError9 = true;
                        _iteratorError9 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion9 && _iterator9.return) {
                                _iterator9.return();
                            }
                        } finally {
                            if (_didIteratorError9) {
                                throw _iteratorError9;
                            }
                        }
                    }
                }
            }
        } catch (err) {
            _didIteratorError8 = true;
            _iteratorError8 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion8 && _iterator8.return) {
                    _iterator8.return();
                }
            } finally {
                if (_didIteratorError8) {
                    throw _iteratorError8;
                }
            }
        }
        return matchedTabCount;
    }
    function tabMatchesSearch(tab, searchTerms) {
        searchTerms = searchTerms.toLowerCase();
        return app.getEffectiveTabTitle(tab).toLowerCase().indexOf(searchTerms) > -1 || (us('ignoreURLParmsForSearch') ? _urlUtil2.default.truncateURL(tab.url) : tab.url).toLowerCase().indexOf(searchTerms) > -1;
    }
    function getAndRenderSessionSummaries(inSessionSummarySelectionHead, inSelectedSessionSummaries_All, inOrderString, dontUseSettingsPreviousSessionQueueSize, inSearchTerms, cb, inSearchRequest_Local, partial) {
        if (us('dateDisplayType') === 'relative') {
            startSessionTileInterval();
        } else {
            stopSessionTileInterval();
        }
        inSearchTerms = _searchTerms;
        inSessionSummarySelectionHead = sp.getSelectedSessionInfo_Head();
        inSelectedSessionSummaries_All = sp.getSelectedSessionInfos_All();
        var finishGetAndRenderSessionSummaries = function finishGetAndRenderSessionSummaries(inSessionSummariesDataRows_Previous, inPreviousSessionQueueSize, inTotalSessionSummaryCount_Previous) {
            if (!inSearchRequest_Local || inSearchRequest_Local == currentSearchRequest_Global) {
                if (!inSearchRequest_Local || inSearchRequest_Local == currentSearchRequest_Global) {
                    if (!inSearchRequest_Local || inSearchRequest_Local == currentSearchRequest_Global) {
                        if (!inSearchRequest_Local || inSearchRequest_Local == currentSearchRequest_Global) {
                            if (!inSearchRequest_Local || inSearchRequest_Local == currentSearchRequest_Global) {
                                if (!inSearchRequest_Local || inSearchRequest_Local == currentSearchRequest_Global) {
                                    db.getSavedSessionSummaries(undefined, inSearchTerms, function(sessionSummariesData_Saved, inTotalSessionSummaryCount_Saved) {
                                        if (!inSearchRequest_Local || inSearchRequest_Local == currentSearchRequest_Global) {
                                            filterSessionSummaries_Saved(sessionSummariesData_Saved.rows, inSearchTerms, inSelectedSessionSummaries_All && inSelectedSessionSummaries_All.length ? inSelectedSessionSummaries_All : inSessionSummarySelectionHead ? [ inSessionSummarySelectionHead ] : [], function(sessionSummariesData_SavedRows_FilterFlagged) {
                                                if (!inSearchRequest_Local || inSearchRequest_Local == currentSearchRequest_Global) {
                                                    filterSessionSummaries_Previous(inSessionSummariesDataRows_Previous, inSearchTerms, inSelectedSessionSummaries_All && inSelectedSessionSummaries_All.length ? inSelectedSessionSummaries_All : inSessionSummarySelectionHead ? [ inSessionSummarySelectionHead ] : [], function(inSessionSummariesDataRows_Previous_FilterFlagged) {
                                                        if (!inSearchRequest_Local || inSearchRequest_Local == currentSearchRequest_Global) {
                                                            _browser2.default.getAllWindowsAndTabs(function(wins) {
                                                                if (!inSearchRequest_Local || inSearchRequest_Local == currentSearchRequest_Global) {
                                                                    app.countFilteredWindowsTabs(wins, function(inUnfilteredWindowCount_Current, inFilteredWindowCount_Current, inUnfilteredTabCount_Current, inFilteredTabCount_Current) {
                                                                        if (!inSearchRequest_Local || inSearchRequest_Local == currentSearchRequest_Global) {
                                                                            sp.render(windowsMatchSearchterms(wins, inSearchTerms, us('tabFiltering_FilterSessionBuddyTabs'), us('tabFiltering_FilterChromeAdministrativeTabs')) || inSessionSummarySelectionHead && inSessionSummarySelectionHead.id == -13 || inSelectedSessionSummaries_All && app.getIndexOfSessionInfoByIdAndType(-13, 'current', inSelectedSessionSummaries_All) > -1 ? [ {
                                                                                id: -13,
                                                                                unfilteredWindowCount: inUnfilteredWindowCount_Current,
                                                                                filteredWindowCount: inFilteredWindowCount_Current,
                                                                                unfilteredTabCount: inUnfilteredTabCount_Current,
                                                                                filteredTabCount: inFilteredTabCount_Current
                                                                            } ] : [], inSessionSummariesDataRows_Previous_FilterFlagged, sessionSummariesData_SavedRows_FilterFlagged, undefined, inSessionSummariesDataRows_Previous ? inSessionSummariesDataRows_Previous_FilterFlagged.length : undefined, undefined, inSessionSummarySelectionHead, inSelectedSessionSummaries_All, dontUseSettingsPreviousSessionQueueSize ? undefined : inPreviousSessionQueueSize, us('enableKeyboardShortcuts'), us('sessionRender_ShowSessionCountsInNavigationPane'), function() {
                                                                                cb && cb();
                                                                            }, partial ? inTotalSessionSummaryCount_Previous : undefined, partial ? inTotalSessionSummaryCount_Saved : undefined, _searchTerms);
                                                                        }
                                                                    });
                                                                }
                                                            });
                                                        }
                                                    });
                                                }
                                            });
                                        }
                                    }, inSelectedSessionSummaries_All && inSelectedSessionSummaries_All.length > 0 ? inSelectedSessionSummaries_All : inSessionSummarySelectionHead ? [ inSessionSummarySelectionHead ] : [], partial ? 50 : null);
                                }
                            }
                        }
                    }
                }
            }
        };
        if (!inSearchRequest_Local || inSearchRequest_Local == currentSearchRequest_Global) {
            if (!inSearchRequest_Local || inSearchRequest_Local == currentSearchRequest_Global) {
                if (us('sessionSummaryRender_PreviousSessionQueueSize') && us('automaticallyRecordSessions')) {
                    db.getPreviousSessionSummaries(undefined, inSearchTerms, function(sessionSummariesData_Previous, count) {
                        finishGetAndRenderSessionSummaries(sessionSummariesData_Previous.rows, us('sessionSummaryRender_PreviousSessionQueueSize'), count);
                    }, inSelectedSessionSummaries_All && inSelectedSessionSummaries_All.length > 0 ? inSelectedSessionSummaries_All : inSessionSummarySelectionHead ? [ inSessionSummarySelectionHead ] : [], partial ? 10 : null);
                } else {
                    finishGetAndRenderSessionSummaries(undefined, undefined);
                }
            }
        }
    }
    function updateHideDuplicateTabsSettingAndRenderCombinedSession(state) {
        us('sessionEdit_HideDuplicateTabsInMerge', state);
        getAndRenderCombinedSession(undefined, undefined, undefined, sp.getSelectedSessionInfos_All());
    }
    function getAndConcatenateWindows(inSessionInfos, wins, inSessionCount, inIndex, inSessionTitle, inIsSessionNamed, cb) {
        if (wins === undefined) wins = [];
        if (inSessionCount === undefined) inSessionCount = 0;
        if (inIndex === undefined) inIndex = 0;
        if (inIndex < inSessionInfos.length) {
            var thisSummaryInfo = inSessionInfos[inIndex];
            if (thisSummaryInfo) {
                if (thisSummaryInfo.type === 'current') {
                    _browser2.default.getAllWindowsAndTabs({
                        rotate: true
                    }, function(inWindows1) {
                        if (inSessionInfos.length === 1 && !inSessionTitle) {
                            getAndConcatenateWindows(inSessionInfos, wins.concat(inWindows1), inSessionCount + 1, inIndex + 1, getSessionTitleFromSessionType(thisSummaryInfo.type), false, cb);
                        } else {
                            getAndConcatenateWindows(inSessionInfos, wins.concat(inWindows1), inSessionCount + 1, inIndex + 1, undefined, undefined, cb);
                        }
                    });
                } else if (thisSummaryInfo.type === 'saved') {
                    db.getSavedSessionWindows(thisSummaryInfo.id, undefined, function(inSqlResultRow) {
                        if (inSqlResultRow) {
                            if (inSessionInfos.length === 1 && !inSessionTitle) {
                                getAndConcatenateWindows(inSessionInfos, wins.concat(_util2.default.jsonSafeParse(inSqlResultRow.windows)), inSessionCount + 1, inIndex + 1, inSqlResultRow.name ? inSqlResultRow.name : getSessionTitleFromSessionType(thisSummaryInfo.type), inSqlResultRow.name ? true : false, cb);
                            } else {
                                getAndConcatenateWindows(inSessionInfos, wins.concat(_util2.default.jsonSafeParse(inSqlResultRow.windows)), inSessionCount + 1, inIndex + 1, undefined, undefined, cb);
                            }
                        }
                    });
                } else if (thisSummaryInfo.type === 'previous') {
                    db.getPreviousSessionWindows(thisSummaryInfo.id, undefined, function(inSqlResultRow) {
                        if (inSqlResultRow) {
                            if (inSessionInfos.length === 1 && !inSessionTitle) {
                                app.getPreviousSessionOrder(thisSummaryInfo.id, function(inOrder) {
                                    getAndConcatenateWindows(inSessionInfos, wins.concat(_util2.default.jsonSafeParse(inSqlResultRow.windows)), inSessionCount + 1, inIndex + 1, 'Previous Session', false, cb);
                                });
                            } else {
                                getAndConcatenateWindows(inSessionInfos, wins.concat(_util2.default.jsonSafeParse(inSqlResultRow.windows)), inSessionCount + 1, inIndex + 1, undefined, undefined, cb);
                            }
                        }
                    });
                }
            } else {
                getAndConcatenateWindows(inSessionInfos, wins, inSessionCount, inIndex + 1, inSessionTitle, inIsSessionNamed, cb);
            }
        } else {
            cb && cb(wins, inSessionCount, inSessionTitle, inIsSessionNamed);
        }
    }
    function flagMatchingTabsForDeletion(wins, k, l, inOnlyCountDupes, inIgnoreUrlParms, tabFilteringState_SB, tabFilteringState_Admin) {
        var removedTabCount = 0;
        var url2 = void 0, url = wins[k].tabs[l].url.trim().toLowerCase();
        for (var i = k; i < wins.length; i++) {
            for (var j = i == k ? l : 0; j < wins[i].tabs.length; j++) {
                if (!wins[i].tabs[j].isDupe) {
                    if (!(i == k && j == l)) {
                        url2 = wins[i].tabs[j].url.trim().toLowerCase();
                        if (inIgnoreUrlParms ? _urlUtil2.default.truncateURL(url2) === _urlUtil2.default.truncateURL(url) : url2 === url) {
                            wins[i].tabs[j].isDupe = true;
                            if (!app.isFilteredTab(wins[i].tabs[j], tabFilteringState_SB, tabFilteringState_Admin)) {
                                removedTabCount++;
                            }
                        }
                    }
                }
            }
        }
        return removedTabCount;
    }
    function dedupeSession(wins, inBaselineWindows, inOnlyCountDupes, cb) {
        var removedTabCount = 0;
        if (wins) {
            for (var i = 0; i < wins.length; i++) {
                for (var j = 0; j < wins[i].tabs.length; j++) {
                    if (!wins[i].tabs[j].isDupe) {
                        removedTabCount += flagMatchingTabsForDeletion(wins, i, j, inOnlyCountDupes, us('sessionEdit_IgnoreUrlParamsInTabCompare'), us('tabFiltering_FilterSessionBuddyTabs'), us('tabFiltering_FilterChromeAdministrativeTabs'));
                    }
                }
            }
            if (!inOnlyCountDupes) {
                var indexesToRemove = [];
                for (var i = 0; i < wins.length; i++) {
                    indexesToRemove.length = 0;
                    for (var j = 0; j < wins[i].tabs.length; j++) {
                        if (wins[i].tabs[j].isDupe) {
                            indexesToRemove.push(j);
                        }
                    }
                    for (var j = indexesToRemove.length - 1; j > -1; j--) {
                        wins[i].tabs.splice(indexesToRemove[j], 1);
                    }
                }
                indexesToRemove.length = 0;
                for (var i = 0; i < wins.length; i++) {
                    if (wins[i].tabs.length == 0) {
                        indexesToRemove.push(i);
                    }
                }
                for (var i = indexesToRemove.length - 1; i > -1; i--) {
                    wins.splice(indexesToRemove[i], 1);
                }
            }
            if (inBaselineWindows) {}
            if (cb) {
                removeDupeFlags(wins);
                cb(wins, removedTabCount);
            }
        } else {
            cb && cb([], removedTabCount);
        }
    }
    function removeDupeFlags(wins) {
        for (var i = 0; i < wins.length; i++) {
            for (var j = 0; j < wins[i].tabs.length; j++) {
                if (wins[i].tabs[j].isDupe) {
                    wins[i].tabs[j].isDupe = null;
                }
            }
        }
    }
    function resizePanels() {
        if (resizePanelActive) thisUILayoutManager.resizeNavigationPanel(event.clientX);
    }
    function initializePanelResize() {
        disableSelect();
        resizePanelActive = true;
    }
    function finalizePanelResize() {
        if (resizePanelActive) {
            us('sessionSummaryRender_PanelWidth', parseInt(q('navigationPanel').style.width));
            document.body.classList.remove('bodyNoSelect');
            enableSelect();
            resizePanelActive = false;
        }
    }
    function disableSelect() {
        document.addEventListener('selectstart', sdf);
        document.addEventListener('dragstart', sdf);
    }
    function enableSelect() {
        document.removeEventListener('selectstart', sdf);
        document.removeEventListener('dragstart', sdf);
    }
    function sdf(e) {
        if (resizePanelActive) {
            e.stopPropagation();
            e.stopImmediatePropagation();
            e.preventDefault();
            e.cancelBubble = true;
            return false;
        }
    }
    function processTabClick(e) {
        if (e.which === 1 && !_keyUtil2.default.hasCtrlKeyModifier(e) && !e.shiftKey) {
            selectSettingsTabSheet(e.srcElement);
        }
    }
    function setControlStates_OptionsDialog() {
        q('txtCustomDateFormat').style.visibility = 'hidden';
        q('dateFormattingHelp').style.visibility = 'hidden';
        if (q('optDateDisplayTypeCustom').checked) {
            q('dateDisplay').textContent = (0, _moment2.default)(dateFormatSampleDate).format(q('txtCustomDateFormat').value);
            q('txtCustomDateFormat').style.visibility = 'visible';
            q('dateFormattingHelp').style.visibility = 'visible';
        } else if (q('optDateDisplayTypeRelative').checked) {
            q('dateDisplay').textContent = (0, _moment2.default)(dateFormatSampleDate).fromNow();
        } else {
            q('dateDisplay').textContent = (0, _moment2.default)(dateFormatSampleDate).format('L LT');
        }
        _domUtil2.default.toggleEnable(q('chkIgnoreUrlParamsInTabCompare'), q('chkHideDuplicateTabsInCombinedSession').checked);
    }
    function selectSettingsTabSheet(tabEl) {
        var things = tabEl.parentNode.children;
        tabEl.classList.add('tabGroup_tab_active');
        var idx = void 0;
        for (var i = 0; i < things.length; i++) {
            if (tabEl == things[i]) {
                idx = i;
            } else {
                things[i].classList.remove('tabGroup_tab_active');
            }
        }
        (0, _jquery2.default)(tabEl).closest('.tabGroup_Root').find('.tabGroup_tabSheet').each(function(i, el) {
            return _domUtil2.default.toggleClass(el, 'tabGroup_tabSheet_visible', idx === i);
        });
    }
    function scrollContent(id, inContentShadowTopElement) {
        setContentShadows(id, inContentShadowTopElement);
    }
    function setAllContentShadows() {
        setContentShadows(q('sessionRenderContainer'), q('contentShadowTop'));
        setContentShadows(q('sessionsPanelContainer'), q('spShadowTop'));
    }
    function setContentShadows(inElement, inContentShadowTopElement) {
        _domUtil2.default.toggleClass(inContentShadowTopElement, 'contentShadow_Visible', inElement.scrollTop);
    }
    function getSessionTitleFromSessionType(type, adornment) {
        switch (type) {
          case 'current':
            return 'Current Session';

          case 'previous':
            return 'Previous Session';

          case 'saved':
            return 'Unnamed session';

          case 'combined':
            if (adornment) return _browser2.default.getI18nMessage('linksets', [ adornment ]);
            return 'Multiple Sessions';
        }
    }
    function doSearch(val, force, selectFirstResult) {
        clearTimeout(_searchTimer);
        if (val !== _searchTerms) {
            _searchSelectFirstResult = selectFirstResult;
            (0, _jquery2.default)('#sessionsPanel, #sessionRenderContainer, #searchTermMatchCounts').css('opacity', '0.4');
            var localSearchSessionId = currentSearchRequest_Global = (0, _xid2.default)();
            _searchTerms = val;
            _searchTermRegEx = _searchTerms ? new RegExp(_util2.default.regExEscape(_searchTerms), 'gi') : null;
            _searchShowAll = false;
            getAndRenderSessionSummaries(sp.getSelectedSessionInfo_Head(), sp.getSelectedSessionInfos_All(), undefined, undefined, parseSearchTerms(_searchTerms), function() {
                if (!localSearchSessionId || localSearchSessionId == currentSearchRequest_Global) {
                    renderSession(sp.getSelectedSessionInfo_Head(), sp.getSelectedSessionInfos_All(), function() {
                        if (!localSearchSessionId || localSearchSessionId == currentSearchRequest_Global) {
                            (0, _jquery2.default)('#sessionsPanel, #sessionRenderContainer, #searchTermMatchCounts').css('opacity', '');
                            postSessionRender();
                            setContentShadows(q('sessionsPanelContainer'), q('spShadowTop'));
                            sp.selectedSessionSummaryElement_Head.scrollIntoViewIfNeeded(false);
                            _domUtil2.default.toggleClass(q('searchBox'), 'active_search_session', _searchTerms);
                        }
                    });
                }
            }, localSearchSessionId);
        } else if (force && selectFirstResult && _searchTerms) {
            (0, _jquery2.default)('#sessionRenderList .tabDiv .sessionRender_Tab a[href]').first().focus();
        }
    }
    function parseSearchTerms(txt) {
        return txt;
    }
    function clearSearch() {
        q('searchBox').value = '';
        doSearch('');
    }
    function setSearchShowAllButtonState(showOpts) {
        var el = q('searchShowAllButton');
        if (!showOpts) return el.style.display = 'none';
        el.style.display = '';
        if (showOpts.hasOwnProperty('allCount')) {
            el.dataset.allCount = showOpts.allCount;
        } else {
            el.removeAttribute('data-all-count');
        }
        if (showOpts.hasOwnProperty('nonMatchingCount')) {
            el.dataset.nonMatchingCount = showOpts.nonMatchingCount;
        } else {
            el.removeAttribute('data-non-matching-count');
        }
        if (showOpts.showAll) {
            el.classList.add('searchShowAllButtonOn');
            el.textContent = 'Hide ' + (el.dataset.nonMatchingCount || '') + ' non-matching ' + (parseInt(el.dataset.nonMatchingCount) === 1 ? 'tab' : 'tabs');
        } else {
            el.classList.remove('searchShowAllButtonOn');
            el.textContent = 'Show ' + (el.dataset.nonMatchingCount || '') + ' non-matching ' + (parseInt(el.dataset.nonMatchingCount) === 1 ? 'tab' : 'tabs');
        }
    }
    function renderWindows(wins, inDeleteAction, inSessionWindowId, inSessionTabId, inNeutralizeWindowFocus, cb, inName, description) {
        var thisSessionRenderInnerContainer = _domUtil2.default.createElement('div', 'sessionRenderList');
        if (description) {
            var desc = thisSessionRenderInnerContainer.appendChild(document.createElement('div'));
            desc.className = 'session_description';
            desc.innerHTML = description;
        }
        var tab, firstShownTabOfWindow, focusTab;
        var unfilteredWindowCount = 0, filteredWindowCount = 0, unfilteredTabCount = 0, shownTabCount = 0, filteredTabCount = 0;
        var shownTabOfWindowCount, totalTabOfWindowCount;
        for (var i = 0; i < wins.length; i++) {
            if (inNeutralizeWindowFocus) wins[i].focused = false;
            if (app.isFilteredWindow(wins[i], 0, us('tabFiltering_FilterSessionBuddyTabs'), us('tabFiltering_FilterChromeAdministrativeTabs'))) {
                filteredWindowCount++;
                filteredTabCount += wins[i].tabs.length;
            } else {
                unfilteredWindowCount++;
                shownTabOfWindowCount = totalTabOfWindowCount = 0;
                for (var j = 0; j < wins[i].tabs.length; j++) {
                    if (app.isFilteredTab(wins[i].tabs[j], us('tabFiltering_FilterSessionBuddyTabs'), us('tabFiltering_FilterChromeAdministrativeTabs'))) {
                        filteredTabCount++;
                    } else {
                        unfilteredTabCount++;
                        totalTabOfWindowCount++;
                        if (tab = appendTab(thisSessionRenderInnerContainer, wins[i].tabs[j], i + 1, j + 1, us('sessionRender_RenderSessionURL'), inDeleteAction, us('sessionRender_ShowAdminTabsInItalic'), inSessionTabId)) {
                            if (_searchSelectFirstResult && !shownTabCount) focusTab = tab;
                            shownTabCount++;
                            shownTabOfWindowCount++;
                            if (shownTabOfWindowCount === 1) firstShownTabOfWindow = tab;
                        }
                    }
                }
                if (shownTabOfWindowCount) {
                    thisSessionRenderInnerContainer.insertBefore(createSessionWindowElement(wins[i], i + 1, inDeleteAction, inSessionWindowId, us('showWindowCounts'), shownTabOfWindowCount, totalTabOfWindowCount), firstShownTabOfWindow);
                }
            }
        }
        if (unfilteredTabCount < 1) {
            q('sessionRenderContainer').classList.add('sessionRenderContainer_Lowlight');
            if (filteredTabCount < 1) {
                setSessionRenderContainerContent('no tabs');
            } else {
                setSessionRenderContainerContent(filteredTabCount + ' tab' + (filteredTabCount > 1 ? 's in this session are' : ' in this session is') + ' hidden. <span id="sessionRenderContent" style="text-decoration:underline;cursor:pointer;">Click here</span> to adjust Tab Filter settings.');
                q('sessionRenderContent').addEventListener('click', function() {
                    selectSettingsTabSheet(q('tabGroup_tab_Filter'));
                    showDialog('dialogBody_Options');
                });
            }
        } else {
            q('sessionRenderContainer').classList.remove('sessionRenderContainer_Lowlight');
            (0, _jquery2.default)('.sessionRender_Window_Label, .sessionRender_Tab_Pin, .sessionRender_Window_Incognito, .delete_glyph_placeholder').qtip('destroy', true);
            var container = q('sessionRenderContainer');
            while (container.firstChild) {
                container.removeChild(container.firstChild);
            }
            container.appendChild(thisSessionRenderInnerContainer);
        }
        if (focusTab) {
            _searchSelectFirstResult = false;
            (0, _jquery2.default)(focusTab).find('a').focus();
        }
        renderedSessionWindows = wins;
        renderedSessionRenderDateTime = new Date();
        if (_searchTerms) {
            q('searchTermMatchCounts').style.display = '';
            q('sessionRenderContainer').style.top = q('contentShadowTop').style.top = '236px';
            var matchedTabCount = getSearchTermMatchCount(wins, _searchTerms, us('tabFiltering_FilterSessionBuddyTabs'), us('tabFiltering_FilterChromeAdministrativeTabs')), tabMatchText = matchedTabCount ? _util2.default.pluralize(matchedTabCount, 'tab', 'tabs') : '', nameMatchText = inName && inName.toLowerCase().indexOf(_searchTerms.toLowerCase()) > -1 ? 'the session name' : '';
            var txt = '<b>' + _searchTerms + '</b>&nbsp;&nbsp;';
            if (nameMatchText || tabMatchText) {
                txt += 'matches ' + nameMatchText;
                if (tabMatchText) {
                    if (nameMatchText) {
                        txt += ' and ';
                    }
                    txt += tabMatchText;
                }
                q('searchTermMatchCounts').classList.remove('searchTermMatchCounts_NoMatches');
                if (matchedTabCount < unfilteredTabCount) {
                    setSearchShowAllButtonState({
                        showAll: _searchShowAll,
                        allCount: unfilteredTabCount,
                        nonMatchingCount: unfilteredTabCount - matchedTabCount
                    });
                } else {
                    setSearchShowAllButtonState();
                }
            } else {
                txt += sp.selectedSessionSummaryElements_All.length > 1 ? 'does not match any tabs in the selected sessions' : 'has no matches in this session';
                q('searchTermMatchCounts').classList.add('searchTermMatchCounts_NoMatches');
                setSearchShowAllButtonState();
            }
            q('searchTermMatchCountsText').innerHTML = txt;
        } else {
            q('searchTermMatchCounts').style.display = 'none';
            q('sessionRenderContainer').style.top = q('contentShadowTop').style.top = '183px';
        }
        cb && cb(unfilteredWindowCount, filteredWindowCount, unfilteredTabCount, filteredTabCount, shownTabCount);
    }
    function closeAllMenus() {
        (0, _jquery2.default)('.sessionRender_Window_Editing').each(function() {
            saveCloseWindowRename((0, _jquery2.default)(this));
        });
        (0, _jquery2.default)('#windowContextMenu').addClass('invisible').parent().find('.sessionRender_Window_Label').qtip('enable');
        return closeMenu(q('restoreButton'), q('restoreMenu')) || closeMenu(q('actionsMenuButton'), q('actionsMenu')) || closeMenu(q('btnConfigure'), q('configMenu'));
    }
    function dialogFooterButtonAction_hideDialog() {
        hideDialog();
    }
    function dialogFooterButtonAction_saveAndRenderImportSession() {
        hideDialog(saveAndRenderImportSession);
    }
    function dialogFooterButtonAction_ExportSessionCopyToClipboard() {
        chrome.permissions.request({
            permissions: [ 'clipboardWrite' ]
        }, function(granted) {
            if (granted) {
                if (bg.copyToClipboard(q('sessionExportText').value)) {
                    ga('send', 'event', 'feature', 'export_clipboard', getExportTxtVal());
                    (0, _jquery2.default)('#exportStatus').html('Copied');
                    clearTimeout(exportStatusTimer);
                    (0, _jquery2.default)('#exportStatus').fadeIn('fast');
                    exportStatusTimer = setTimeout(function() {
                        (0, _jquery2.default)('#exportStatus').fadeOut('slow');
                    }, 1500);
                }
            }
        });
    }
    function createBackupFile(learnmore) {
        getBackupText(function(t) {
            try {
                saveTextToFile(t, 'session_buddy_backup_' + (0, _moment2.default)().format('YYYY_MM_DD_HH_mm_ss') + '.json');
                ga('send', 'event', 'feature', 'backup_file');
                appStatusVisible('Backup file saved to <span class="downloadsFolder">downloads folder</span>' + (learnmore ? '<br><div><a id="backupLearnMore" style="text-decoration:underline;">Learn more about backups</a></div>' : ''), 0, 15 * 1e3);
            } catch (ex) {
                appStatusVisible('Failed to save backup file', 2);
            }
        });
    }
    function saveTextToFile(text, filename) {
        (0, _FileSaver2.default)(new Blob([ '\ufeff', text ], {
            type: 'text/plain;charset=UTF-8'
        }), filename);
    }
    function dialogFooterButtonAction_ExportSessionSaveToFile() {
        try {
            var ext = '.txt';
            switch (getExportTxtVal()) {
              case 'CSV':
                ext = '.csv';
                break;

              case 'JSON':
                ext = '.json';
                break;

              case 'HTML':
                ext = '.html';
                break;

              case 'Markdown':
                ext = '.md';
                break;
            }
            saveTextToFile(q('sessionExportText').value, 'session_buddy_export_' + (0, _moment2.default)().format('YYYY_MM_DD_HH_mm_ss') + ext);
            ga('send', 'event', 'feature', 'export_file', getExportTxtVal());
            (0, _jquery2.default)('#exportStatus').html('Saved to <span class="downloadsFolder" style="color:hsl(120, 52%, 30%);">downloads folder</span>');
            clearTimeout(exportStatusTimer);
            (0, _jquery2.default)('#exportStatus').fadeIn('fast');
            exportStatusTimer = setTimeout(function() {
                (0, _jquery2.default)('#exportStatus').fadeOut('slow');
            }, 5e3);
        } catch (ex) {}
    }
    function dialogFooterButtonAction_renameRenderedSession() {
        renameRenderedSession(q('sessionNameInput_SessionRename').value);
        hideDialog();
    }
    function dialogFooterButtonAction_saveOrUpdateRenderedSession() {
        saveOrUpdateRenderedSession(q('sessionNameInput_SessionSave').value, postsaveOrUpdateRenderedSession_HideDialog);
    }
    function dialogFooterButtonAction_mergeSessions() {
        if (q('chkDialogFooter').checked) {
            us('sessionMerge_WarnOnMerge', false);
        }
        selectPrimarySessionInfo(sp.getSelectedSessionInfos_All(), function(psi) {
            requestApplicationAction_MergeSessions(psi);
        });
    }
    function postsaveOrUpdateRenderedSession_HideDialog(isSave, sessionInfo) {
        if (sessionInfo) {
            postSaveOrUpdateRenderedSession(isSave, sessionInfo);
            hideDialog();
            if (q('chkDialogFooter').checked) {
                us('sessionSave_AskForName', false);
            }
        }
    }
    function setFontOverride() {
        (0, _jquery2.default)('html, body, input.searchBox, .dropdown').toggleClass('fontClassic', us('app_useClassicFont'));
    }
    function dialogFooterButtonAction_saveSbSettings() {
        hideDialog();
        var impacts = saveSbSettings();
        setFontOverride();
        if (impacts.isProcessAutoSessionPreferenceChangeRequired) {
            if (q('chkShowPreviousSessions').checked) {
                bg.cacheSession();
            } else {
                bg.clearCacheSessionTimer();
                app.clearSessionCache();
                db.deleteAllPreviousSessions(function(deletedSessionCount) {
                    if (deletedSessionCount) {
                        console.log(_util2.default.pluralize(deletedSessionCount, 'previous session', 'previous sessions') + ' deleted');
                    }
                });
            }
        }
        filterRecountIf(impacts.isFilterRecountRequired, function() {
            if (impacts.isUpdateBrowserActionRequired) {
                if (q('chkShowExtensionBadge').checked) {
                    app.countCurrentFilteredWindowsTabs(function(unfilteredWindowCount, filteredWindowCount, unfilteredTabCount, filteredTabCount) {
                        app.refreshBadge(unfilteredTabCount, filteredTabCount);
                    });
                } else {
                    app.refreshBadge();
                }
                bg.recountCurrentSessionTabs();
            }
            bg.sendRequestToAllSBTabs({
                id: 'propagateSettingsToTabUI',
                data: {
                    isRerenderSessionsPanelRequired: impacts.isRerenderSessionsPanelRequired || impacts.isDateDisplayRefreshRequired,
                    isRerenderRenderedSessionRequired: impacts.isRerenderRenderedSessionRequired,
                    isGetAndRenderRenderedSessionRequired: impacts.isGetAndRenderRenderedSessionRequired || impacts.isDateDisplayRefreshRequired,
                    isEnableDisableKeyboardShortcutsRequired: impacts.isEnableDisableKeyboardShortcutsRequired,
                    enableKeyboardShortcuts: q('chkEnableKeyboardShortcuts').checked
                }
            });
        });
    }
    function filterRecountIf(isTrue, cb) {
        if (isTrue) {
            app.updateAllFilterTabCounts(function() {
                bg.recountCurrentSessionTabs();
                cb && cb();
            });
        } else if (cb) {
            cb();
        }
    }
    function rerenderSessionsPanelIf(isTrue, cb) {
        if (isTrue) {
            getAndRenderSessionSummaries(undefined, undefined, undefined, false, undefined, cb);
        } else if (cb) {
            cb();
        }
    }
    function rerenderRenderedSessionIf(isTrue, cb) {
        if (isTrue) {
            rerenderRenderedSession(undefined, cb);
        } else if (cb) {
            cb();
        }
    }
    function getAndRenderRenderedSessionIf(isTrue, cb) {
        if (isTrue) {
            renderSession(sp.getSelectedSessionInfo_Head(), sp.getSelectedSessionInfos_All(), cb);
        } else if (cb) {
            cb();
        }
    }
    function showDialog(inDialogBodyElementId, inXClickCoordinate, inYClickCoordinate, cb) {
        var finalizeDialogInitialization = function finalizeDialogInitialization() {
            var dialogBodies = q('dialogBodyContainer').children;
            for (var i = 0; i < dialogBodies.length; i++) {
                if (dialogBodies[i] && dialogBodies[i].tagName && dialogBodies[i].tagName.toUpperCase() == 'DIV') {
                    if (dialogBodies[i].id == inDialogBodyElementId) {
                        dialogBodies[i].style.display = 'block';
                    } else {
                        dialogBodies[i].style.display = 'none';
                    }
                }
            }
            if (!inXClickCoordinate) {
                q('dialogDiv').style.left = (document.body.clientWidth - (0, _jquery2.default)('#dialogDiv').width()) / 2 + 'px';
            }
            if (!inYClickCoordinate) {
                q('dialogDiv').style.top = '20px';
            }
            q('dialogDiv').style.display = 'inline-block';
            q('dialogBackgroundOverlay').style.display = 'block';
            q('dialogBackgroundOverlay').style.height = document.body.clientHeight;
            q('dialogBackgroundOverlay').style.width = document.body.clientWidth;
            q('dialogDiv').className = 'dialogDiv';
            q('dialogBackgroundOverlay').className = 'dialogBackgroundOverlay_Visible';
            window.setTimeout(function() {
                cb && cb();
            }, 50);
        };
        isProcessGlobalKeydownAllowed = false;
        closeAllMenus();
        setDialogPixelWidth('500');
        q('dialogBodyContainer').style.background = '#fff';
        q('dialogFooterButtonLeft').className = 'sbButton';
        q('dialogFooterButtonLeft').dataset.type = '';
        q('dialogFooterButtonLeft').style.display = 'none';
        q('dialogFooterButtonLeft').style.width = '60px';
        q('dialogFooterButtonMiddle').style.display = 'inline-block';
        q('dialogFooterButtonMiddle').innerHTML = 'Save';
        q('dialogFooterButtonMiddle').className = 'sbButton';
        q('dialogFooterButtonMiddle').dataset.type = '';
        q('dialogFooterButtonMiddle').style.width = '60px';
        q('dialogFooterButtonRight').style.display = 'inline-block';
        q('dialogFooterButtonRight').innerHTML = 'Cancel';
        q('dialogFooterButtonRight').className = 'sbButton';
        q('dialogFooterButtonRight').dataset.type = '4';
        q('dialogFooterButtonRight').style.width = '60px';
        _domUtil2.default.enable(q('dialogFooterButtonLeft'));
        _domUtil2.default.enable(q('dialogFooterButtonMiddle'));
        _domUtil2.default.enable(q('dialogFooterButtonRight'));
        dialogFooterButtonAction_Right = dialogFooterButtonAction_hideDialog;
        dialogFooterButtonAction_Middle = dialogFooterButtonAction_hideDialog;
        dialogFooterButtonAction_Left = dialogFooterButtonAction_hideDialog;
        q('dialogFooterCheckbox').style.display = 'none';
        q('dialogSubfooter').style.display = 'none';
        if (inDialogBodyElementId == 'dialogBody_ImportSession') {
            initializeDialog_ImportSession(inXClickCoordinate, inYClickCoordinate, function() {
                q('sessionImportText').select();
                q('sessionImportText').value = '';
                _domUtil2.default.disable(q('dialogFooterButtonMiddle'));
                finalizeDialogInitialization();
            });
        } else if (inDialogBodyElementId == 'dialogBody_ExportSession') {
            initializeDialog_ExportSession(inXClickCoordinate, inYClickCoordinate, function() {
                setControlStates_ExportSession();
                finalizeDialogInitialization();
            });
        } else if (inDialogBodyElementId == 'dialogBody_SessionRename') {
            initializeDialog_SessionRename(inXClickCoordinate, inYClickCoordinate, function() {
                q('sessionNameInput_SessionRename').focus();
                q('sessionNameInput_SessionRename').select();
                finalizeDialogInitialization();
            });
        } else if (inDialogBodyElementId == 'dialogBody_SessionSave') {
            initializeDialog_SessionSave(inXClickCoordinate, inYClickCoordinate, function() {
                q('sessionNameInput_SessionSave').focus();
                q('sessionNameInput_SessionSave').value = '';
                q('chkDialogFooter').checked = false;
                q('dialogFooterCheckboxLabel').innerText = 'Never ask for name';
                finalizeDialogInitialization();
            });
        } else if (inDialogBodyElementId == 'dialogBody_CloseWot') {
            initializeDialog_CloseWot(inXClickCoordinate, inYClickCoordinate, function() {
                q('chkDialogFooter').checked = false;
                q('dialogFooterCheckboxLabel').innerText = 'Don\'t warn again';
                finalizeDialogInitialization();
            });
        } else if (inDialogBodyElementId == 'dialogBody_IcognitoDisabled') {
            initializeDialog_IcognitoDisabled(inXClickCoordinate, inYClickCoordinate, function() {
                finalizeDialogInitialization();
            });
        } else if (inDialogBodyElementId == 'dialogBody_SessionMergeWarning') {
            initializeDialog_SessionMergeWarning(inXClickCoordinate, inYClickCoordinate, function() {
                q('chkDialogFooter').checked = false;
                q('dialogFooterCheckboxLabel').innerText = 'Don\'t ask again';
                finalizeDialogInitialization();
            });
        } else if (inDialogBodyElementId == 'dialogBody_About') {
            initializeDialog_About(inXClickCoordinate, inYClickCoordinate, function() {
                finalizeDialogInitialization();
            });
        } else if (inDialogBodyElementId == 'dialogBody_Options') {
            initializeDialog_Options(inXClickCoordinate, inYClickCoordinate, finalizeDialogInitialization);
        }
    }
    function evaluateImportInput(cb, delay) {
        clearTimeout(evaluateImportInputDelay);
        evaluateImportInputDelay = setTimeout(function() {
            validateImport(q('sessionImportText').value.trim(), cb);
        }, delay || 1);
    }
    function handleImportFileSelect(e) {
        e.stopPropagation();
        e.preventDefault();
        if (event.type !== 'drop' || event.which == 1 && !_keyUtil2.default.hasCtrlKeyModifier(event) && !event.shiftKey) {
            (0, _jquery2.default)('#sessionImportText').removeClass('sessionImportText-dragover');
            var files = e.dataTransfer && e.dataTransfer.files || e.target.files;
            if (files.length > 0) {
                var thisReader = new FileReader(), f = files[0];
                if (!f.type.match('image.*') || !f.type) {
                    thisReader.onload = function() {
                        return function(e) {
                            q('sessionImportText').value = e.target.result;
                            (0, _jquery2.default)('#sessionImportText').scrollTop(0).scrollLeft(0);
                            evaluateImportInput(processNormalizedImportInput);
                        };
                    }();
                    thisReader.readAsText(f);
                } else {
                    (0, _jquery2.default)('#importStatus').show().text('Not a valid import file' + (f.type ? ' (' + f.type + ')' : '')).addClass('importStatus_error');
                }
            }
        }
    }
    function initializeDialog_ImportSession(inXClickCoordinate, inYClickCoordinate, cb) {
        q('dialogSubfooter').style.display = 'none';
        setDialogHeaderContent('Import');
        setDialogPixelWidth('600');
        q('sessionImportText').style.height = '';
        q('sessionImportText').style.width = parseInt(q('dialogDiv').style.width) - 37 + 'px';
        document.body.addEventListener('mousemove', resizeImportDialog);
        hideDialogPostHandler = hideDialogPostHandler_ImportSession;
        (0, _jquery2.default)('#dialogFooter').append('<span id="importStatus" class="importStatus">');
        if (isFileAPISupported) {
            (0, _jquery2.default)('#dialogFooter').append((0, _jquery2.default)('<input type="file" id="btnImport" class="btnImport" title=" ">'));
            (0, _jquery2.default)('#dialogFooter').append('<span id="fileImportOverlay" class="fileImportOverlay">');
            if (us('app_useClassicFont')) {
                (0, _jquery2.default)('#btnImport').addClass('fontClassic');
            }
            (0, _jquery2.default)('#importStatus').css('left', '107px');
            (0, _jquery2.default)('#btnImport').on('change', handleImportFileSelect);
        }
        q('dialogFooterButtonMiddle').dataset.type = '4';
        q('dialogFooterButtonMiddle').innerHTML = 'Save';
        dialogFooterButtonAction_Middle = dialogFooterButtonAction_saveAndRenderImportSession;
        q('sessionImportText').value = '';
        cb && cb();
    }
    function initializeDialog_ExportSession(inXClickCoordinate, inYClickCoordinate, cb) {
        setDialogHeaderContent('Export');
        setDialogPixelWidth(isFileAPISupported ? '690' : '600');
        q('sessionExportText').style.height = '';
        q('sessionExportText').style.width = parseInt(q('dialogDiv').style.width) - 47 + 'px';
        document.body.addEventListener('mousemove', resizeExportDialog);
        hideDialogPostHandler = hideDialogPostHandler_ExportSession;
        q('dialogFooter').appendChild(_domUtil2.default.createElement('span', 'exportStatus', 'exportStatus'));
        chrome.permissions.contains({
            permissions: [ 'clipboardWrite' ]
        }, function(hasPermission) {
            q('dialogSubfooter').style.display = hasPermission ? 'none' : 'block';
        });
        q('dialogFooterButtonRight').innerHTML = 'Close';
        if (isFileAPISupported) {
            q('dialogFooterButtonLeft').dataset.type = '4';
            q('dialogFooterButtonLeft').style.width = '115px';
            q('dialogFooterButtonLeft').innerHTML = 'Copy to Clipboard';
            q('dialogFooterButtonLeft').style.display = 'inline-block';
            dialogFooterButtonAction_Left = dialogFooterButtonAction_ExportSessionCopyToClipboard;
            q('dialogFooterButtonMiddle').dataset.type = '4';
            q('dialogFooterButtonMiddle').style.width = '115px';
            q('dialogFooterButtonMiddle').innerHTML = 'Save to File';
            dialogFooterButtonAction_Middle = dialogFooterButtonAction_ExportSessionSaveToFile;
        } else {
            q('dialogFooterButtonMiddle').dataset.type = '4';
            q('dialogFooterButtonMiddle').style.width = '115px';
            q('dialogFooterButtonMiddle').innerHTML = 'Copy to Clipboard';
            dialogFooterButtonAction_Middle = dialogFooterButtonAction_ExportSessionCopyToClipboard;
        }
        q('sessionExportText').rows = 10;
        q('chkShowSessions').checked = us('sessionExport_ShowSessions');
        q('chkShowWindows').checked = us('sessionExport_ShowWindows');
        q('chkShowTitles').checked = us('sessionExport_ShowTitles');
        q('chkShowURLs').checked = us('sessionExport_ShowURLs');
        q('sessionExport_Scope').value = us('sessionExport_Scope');
        switch (us('sessionExport_Format')) {
          case 'CSV':
            selectSettingsTabSheet(q('tabGroup_tab_ExportCSV'));
            break;

          case 'JSON':
            selectSettingsTabSheet(q('tabGroup_tab_ExportJSON'));
            break;

          case 'HTML':
            selectSettingsTabSheet(q('tabGroup_tab_ExportHTML'));
            break;

          case 'Markdown':
            selectSettingsTabSheet(q('tabGroup_tab_ExportMarkdown'));
            break;

          default:
            selectSettingsTabSheet(q('tabGroup_tab_ExportText'));
        }
        cb && cb();
    }
    function initializeDialog_SessionRename(inXClickCoordinate, inYClickCoordinate, cb) {
        q('dialogSubfooter').style.display = 'none';
        setDialogHeaderContent('Name Session');
        setDialogPixelWidth('350');
        q('sessionNameInput_SessionRename').addEventListener('keydown', editSessionRenameKeydown);
        hideDialogPostHandler = hideDialogPostHandler_SessionRename;
        q('dialogFooterButtonMiddle').dataset.type = '4';
        q('dialogFooterButtonMiddle').innerHTML = 'OK';
        q('dialogFooterButtonMiddle').style.display = 'inline-block';
        dialogFooterButtonAction_Middle = dialogFooterButtonAction_renameRenderedSession;
        cb && cb();
    }
    function editSessionRenameKeydown() {
        if (event.keyCode === 13) {
            renameRenderedSession(this.value);
            hideDialog(function() {
                q('sessionsPanel').focus();
            });
        }
    }
    function initializeDialog_SessionSave(inXClickCoordinate, inYClickCoordinate, cb) {
        q('dialogSubfooter').style.display = 'none';
        setDialogHeaderContent('Save Session');
        setDialogPixelWidth('370');
        q('dialogFooterCheckbox').style.display = 'inline';
        q('sessionNameInput_SessionSave').addEventListener('keydown', editSessionSaveKeydown);
        q('dialogFooterButtonMiddle').dataset.type = '4';
        q('dialogFooterButtonMiddle').innerHTML = 'OK';
        q('dialogFooterButtonMiddle').style.display = 'inline-block';
        dialogFooterButtonAction_Middle = dialogFooterButtonAction_saveOrUpdateRenderedSession;
        sessionNameInput_SessionSave_Action = saveOrUpdateRenderedSession;
        hideDialogPostHandler = hideDialogPostHandler_SessionSave;
        cb && cb();
    }
    function initializeDialog_CloseWot(inXClickCoordinate, inYClickCoordinate, cb) {
        q('dialogSubfooter').style.display = 'none';
        setDialogPixelWidth('370');
        q('dialogFooterCheckbox').style.display = 'inline';
        q('dialogFooterButtonMiddle').dataset.type = '4';
        q('dialogFooterButtonMiddle').innerHTML = 'Yes';
        q('dialogFooterButtonMiddle').style.display = 'inline-block';
        q('dialogFooterButtonRight').innerHTML = 'No';
        cb && cb();
    }
    function initializeDialog_IcognitoDisabled(inXClickCoordinate, inYClickCoordinate, cb) {
        q('dialogSubfooter').style.display = 'none';
        setDialogPixelWidth('400');
        q('dialogFooterButtonMiddle').style.display = 'none';
        q('dialogFooterButtonRight').dataset.type = '4';
        q('dialogFooterButtonRight').innerHTML = 'OK';
        cb && cb();
    }
    function editSessionSaveKeydown() {
        if (event.keyCode === 13) {
            sessionNameInput_SessionSave_Action(this.value, postsaveOrUpdateRenderedSession_HideDialog);
        }
    }
    function initializeDialog_SessionMergeWarning(inXClickCoordinate, inYClickCoordinate, cb) {
        q('dialogSubfooter').style.display = 'none';
        setDialogHeaderContent('Merge Selected Sessions');
        setDialogPixelWidth('380');
        q('dialogFooterCheckbox').style.display = 'inline';
        q('dialogFooterButtonRight').innerHTML = 'No';
        q('dialogFooterButtonMiddle').dataset.type = '4';
        q('dialogFooterButtonMiddle').innerHTML = 'Yes';
        q('dialogFooterButtonMiddle').style.display = 'inline-block';
        dialogFooterButtonAction_Middle = dialogFooterButtonAction_mergeSessions;
        cb && cb();
    }
    function initializeDialog_About(inXClickCoordinate, inYClickCoordinate, cb) {
        q('dialogSubfooter').style.display = 'none';
        setDialogHeaderContent('About Session Buddy');
        setDialogPixelWidth('500');
        q('dialogFooterButtonMiddle').style.display = 'none';
        q('dialogFooterButtonRight').innerHTML = 'Close';
        if (app.applicationException) {
            q('sbStatus').innerText = 'Error';
            q('sbStatus').style.color = 'hsl(0, 60%, 50%)';
            q('sbStatusLink').style.color = 'hsl(0, 60%, 50%)';
            q('sbStatusLink').style.textDecoration = 'underline';
            q('sbStatusLink').style.fontWeight = 'bold';
        } else {
            q('sbStatus').innerText = 'OK';
            q('sbStatus').style.color = 'hsl(0, 0%, 30%)';
            q('sbStatusLink').style.color = 'hsl(0, 0%, 30%)';
            q('sbStatusLink').style.textDecoration = 'none';
            q('sbStatusLink').style.fontWeight = '300';
        }
        cb && cb();
    }
    function initializeDialog_Options(inXClickCoordinate, inYClickCoordinate, cb) {
        q('dialogSubfooter').style.display = 'none';
        dateFormatSampleDate = new Date();
        setDialogHeaderContent('Session Buddy Settings');
        setDialogPixelWidth('600');
        q('dialogFooterButtonMiddle').dataset.type = '4';
        _domUtil2.default.initializeControl(q('chkShowPreviousSessions'), us('automaticallyRecordSessions'));
        _domUtil2.default.initializeControl(q('selPreviousSessionQueueSize'), us('sessionSummaryRender_PreviousSessionQueueSize'));
        _domUtil2.default.initializeControl(q('chkHideDuplicateTabsInCombinedSession'), us('sessionEdit_HideDuplicateTabsInMerge'));
        _domUtil2.default.initializeControl(q('chkIgnoreUrlParamsInTabCompare'), us('sessionEdit_IgnoreUrlParamsInTabCompare'));
        _domUtil2.default.initializeControl(q('chkIgnoreURLParmsInSearch'), us('ignoreURLParmsForSearch'));
        _domUtil2.default.initializeControl(q('chkAskForName'), us('sessionSave_AskForName'));
        _domUtil2.default.initializeControl(q('chkShowExtensionBadge'), us('sessionRender_ShowExtensionBadge'));
        _domUtil2.default.initializeControl(q('chkShowTabCountsOnWindowHeaders'), us('showWindowCounts'));
        _domUtil2.default.initializeControl(q('chk_UserSetting_ShowAdminTabsInItalic'), us('sessionRender_ShowAdminTabsInItalic'));
        _domUtil2.default.initializeControl(q('chk_UserSetting_ShowSessionCountsInNavigationPane'), us('sessionRender_ShowSessionCountsInNavigationPane'));
        _domUtil2.default.initializeControl(q('chk_UserSetting_useClassicFont'), us('app_useClassicFont'));
        _domUtil2.default.initializeControl(q('chkFilterSessionBuddyTabs'), us('tabFiltering_FilterSessionBuddyTabs'));
        _domUtil2.default.initializeControl(q('chkFilterChromeAdministrativeTabs'), us('tabFiltering_FilterChromeAdministrativeTabs'));
        _domUtil2.default.initializeControl(q('chkEnableKeyboardShortcuts'), us('enableKeyboardShortcuts'));
        _domUtil2.default.initializeControl(q('optDateDisplayTypeStandard'), us('dateDisplayType'));
        _domUtil2.default.initializeControl(q('txtCustomDateFormat'), us('customDateFormat'));
        setControlState_ShowPreviousSessions();
        dialogFooterButtonAction_Middle = dialogFooterButtonAction_saveSbSettings;
        setControlStates_OptionsDialog();
        cb && cb();
    }
    function hideDialog(cb) {
        if ((0, _jquery2.default)('#dialogDiv').hasClass('dialog_Hidden') && (0, _jquery2.default)('#dialogBackgroundOverlay').hasClass('dialogBackgroundOverlay_Hidden')) {
            if (_util2.default.isFunction(cb)) {
                cb();
            }
            return;
        }
        if (hideDialogPostHandler) {
            hideDialogPostHandler();
            hideDialogPostHandler = null;
        }
        q('dialogDiv').className = 'dialogDiv dialog_Hidden';
        q('dialogBackgroundOverlay').className = 'dialogBackgroundOverlay_Hidden';
        window.setTimeout(function() {
            q('dialogDiv').style.display = 'none';
            q('dialogBackgroundOverlay').style.display = 'none';
            if (_util2.default.isFunction(cb)) {
                cb();
            }
        }, 300);
        if (_domUtil2.default.isChildOf(document.activeElement, q('dialogDiv'))) {
            document.activeElement.blur();
        }
        isProcessGlobalKeydownAllowed = true;
        (0, _jquery2.default)('#exportStatus').remove();
        (0, _jquery2.default)('#btnImport').remove();
        (0, _jquery2.default)('#importStatus').remove();
        (0, _jquery2.default)('#fileImportOverlay').off('change', handleImportFileSelect);
        (0, _jquery2.default)('#fileImportOverlay').remove();
    }
    function enableDialogMove() {
        document.body.addEventListener('mousemove', moveDialog, true);
        document.body.addEventListener('mouseup', disableDialogMove, true);
        q('dialogDiv').startX = event.clientX;
        q('dialogDiv').startY = event.clientY;
        q('dialogDiv').startLeft = window.parseInt(q('dialogDiv').style.left);
        q('dialogDiv').startTop = window.parseInt(q('dialogDiv').style.top);
        return false;
    }
    function disableDialogMove() {
        document.body.removeEventListener('mousemove', moveDialog, true);
        document.body.removeEventListener('mouseup', disableDialogMove, true);
        return false;
    }
    function moveDialog() {
        q('dialogDiv').style.left = q('dialogDiv').startLeft + event.clientX - q('dialogDiv').startX + 'px';
        q('dialogDiv').style.top = q('dialogDiv').startTop + event.clientY - q('dialogDiv').startY + 'px';
        q('dialogDiv').style.display = 'none';
        q('dialogDiv').offsetHeight;
        q('dialogDiv').style.display = 'inline-block';
        return false;
    }
    function setDialogHeaderContent(html) {
        if (html || html === '') {
            q('dialogHeaderContent').innerHTML = html;
        }
    }
    function setDialogPixelWidth(pixelWidth) {
        if (_util2.default.isNumeric(pixelWidth)) {
            q('dialogDiv').style.width = parseInt(pixelWidth) + 'px';
        }
    }
    function setControlStates_ExportSession() {
        if (getExportTxtVal() === 'JSON') {
            (0, _jquery2.default)('#showTitles, #showURLs').hide();
            (0, _jquery2.default)('#dummy_showTitles, #dummy_showURLs').show();
        } else {
            (0, _jquery2.default)('#showTitles, #showURLs').show();
            (0, _jquery2.default)('#dummy_showTitles, #dummy_showURLs').hide();
        }
        _domUtil2.default.toggleEnable([ q('dialogFooterButtonLeft'), q('dialogFooterButtonMiddle') ], q('sessionExportText').value);
    }
    function resizeExportDialog() {
        resizeDialog(q('sessionExportText'), 47);
    }
    function resizeImportDialog() {
        resizeDialog(q('sessionImportText'), 37);
    }
    function resizeDialog(inTextArea, offset) {
        if (event && event.which == 1) {
            q('dialogDiv').style.width = parseInt(inTextArea.style.width) + offset + 'px';
        }
    }
    function hideDialogPostHandler_ImportSession() {
        document.body.removeEventListener('mousemove', resizeImportDialog);
    }
    function hideDialogPostHandler_SessionRename() {
        document.body.removeEventListener('keydown', editSessionRenameKeydown);
    }
    function hideDialogPostHandler_ExportSession() {
        document.body.removeEventListener('mousemove', resizeExportDialog);
        saveExportOptions();
    }
    function hideDialogPostHandler_SessionSave() {
        document.body.removeEventListener('keydown', editSessionSaveKeydown);
        app.unlockAction();
    }
    function appendTab(parent, tab, winIdx, tabIdx, viewTwoLine, inDeleteAction, inShowAdminTabsInItalicState, inSessionTabId) {
        var tabTitle = app.getEffectiveTabTitle(tab), tabURL = tab.url, shortTabURL = us('ignoreURLParmsForSearch') ? _urlUtil2.default.truncateURL(tabURL) : tabURL;
        var tabTitleMatches = void 0, tabURLMatches = void 0;
        if (_searchTerms) {
            _searchTermRegEx = _searchTermRegEx || new RegExp(_util2.default.regExEscape(_searchTerms), 'gi');
            tabTitleMatches = _util2.default.findMatches(tabTitle, _searchTermRegEx);
            tabURLMatches = _util2.default.findMatches(shortTabURL, _searchTermRegEx);
            if (!tabTitleMatches && !tabURLMatches && !_searchShowAll) return;
        }
        var tabWrap = _domUtil2.default.createElement('div', 'tabDiv_' + tab.id, 'tabDiv');
        var sessionRender_Tab = _domUtil2.default.createElement('div', undefined, 'sessionRender_Tab');
        var sessionRender_Icon;
        if (inDeleteAction && (inSessionTabId === false || inSessionTabId !== tab.id)) {
            sessionRender_Icon = _domUtil2.default.createElement('div', 'sessionRender_WindowOrTabDeleteGlyph_' + winIdx + '_' + tabIdx, 'sessionRender_WindowOrTabDeleteGlyph');
            sessionRender_Icon.classList.add(inSessionTabId === false ? 'sessionRender_WindowOrTabDeleteGlyph_x' : 'sessionRender_WindowOrTabDeleteGlyph_close');
            sessionRender_Icon.dataset.wSeq = winIdx;
            sessionRender_Icon.dataset.tSeq = tabIdx;
            sessionRender_Icon.dataset.tid = tab.id;
            sessionRender_Icon.addEventListener('click', inDeleteAction);
            sessionRender_Tab.appendChild(sessionRender_Icon);
        } else {
            sessionRender_Tab.appendChild(_domUtil2.default.createElement('div', null, 'delete_glyph_placeholder'));
        }
        sessionRender_Icon = _domUtil2.default.createElement('img', undefined, 'sessionRender_Tab_Favicon');
        sessionRender_Icon.setAttribute('src', app.getAdjustedFavIconUrl(tab));
        sessionRender_Tab.appendChild(sessionRender_Icon);
        if (tab.pinned) {
            sessionRender_Icon = _domUtil2.default.createElement('div', undefined, 'sessionRender_Tab_Pin');
            (0, _jquery2.default)(sessionRender_Icon).qtip({
                content: {
                    text: 'This tab is pinned'
                },
                position: {
                    my: 'bottom center',
                    at: 'top center',
                    adjust: {
                        y: -9
                    }
                },
                show: {
                    delay: 500
                },
                style: {
                    tip: {
                        corner: true,
                        width: 12
                    }
                }
            });
            sessionRender_Tab.appendChild(sessionRender_Icon);
        }
        var sessionRender_Tab_Label = _domUtil2.default.createElement('a', undefined, 'sessionRender_Tab_Label');
        if (tabTitleMatches) {
            sessionRender_Tab_Label.innerHTML = _util2.default.wrapMatches(tabTitle, tabTitleMatches, 'tabTitleHighlight');
        } else {
            sessionRender_Tab_Label.textContent = tabTitle;
        }
        if (inSessionTabId === tab.id) {
            sessionRender_Tab_Label.classList.add('SessionRender_Tab_Bold');
        } else {
            sessionRender_Tab_Label.setAttribute('href', tabURL);
            if (inSessionTabId === false) {
                sessionRender_Tab_Label.addEventListener('click', function(e) {
                    e.preventDefault();
                    _browser2.default.navigateTab({
                        focused: !_keyUtil2.default.hasCtrlKeyModifier(e),
                        url: tabURL,
                        pinned: tab.pinned,
                        incognito: tab.incognito
                    }, function() {
                        showDialog('dialogBody_IcognitoDisabled', undefined, undefined, function() {
                            setDialogHeaderContent('Incognito Disabled');
                            (0, _jquery2.default)('#icognitoDisabledMsg').html('Session Buddy can\'t open an incognito tab<br>while incognito is disabled');
                        });
                    });
                });
            } else {
                sessionRender_Tab_Label.addEventListener('click', function(e) {
                    e.preventDefault();
                    _browser2.default.navigateTab({
                        focused: true,
                        id: tab.id,
                        url: tabURL,
                        pinned: tab.pinned,
                        incognito: tab.incognito
                    });
                });
            }
        }
        sessionRender_Tab.appendChild(sessionRender_Tab_Label);
        if (inShowAdminTabsInItalicState && app.isSpecialTab(tab)) {
            sessionRender_Tab_Label.style.fontStyle = 'italic';
        }
        tabWrap.appendChild(sessionRender_Tab);
        var sessionRender_Tab_URL = _domUtil2.default.createElement('div', undefined, 'sessionRender_Tab_URL');
        var displayURL = void 0;
        if (viewTwoLine) {
            displayURL = tabURL;
        } else {
            displayURL = shortTabURL;
            tabWrap.classList.add('tabWrapSideBySide');
            if (tabURLMatches) sessionRender_Tab_URL.style.display = 'inline-block';
        }
        if (tabURLMatches) {
            sessionRender_Tab_URL.innerHTML = '<span class="tob_url_inner">' + _util2.default.wrapMatches(displayURL, tabURLMatches, 'tabUrlHighlight') + '</span>';
        } else {
            if (!tabTitleMatches && _searchTerms) {
                sessionRender_Tab.classList.add('tob-url-muted');
            }
            sessionRender_Tab_URL.textContent = displayURL;
        }
        tabWrap.appendChild(sessionRender_Tab_URL);
        return parent.appendChild(tabWrap);
    }
    function classNameFromRestoreType() {
        return 'qtip_restore_RestoreSessionIntoASingleWindow';
    }
    function showWindowContextMenu(el, contextMenuType, inIsInCognito) {
        var t = (0, _jquery2.default)(el), w = t.closest('.sessionRender_Window');
        if (w.length) {
            var c = (0, _jquery2.default)('#sessionRenderContainer');
            var m = c.find('#windowContextMenu');
            m = (m.length ? m : (0, _jquery2.default)('<div id="windowContextMenu" class="dropdownMenu invisible"><div id="menuItemCopyToNewSession" class="menuItem">Copy to new session</div><div id="menuItemMoveToNewSession" class="menuItem">Move to new session</div><div id="windowContextMenuSeparator1" class="menuItemSeparator"></div><div id="menuItemOpenWindow" class="menuItem">Open</div><div id="menuItemOpenIncognitoWindow" class="menuItem">Open incognito</div><div id="menuItemOpenTabs" class="menuItem">Open tabs</div><div id="menuItemFocusWindow" class="menuItem">Focus</div><div id="windowContextMenuSeparator2" class="menuItemSeparator"></div><div id="menuItemRenameWindow" class="menuItem">Rename</div><div id="menuItemWindowToggleIncognito" class="menuItem">Toggle incognito</div><div id="windowContextMenuSeparator3" class="menuItemSeparator"></div><div id="menuItemDeleteWindow" class="menuItem">Delete</div><div id="menuItemCloseWindow" class="menuItem">Close</div></div>')).prependTo(w).removeClass('invisible');
            m.removeClass('menu_invert');
            switch (contextMenuType) {
              case 0:
                (0, _jquery2.default)('#windowContextMenuSeparator1').show();
                (0, _jquery2.default)('#windowContextMenuSeparator2').show();
                (0, _jquery2.default)('#windowContextMenuSeparator3').show();
                if (inIsInCognito) {
                    (0, _jquery2.default)('#menuItemOpenWindow').hide();
                    (0, _jquery2.default)('#menuItemOpenTabs').hide();
                    (0, _jquery2.default)('#menuItemWindowToggleIncognito').text('Remove incognito');
                } else {
                    (0, _jquery2.default)('#menuItemOpenWindow').show();
                    (0, _jquery2.default)('#menuItemOpenTabs').show();
                    (0, _jquery2.default)('#menuItemWindowToggleIncognito').text('Make incognito');
                }
                (0, _jquery2.default)('#menuItemFocusWindow').hide();
                (0, _jquery2.default)('#menuItemCopyToNewSession').show().text('Copy to new session');
                (0, _jquery2.default)('#menuItemMoveToNewSession').show().text('Move to new session');
                (0, _jquery2.default)('#menuItemRenameWindow').show();
                (0, _jquery2.default)('#menuItemWindowToggleIncognito').show();
                (0, _jquery2.default)('#menuItemDeleteWindow').show();
                (0, _jquery2.default)('#menuItemCloseWindow').hide();
                break;

              case 1:
                (0, _jquery2.default)('#windowContextMenuSeparator1').hide();
                (0, _jquery2.default)('#windowContextMenuSeparator2').hide();
                (0, _jquery2.default)('#windowContextMenuSeparator3').hide();
                (0, _jquery2.default)('#menuItemOpenWindow').hide();
                (0, _jquery2.default)('#menuItemOpenIncognitoWindow').hide();
                (0, _jquery2.default)('#menuItemOpenTabs').hide();
                (0, _jquery2.default)('#menuItemFocusWindow').hide();
                (0, _jquery2.default)('#menuItemCopyToNewSession').show().text('Save');
                (0, _jquery2.default)('#menuItemMoveToNewSession').hide();
                (0, _jquery2.default)('#menuItemRenameWindow').hide();
                (0, _jquery2.default)('#menuItemWindowToggleIncognito').hide();
                (0, _jquery2.default)('#menuItemDeleteWindow').hide();
                (0, _jquery2.default)('#menuItemCloseWindow').hide();
                break;

              case 2:
                (0, _jquery2.default)('#windowContextMenuSeparator1').show();
                (0, _jquery2.default)('#windowContextMenuSeparator2').show();
                (0, _jquery2.default)('#windowContextMenuSeparator3').hide();
                (0, _jquery2.default)('#menuItemOpenWindow').hide();
                (0, _jquery2.default)('#menuItemOpenIncognitoWindow').hide();
                (0, _jquery2.default)('#menuItemOpenTabs').hide();
                (0, _jquery2.default)('#menuItemFocusWindow').show();
                (0, _jquery2.default)('#menuItemCopyToNewSession').show().text('Save');
                (0, _jquery2.default)('#menuItemMoveToNewSession').show().text('Save & close');
                (0, _jquery2.default)('#menuItemRenameWindow').hide();
                (0, _jquery2.default)('#menuItemWindowToggleIncognito').hide();
                (0, _jquery2.default)('#menuItemDeleteWindow').hide();
                (0, _jquery2.default)('#menuItemCloseWindow').show();
                break;

              case 3:
                (0, _jquery2.default)('#windowContextMenuSeparator1').show();
                (0, _jquery2.default)('#windowContextMenuSeparator2').hide();
                (0, _jquery2.default)('#windowContextMenuSeparator3').hide();
                if (inIsInCognito) {
                    (0, _jquery2.default)('#menuItemOpenWindow').hide();
                    (0, _jquery2.default)('#menuItemOpenTabs').hide();
                } else {
                    (0, _jquery2.default)('#menuItemOpenWindow').show();
                    (0, _jquery2.default)('#menuItemOpenTabs').show();
                }
                (0, _jquery2.default)('#menuItemFocusWindow').hide();
                (0, _jquery2.default)('#menuItemCopyToNewSession').show().text('Copy to new session');
                (0, _jquery2.default)('#menuItemMoveToNewSession').hide();
                (0, _jquery2.default)('#menuItemRenameWindow').hide();
                (0, _jquery2.default)('#menuItemWindowToggleIncognito').hide();
                (0, _jquery2.default)('#menuItemDeleteWindow').hide();
                (0, _jquery2.default)('#menuItemCloseWindow').hide();
                break;
            }
            if (m.get(0).getBoundingClientRect().bottom > q('sessionRenderContainer').clientHeight + 168) {
                m.addClass('menu_invert');
            }
        }
    }
    function createSessionWindowElement(inWindow, winIdx, inDeleteAction, inSessionWindowId, showCounts, shownTabCount, totalTabCount) {
        var sessionRender_Window = _domUtil2.default.createElement('div', 'windowId_' + inWindow.id, 'sessionRender_Window');
        sessionRender_Window.dataset.wSeq = winIdx;
        sessionRender_Window.dataset.wid = inWindow.id;
        if (inWindow.nx_title) {
            (0, _jquery2.default)(sessionRender_Window).data('nx_title', inWindow.nx_title);
        }
        if (inDeleteAction && (inSessionWindowId === false || inSessionWindowId !== inWindow.id)) {
            var sessionRender_DeleteIcon = _domUtil2.default.createElement('div', 'sessionRender_WindowOrTabDeleteGlyph_' + winIdx, 'sessionRender_WindowOrTabDeleteGlyph');
            sessionRender_DeleteIcon.classList.add(inSessionWindowId === false ? 'sessionRender_WindowOrTabDeleteGlyph_x' : 'sessionRender_WindowOrTabDeleteGlyph_close');
            sessionRender_DeleteIcon.dataset.wSeq = winIdx;
            sessionRender_DeleteIcon.dataset.wid = inWindow.id;
            sessionRender_DeleteIcon.addEventListener('mousedown', function(e) {
                if (e.target.parentElement.classList.contains('sessionRender_Window_Editing')) {
                    e.stopPropagation();
                }
            });
            sessionRender_DeleteIcon.addEventListener('click', function(e) {
                if (e.target.parentElement.classList.contains('sessionRender_Window_Editing')) {
                    e.stopPropagation();
                    e.stopImmediatePropagation();
                }
            }, true);
            sessionRender_DeleteIcon.addEventListener('click', inDeleteAction);
            sessionRender_Window.appendChild(sessionRender_DeleteIcon);
        } else {
            var dgp = _domUtil2.default.createElement('div', null, 'delete_glyph_placeholder');
            sessionRender_Window.appendChild(dgp);
        }
        var sessionRender_Window_Label = document.createElement('div');
        sessionRender_Window_Label.dataset.wid = inWindow.id;
        sessionRender_Window_Label.spellcheck = false;
        var qtipTitle;
        sessionRender_Window_Label.setAttribute('class', 'sessionRender_Window_Label');
        var contextMenuType;
        if (inSessionWindowId === false) {
            if (inDeleteAction) {
                contextMenuType = 0;
            } else {
                contextMenuType = 3;
            }
            sessionRender_Window_Label.addEventListener('mousedown', function(e) {
                if (e.target.parentElement.classList.contains('sessionRender_Window_Editing')) {
                    e.stopPropagation();
                }
            });
            sessionRender_Window_Label.addEventListener('dblclick', function(e) {
                if (e.target.parentElement.classList.contains('sessionRender_Window_Editing')) {
                    e.stopPropagation();
                    return;
                }
                app.restoreSession(renderedSessionWindows, 'RestoreSessionIntoASingleWindow', [ winIdx - 1 ], null, null, function() {
                    return showDialog('dialogBody_IcognitoDisabled', undefined, undefined, function() {
                        setDialogHeaderContent('Incognito Disabled');
                        (0, _jquery2.default)('#icognitoDisabledMsg').html('Session Buddy can\'t open an incognito window<br>while incognito is disabled');
                    });
                });
                (0, _jquery2.default)(this).qtip('hide');
                e.preventDefault();
            });
            qtipTitle = 'Double-click to open&nbsp;&nbsp;&nbsp;&#8226;&nbsp;&nbsp;&nbsp;Right-click for more actions';
        } else if (inSessionWindowId === inWindow.id) {
            contextMenuType = 1;
            sessionRender_Window.classList.add('sessionRender_Window_Current');
            qtipTitle = 'Right-click for actions';
        } else {
            contextMenuType = 2;
            sessionRender_Window_Label.addEventListener('dblclick', function(e) {
                if (e.target.parentElement.classList.contains('sessionRender_Window_Editing')) {
                    e.stopPropagation();
                    return;
                }
                _browser2.default.focusWindow(parseInt(this.dataset.wid));
                (0, _jquery2.default)(this).qtip('hide');
                e.preventDefault();
            });
            qtipTitle = 'Double-click to focus&nbsp;&nbsp;&nbsp;&#8226;&nbsp;&nbsp;&nbsp;Right-click for more actions';
        }
        sessionRender_Window_Label.addEventListener('contextmenu', function(e) {
            var w = (0, _jquery2.default)(e.target).closest('.sessionRender_Window');
            if (w.hasClass('sessionRender_Window_Editing')) {
                e.preventDefault();
                return;
            }
            (0, _jquery2.default)(this).qtip('hide');
            (0, _jquery2.default)(this).qtip('disable');
            e.preventDefault();
            showWindowContextMenu(e.target, contextMenuType, inWindow.incognito);
        });
        (0, _jquery2.default)(sessionRender_Window_Label).qtip({
            content: {
                text: qtipTitle
            },
            position: {
                my: 'left center',
                at: 'right center',
                adjust: {
                    x: 10
                }
            },
            show: {
                delay: 400
            },
            style: {
                tip: {
                    corner: true,
                    width: 12
                }
            }
        });
        var sessionRender_Icon = document.createElement('div');
        sessionRender_Window_Label.style.maxWidth = 'calc(100% - 60px)';
        sessionRender_Window_Label.style.marginLeft = '2px';
        if (inWindow.incognito) {
            sessionRender_Icon.className = 'sessionRender_Window_Incognito';
            (0, _jquery2.default)(sessionRender_Icon).qtip({
                content: {
                    text: 'This window is incognito'
                },
                position: {
                    my: 'bottom center',
                    at: 'top center',
                    adjust: {
                        y: -9
                    }
                },
                show: {
                    delay: 500
                },
                style: {
                    tip: {
                        corner: true,
                        width: 12
                    }
                }
            });
        } else {
            sessionRender_Icon.className = 'sessionRender_Window_Cognito';
        }
        sessionRender_Window.appendChild(sessionRender_Icon);
        sessionRender_Window_Label.textContent = app.getEffectiveWindowTitle(inWindow, null, inSessionWindowId === inWindow.id);
        sessionRender_Window.appendChild(sessionRender_Window_Label);
        if (shownTabCount && (showCounts || shownTabCount < totalTabCount)) {
            sessionRender_Window.appendChild(_domUtil2.default.createElement('span', undefined, 'labelAnnotation')).textContent = shownTabCount < totalTabCount ? shownTabCount + ' of ' + totalTabCount + ' tabs' : _util2.default.pluralize(shownTabCount, 'tab', 'tabs');
        }
        return sessionRender_Window;
    }
    function setSessionHeaderElementContent(txt, tooltip, searchTerms, searchTermRegEx) {
        if (_util2.default.isString(txt)) {
            var matches;
            if (searchTerms && txt && (matches = _util2.default.findMatches(txt, searchTermRegEx || new RegExp(_util2.default.regExEscape(searchTerms), 'gi')))) {
                q('sessionTitle').innerHTML = _util2.default.wrapMatches(txt, matches, 'sessionTitleHighlight');
            } else {
                q('sessionTitle').textContent = txt;
            }
        }
        if (tooltip) {
            setNameableSessionTitle(tooltip);
        } else {
            setUnnameableSessionTitle();
        }
    }
    function setNameableSessionTitle(inTooltip) {
        (0, _jquery2.default)('#sessionTitle').qtip({
            content: {
                text: inTooltip
            },
            position: {
                my: 'bottom left',
                at: 'top left',
                adjust: {
                    x: 5,
                    y: -8
                }
            },
            show: {
                delay: 300
            },
            style: {
                tip: {
                    corner: true,
                    width: 12,
                    mimic: 'bottom center',
                    offset: 5
                }
            }
        });
        q('sessionTitle').classList.add('sessionTitle_nameable');
        q('sessionTitle').addEventListener('click', doRenameRenderedSession);
        q('sessionTitle').addEventListener('mouseover', enableSessionTitleTip);
    }
    function enableSessionTitleTip() {
        (0, _jquery2.default)('#sessionTitle').qtip('enable');
    }
    function setUnnameableSessionTitle() {
        (0, _jquery2.default)('#sessionTitle').qtip('hide');
        (0, _jquery2.default)('#sessionTitle').qtip('disable');
        q('sessionTitle').classList.remove('sessionTitle_nameable');
        q('sessionTitle').removeEventListener('click', doRenameRenderedSession);
        q('sessionTitle').removeEventListener('mouseover', enableSessionTitleTip);
    }
    function setSessionStatusElementContent(inSubheaderText, inSubheaderAnnotationText) {
        if (inSubheaderText || inSubheaderText === '') {
            q('sessionStatusLeft').innerHTML = inSubheaderText;
        }
        if (inSubheaderAnnotationText || inSubheaderAnnotationText === '') {
            q('sessionStatusRight').innerHTML = inSubheaderAnnotationText;
        }
    }
    function setSessionRenderContainerContent(html) {
        if (html || html === '') {
            q('sessionRenderContainer').innerHTML = html;
        }
    }
    function uiLayoutManager(inNavigationPanelWidth, inMainPanelElement, inAppMessageContainerElement, inSplitterElement, inSearchBoxElement, inNavigationPanelElement, inBtnSaveElement, inBtnRestoreElement, inBtnActionsMenuElement, inSessionTitleElement, inBtnMergeSaveElement) {
        this.navigationPanelWidth = inNavigationPanelWidth;
        this.mainPanelElement = inMainPanelElement;
        this.appMessageContainerEl = (0, _jquery2.default)(inAppMessageContainerElement);
        this.splitterElement = inSplitterElement;
        this.searchBoxElement = inSearchBoxElement;
        this.navigationPanelElement = inNavigationPanelElement;
        this.btnSaveElement = inBtnSaveElement;
        this.btnRestoreElement = inBtnRestoreElement;
        this.btnActionsMenuElement = inBtnActionsMenuElement;
        this.sessionTitleElement = inSessionTitleElement;
        this.btnMergeSaveElement = inBtnMergeSaveElement;
        var sessionTitleMinWidth = 50;
        var breakPoint1 = 368;
        var breakPoint2 = 284;
        var breakPoint3 = 182;
        var breakPoint4 = 84;
        var that = this;
        this.arrangeMainPanel = function() {
            that.arrangeMainPanelHeader();
            var isBtnSaveElementRelevant = !that.btnSaveElement.classList.contains('invisible');
            var isBtnMergeElementRelevant = !that.btnMergeSaveElement.classList.contains('invisible');
            if (isBtnMergeElementRelevant && that.mainPanelElement.clientWidth > breakPoint1 + sessionTitleMinWidth) {
                that.sessionTitleElement.style.maxWidth = that.mainPanelElement.clientWidth - breakPoint1 + 'px';
                that.btnMergeSaveElement.style.display = that.btnSaveElement.style.display = '';
                that.btnRestoreElement.style.display = that.btnActionsMenuElement.style.display = 'inline-block';
            } else if (isBtnSaveElementRelevant && that.mainPanelElement.clientWidth > breakPoint2 + sessionTitleMinWidth) {
                that.sessionTitleElement.style.maxWidth = that.mainPanelElement.clientWidth - breakPoint2 + 'px';
                that.btnMergeSaveElement.style.display = 'none';
                that.btnSaveElement.style.display = '';
                that.btnRestoreElement.style.display = that.btnActionsMenuElement.style.display = 'inline-block';
            } else if (that.mainPanelElement.clientWidth > breakPoint3 + sessionTitleMinWidth) {
                that.sessionTitleElement.style.maxWidth = that.mainPanelElement.clientWidth - breakPoint3 + 'px';
                that.btnMergeSaveElement.style.display = that.btnSaveElement.style.display = 'none';
                that.btnRestoreElement.style.display = that.btnActionsMenuElement.style.display = 'inline-block';
            } else if (that.mainPanelElement.clientWidth > breakPoint4 + sessionTitleMinWidth) {
                that.sessionTitleElement.style.maxWidth = that.mainPanelElement.clientWidth - breakPoint4 + 'px';
                that.btnMergeSaveElement.style.display = that.btnSaveElement.style.display = that.btnRestoreElement.style.display = 'none';
                that.btnActionsMenuElement.style.display = 'inline-block';
            } else {
                that.sessionTitleElement.style.maxWidth = that.mainPanelElement.clientWidth + 'px';
                that.btnMergeSaveElement.style.display = that.btnSaveElement.style.display = that.btnRestoreElement.style.display = that.btnActionsMenuElement.style.display = 'none';
            }
        };
        this.arrangeMainPanelHeader = function(inAppStatusVisible) {
            var contentPaneWidth = that.mainPanelElement.clientWidth;
            var thisBaseWidth = 10;
            var thisTriggerWidth = thisBaseWidth + (inAppStatusVisible || appStatusVisible() ? 340 : 40);
            if (contentPaneWidth < thisTriggerWidth) {
                that.appMessageContainerEl.width(contentPaneWidth - thisBaseWidth);
            } else if (contentPaneWidth < thisTriggerWidth + 98) {
                that.appMessageContainerEl.width(contentPaneWidth - (thisBaseWidth + 57));
            } else if (contentPaneWidth < thisTriggerWidth + 145) {
                that.appMessageContainerEl.width(contentPaneWidth - (thisBaseWidth + 155));
            } else {
                that.appMessageContainerEl.width(contentPaneWidth - (thisBaseWidth + 212));
            }
        };
        this.resizeNavigationPanel = function(width) {
            if (width < 130) {
                width = 130;
            } else if (width > 500) {
                width = 500;
            } else {
                width = width - 5;
            }
            that.navigationPanelElement.style.width = width + 'px';
            that.searchBoxElement.style.width = width - 71 + 'px';
            that.splitterElement.style.left = width + 'px';
            that.mainPanelElement.style.left = width + 10 + 'px';
            that.navigationPanelWidth = parseInt(that.navigationPanelElement.style.width);
            that.arrangeMainPanel();
        };
        window.addEventListener('resize', function() {
            return that.arrangeMainPanel();
        });
        that.navigationPanelElement.style.width = that.navigationPanelWidth + 'px';
        that.searchBoxElement.style.width = that.navigationPanelWidth - 71 + 'px';
        that.splitterElement.style.left = that.navigationPanelWidth + 'px';
        that.mainPanelElement.style.left = that.navigationPanelWidth + 10 + 'px';
        that.arrangeMainPanel();
    }
    function evaluateMessageTrigger(inTriggername, cb) {
        if (cb) {
            db.getSetting('seqInterpolation2', function(value_SBStartStat) {
                db.getSetting(inTriggername, function(value_trigger) {
                    if (!value_trigger || !_util2.default.isNumeric(value_trigger)) {
                        db.setSetting(inTriggername, window.parseInt(value_SBStartStat) + 10, function() {
                            cb(false);
                        });
                    } else {
                        cb(window.parseInt(value_trigger) > -1 && window.parseInt(value_trigger) < window.parseInt(value_SBStartStat));
                    }
                });
            });
        }
    }
    function resetMessageTrigger(inTriggername, inOffset, cb) {
        db.getSetting('seqInterpolation2', function(value_SBStartStat) {
            db.setSetting(inTriggername, window.parseInt(value_SBStartStat) + inOffset, cb);
        });
    }
    function resetMessageTriggerIfPending(inTriggername, inOffset) {
        db.getSetting('seqInterpolation2', function(value_SBStartStat) {
            db.getSetting(inTriggername, function(value_trigger) {
                if (value_trigger > -1 && inOffset > window.parseInt(value_trigger) - window.parseInt(value_SBStartStat)) {
                    db.setSetting(inTriggername, window.parseInt(value_SBStartStat) + inOffset);
                }
            });
        });
    }
    function disableMessageTrigger(inTriggername, cb) {
        db.setSetting(inTriggername, -1, cb);
    }
    function doProcessSbButtonMouseover(btn, adjascentBtn) {
        if (_domUtil2.default.isEnabled(btn) && !btn.classList.contains('sbButton_on')) {
            if (adjascentBtn) {
                adjascentBtn.classList.add('adjascentButtonOn');
            }
            btn.classList.add('sbButton_mouseover');
            return true;
        }
        return false;
    }
    function doProcessSbButtonMouseout(btn, adjascentBtn) {
        if (_domUtil2.default.isEnabled(btn) && !btn.classList.contains('sbButton_on')) {
            if (adjascentBtn) {
                adjascentBtn.classList.remove('adjascentButtonOn');
            }
            btn.classList.remove('sbButton_mouseover');
            btn.classList.remove('sbButton_onclick');
            return true;
        }
        return false;
    }
    function doProcessSbButtonMousedown(btn, adjascentBtn) {
        document.body.classList.add('bodyNoSelect');
        if (event.which === 1 && event.button === 0 && _domUtil2.default.isEnabled(btn)) {
            if (adjascentBtn) {
                adjascentBtn.style.borderRightColor = 'hsl(0, 0%, 88%)';
            }
            btn.classList.add('sbButton_onclick');
            return true;
        }
        return false;
    }
    function doProcessSbButtonMouseup(btn, adjascentBtn) {
        document.body.classList.remove('bodyNoSelect');
        if (_domUtil2.default.isEnabled(btn)) {
            if (adjascentBtn) {
                adjascentBtn.style.borderRightColor = '';
            }
            btn.classList.remove('sbButton_onclick');
            return true;
        }
        return false;
    }
    function doProcessSbButtonOnclick(btn) {
        if (event.which === 1 && event.button === 0 && _domUtil2.default.isEnabled(btn)) {
            return true;
        }
        return false;
    }
    function processSbButtonMouseover(btn, cb) {
        if (doProcessSbButtonMouseover(btn)) {
            if (cb) {
                var args = [];
                for (var i = 2; i < arguments.length; i++) {
                    args.push(arguments[i]);
                }
                cb.apply(cb, args);
            }
        }
    }
    function processRightSbButtonMouseover(btn, adjascentBtn, cb) {
        if (doProcessSbButtonMouseover(btn, adjascentBtn)) {
            if (cb) {
                var args = [];
                for (var i = 2; i < arguments.length; i++) {
                    args.push(arguments[i]);
                }
                cb.apply(cb, args);
            }
        }
    }
    function processSbButtonMouseout(btn, cb) {
        if (doProcessSbButtonMouseout(btn)) {
            if (cb) {
                var args = [];
                for (var i = 2; i < arguments.length; i++) {
                    args.push(arguments[i]);
                }
                cb.apply(cb, args);
            }
        }
    }
    function processRightSbButtonMouseout(btn, adjascentBtn, cb) {
        if (doProcessSbButtonMouseout(btn, adjascentBtn)) {
            if (cb) {
                var args = [];
                for (var i = 2; i < arguments.length; i++) {
                    args.push(arguments[i]);
                }
                cb.apply(cb, args);
            }
        }
    }
    function processSbButtonMousedown(btn, cb) {
        if (doProcessSbButtonMousedown(btn)) {
            if (cb) {
                var args = [];
                for (var i = 2; i < arguments.length; i++) {
                    args.push(arguments[i]);
                }
                cb.apply(cb, args);
            }
        }
    }
    function processSbButtonMouseup(btn, cb) {
        if (doProcessSbButtonMouseup(btn)) {
            if (cb) {
                var args = [];
                for (var i = 2; i < arguments.length; i++) {
                    args.push(arguments[i]);
                }
                cb.apply(cb, args);
            }
        }
    }
    function processSbButtonOnclick(btn, cb) {
        if (doProcessSbButtonOnclick(btn)) {
            if (cb) {
                var args = [];
                for (var i = 2; i < arguments.length; i++) {
                    args.push(arguments[i]);
                }
                cb.apply(cb, args);
            }
        }
    }
    function processLeftSbButtonMousedown(btn, cb) {
        if (doProcessSbButtonMousedown(btn)) {
            if (cb) {
                var args = [];
                for (var i = 2; i < arguments.length; i++) {
                    args.push(arguments[i]);
                }
                cb.apply(cb, args);
            }
        }
    }
    function processLeftSbButtonMouseup(btn, cb) {
        if (doProcessSbButtonMouseup(btn)) {
            if (cb) {
                var args = [];
                for (var i = 2; i < arguments.length; i++) {
                    args.push(arguments[i]);
                }
                cb.apply(cb, args);
            }
        }
    }
    function processRightSbButtonMousedown(btn, cb, adjascentBtn) {
        if (doProcessSbButtonMousedown(btn, adjascentBtn)) {
            if (cb) {
                var args = [];
                for (var i = 2; i < arguments.length; i++) {
                    args.push(arguments[i]);
                }
                cb.apply(cb, args);
            }
        }
    }
    function processRightSbButtonOnclick(btn, menuName, adjascentBtn, cb) {
        if (doProcessSbButtonOnclick(btn)) {
            toggleMenu(btn, q(menuName), adjascentBtn);
            if (cb) {
                var args = [];
                for (var i = 2; i < arguments.length; i++) {
                    args.push(arguments[i]);
                }
                cb.apply(cb, args);
            }
        }
    }
    function processSbMenuButtonOnclick(btn, menuName, adjascentBtn, cb) {
        if (doProcessSbButtonOnclick(btn)) {
            toggleMenu(btn, q(menuName), adjascentBtn);
            if (cb) {
                var args = [];
                for (var i = 2; i < arguments.length; i++) {
                    args.push(arguments[i]);
                }
                cb.apply(cb, args);
            }
        }
    }
    function processMenuItemClick(menuItem, cb) {
        if (event.which === 1 && _domUtil2.default.isEnabled(menuItem)) {
            if (cb) {
                var args = [];
                for (var i = 2; i < arguments.length; i++) {
                    args.push(arguments[i]);
                }
                cb.apply(cb, args);
                closeAllMenus();
            }
        }
        event.stopPropagation();
        event.preventDefault();
    }
    function toggleMenu(btn, menuEl, adjascentBtn) {
        if (menuEl.classList.contains('invisible')) {
            openMenu(btn, menuEl, adjascentBtn);
            return true;
        } else {
            closeMenu(btn, menuEl);
            closeAllMenus();
            return false;
        }
    }
    function openMenu(btn, menuEl, adjascentBtn) {
        if (_domUtil2.default.isEnabled(btn) && !menuEl.classList.contains('visible')) {
            closeAllMenus();
            btn.classList.add('sbButton_on');
            menuEl.classList.add('visible');
            menuEl.classList.remove('invisible');
            if (adjascentBtn) {
                adjascentBtn.style.borderRightColor = 'hsl(0, 0%, 88%)';
            }
        }
    }
    function closeMenu(btn, menuEl) {
        if (_domUtil2.default.isEnabled(btn) && !menuEl.classList.contains('invisible')) {
            btn.classList.remove('sbButton_on');
            btn.classList.remove('sbButton_onclick');
            btn.classList.remove('sbButton_mouseover');
            menuEl.classList.add('invisible');
            if (menuEl.classList.contains('visible')) {
                menuEl.classList.remove('visible');
                return true;
            }
            return false;
        }
    }
}, , , function(module, exports) {
    (function(__webpack_amd_options__) {
        module.exports = __webpack_amd_options__;
    }).call(exports, {});
} ]);