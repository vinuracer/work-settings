#reload tmux conf with Prefix + r
bind r source-file ~/.tmux.conf \; display "Reloaded tmux.conf"

# Set the bash type
set-option -g default-shell /bin/zsh

# reset prefix to Control+b
# set -g prefix C-b
# unbind C-b

# Term type
set -g default-terminal xterm-256color
set -g status on
set-window-option -g xterm-keys on

#1 based window numbering because 0 is all the way to the right
set -g base-index 1
setw -g base-index 1

# Makes the prefix key immediately available. There
#  is no pause necessary for an escape sequence
set -s escape-time 0

# Lower escape timing from 500ms to 50ms for quicker response to scroll-buffer access.
# set -s escape-time 50

# titles for tmux tabs
set -g set-titles on
set -g @plugin 'MikeDacre/tmux-zsh-vim-titles'

# Enable mouse mode
set -g mouse on
set-window-option -g mouse on

# to enable mouse scroll, see https://github.com/tmux/tmux/issues/145#issuecomment-150736967
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e'"

# Allow mouse to select which pane to use
set -g mouse on

# Get the copy/paste back
set -g mouse off

# Allow xterm titles in terminal window, terminal scrolling with scrollbar, and setting overrides of C-Up, C-Down, C-Left, C-Right
# set -g terminal-overrides "xterm*:XT:smcup@:rmcup@:kUP5=\eOA:kDN5=\eOB:kLFT5=\eOD:kRIT5=\eOC"

# Scroll History
set -g history-limit 300000

# Set ability to capture on start and restore on exit window data when running an application
setw -g alternate-screen on

set-option -g status-position bottom

# Powerline style tmux status bar
set -g status-fg colour231
set -g status-bg colour234
set -g status-left-length 20
set -g status-left '#[fg=colour16,bg=colour254,bold] #S #[fg=colour254,bg=colour234,nobold]'
set -g status-right '#(eval tmux-airline `tmux display -p "#{client_width}"`)'
set -g status-right-length 150

set -g window-status-format "#[fg=colour244,bg=colour234]#I #[fg=colour240] #[default]#W "
set -g window-status-current-format "#[fg=colour234,bg=colour31]#[fg=colour117,bg=colour31] #I  #[fg=colour231,bold]#W #[fg=colour31,bg=colour234,nobold]"

set-window-option -g window-status-fg colour249
set-window-option -g window-status-activity-attr none
set-window-option -g window-status-bell-attr none
set-window-option -g window-status-activity-fg yellow
set-window-option -g window-status-bell-fg red

# Tmux pane border color
set-option -g pane-active-border-fg green

# Make the split windows go to same directory
bind-key c new-window -c "#{pane_current_path}"
bind-key % split-window -h -c "#{pane_current_path}"
bind-key '"' split-window -v -c "#{pane_current_path}"

# set the status kets as vi
set -g status-keys vi
set-window-option -g mode-keys vi

# tmux key mappings for home and end
bind -n End send-key C-e
bind -n Home send-key C-a

# Copy mode vi key mappings for home and end
unbind-key -t vi-copy 'Home'
bind-key -t vi-copy 'Home' start-of-line
unbind-key -t vi-copy 'End'
bind-key -t vi-copy 'End' end-of-line

# Ctrl + hjkl keys mapping
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

# bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
# bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
# bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
# bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
# bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Unified Ctrl keybinding for vim + tmux + fzf
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

is_fzf="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?fzf$'"

# bind -n C-h run "($is_vim && tmux send-keys C-h) || \
#                  tmux select-pane -L"
#
# bind -n C-j run "($is_vim && tmux send-keys C-j)  || \
#                  ($is_fzf && tmux send-keys C-j) || \
#                  tmux select-pane -D"
#
# bind -n C-k run "($is_vim && tmux send-keys C-k) || \
#                 ($is_fzf && tmux send-keys C-k)  || \
#                 tmux select-pane -U"

# bind -n C-l run "($is_vim && tmux send-keys C-l) || \
#                  tmux select-pane -R"
#
# bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Use Alt-vim keys without prefix key to switch panes
bind -n M-h select-pane -L
bind -n M-j select-pane -D
bind -n M-k select-pane -U
bind -n M-l select-pane -R

# Use Alt-arrow keys without prefix key to switch panes
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

bind -n M-Up    if "[ $(tmux display -p '#{pane_current_command}') = vim ]" "send-keys M-Up" "select-pane -U"
bind -n M-Down  if "[ $(tmux display -p '#{pane_current_command}') = vim ]" "send-keys M-Down" "select-pane -D"
bind -n M-Left  if "[ $(tmux display -p '#{pane_current_command}') = vim ]" "send-keys M-Left" "select-pane -L"
bind -n M-Right if "[ $(tmux display -p '#{pane_current_command}') = vim ]" "send-keys M-Right" "select-pane -R"

# Selecting next pane using "Tab"
# -r is to enable repeat of command without need for pressing prefix again
# Tab is repeatable, within repeat-time (ms) delay...
bind-key -r Tab select-pane -t :.+

# Use vim type keys for re-sizing panes
bind -r < resize-pane -L 1
bind -r > resize-pane -R 1
bind -r - resize-pane -D 1
bind -r + resize-pane -U 1

# Shift arrow to switch windows
bind -n S-Left  previous-window
bind -n S-Right next-window

bind -n C-0 select-window -t 0
bind -n C-1 select-window -t 1
bind -n C-2 select-window -t 2
bind -n C-3 select-window -t 3
bind -n C-4 select-window -t 4
bind -n C-5 select-window -t 5
bind -n C-6 select-window -t 6
bind -n C-7 select-window -t 7
bind -n C-8 select-window -t 8
bind -n C-9 select-window -t 9

# Update SSH socket variable on tmux session re-open
set-environment -g 'SSH_AUTH_SOCK' ~/.ssh/ssh_auth_sock
